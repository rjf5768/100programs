--- Program 81 ---
critical path is "test000009.kquery", content is "array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq false (Eq 0 N2:(SRem w32 N0 N1)))
         (Eq false
             (Eq 0 N3:(SRem w32 N1 N2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N2 N3)))
         (Eq false
             (Eq 0 N5:(SRem w32 N3 N4)))
         (Eq false
             (Eq 0 N6:(SRem w32 N4 N5)))
         (Eq false
             (Eq 0 N7:(SRem w32 N5 N6)))
         (Eq false
             (Eq 0 N8:(SRem w32 N6 N7)))
         (Eq false
             (Eq 0 (SRem w32 N7 N8)))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var a int 0
var b int 0
[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Slt 0
                  (ReadLSB w32 0 a)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvslt  (_ bv0 32) (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var a int 64
var b int 64
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq 0 (SRem w32 N0 N1))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv0 32) ?B1 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv0 32) (bvsrem  ?B2 ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var a int 32
var b int 64
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq false (Eq 0 N2:(SRem w32 N0 N1)))
         (Eq 0 (SRem w32 N1 N2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsrem  ?B2 ?B1 ) ) ) (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv0 32) ?B1 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B3 ) ) ) (=  (_ bv0 32) (bvsrem  ?B1 ?B3 ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var a int 64
var b int 96
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq false (Eq 0 N2:(SRem w32 N0 N1)))
         (Eq false
             (Eq 0 N3:(SRem w32 N1 N2)))
         (Eq 0 (SRem w32 N2 N3))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsrem  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsrem  ?B1 ?B3 ) ) ) (and  (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv0 32) ?B1 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B3 ) ) ) (=  false (=  (_ bv0 32) ?B4 ) ) ) (=  (_ bv0 32) (bvsrem  ?B3 ?B4 ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var a int 96
var b int 92
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq false (Eq 0 N2:(SRem w32 N0 N1)))
         (Eq false
             (Eq 0 N3:(SRem w32 N1 N2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N2 N3)))
         (Eq 0 (SRem w32 N3 N4))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsrem  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsrem  ?B1 ?B3 ) ) ) (let ( (?B5 (bvsrem  ?B3 ?B4 ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv0 32) ?B1 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B3 ) ) ) (=  false (=  (_ bv0 32) ?B4 ) ) ) (=  false (=  (_ bv0 32) ?B5 ) ) ) (=  (_ bv0 32) (bvsrem  ?B4 ?B5 ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var a int 84
var b int 36
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq false (Eq 0 N2:(SRem w32 N0 N1)))
         (Eq false
             (Eq 0 N3:(SRem w32 N1 N2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N2 N3)))
         (Eq false
             (Eq 0 N5:(SRem w32 N3 N4)))
         (Eq 0 (SRem w32 N4 N5))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsrem  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsrem  ?B1 ?B3 ) ) ) (let ( (?B5 (bvsrem  ?B3 ?B4 ) ) ) (let ( (?B6 (bvsrem  ?B4 ?B5 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv0 32) ?B1 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B3 ) ) ) (=  false (=  (_ bv0 32) ?B4 ) ) ) (=  false (=  (_ bv0 32) ?B5 ) ) ) (=  false (=  (_ bv0 32) ?B6 ) ) ) (=  (_ bv0 32) (bvsrem  ?B5 ?B6 ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000007
[Parsed from .ktest]
var a int 92
var b int 44
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq false (Eq 0 N2:(SRem w32 N0 N1)))
         (Eq false
             (Eq 0 N3:(SRem w32 N1 N2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N2 N3)))
         (Eq false
             (Eq 0 N5:(SRem w32 N3 N4)))
         (Eq false
             (Eq 0 N6:(SRem w32 N4 N5)))
         (Eq 0 (SRem w32 N5 N6))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsrem  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsrem  ?B1 ?B3 ) ) ) (let ( (?B5 (bvsrem  ?B3 ?B4 ) ) ) (let ( (?B6 (bvsrem  ?B4 ?B5 ) ) ) (let ( (?B7 (bvsrem  ?B5 ?B6 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv0 32) ?B1 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B3 ) ) ) (=  false (=  (_ bv0 32) ?B4 ) ) ) (=  false (=  (_ bv0 32) ?B5 ) ) ) (=  false (=  (_ bv0 32) ?B6 ) ) ) (=  false (=  (_ bv0 32) ?B7 ) ) ) (=  (_ bv0 32) (bvsrem  ?B6 ?B7 ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000008
[Parsed from .ktest]
var a int 96
var b int 88
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq false (Eq 0 N2:(SRem w32 N0 N1)))
         (Eq false
             (Eq 0 N3:(SRem w32 N1 N2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N2 N3)))
         (Eq false
             (Eq 0 N5:(SRem w32 N3 N4)))
         (Eq false
             (Eq 0 N6:(SRem w32 N4 N5)))
         (Eq false
             (Eq 0 N7:(SRem w32 N5 N6)))
         (Eq 0 (SRem w32 N6 N7))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsrem  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsrem  ?B1 ?B3 ) ) ) (let ( (?B5 (bvsrem  ?B3 ?B4 ) ) ) (let ( (?B6 (bvsrem  ?B4 ?B5 ) ) ) (let ( (?B7 (bvsrem  ?B5 ?B6 ) ) ) (let ( (?B8 (bvsrem  ?B6 ?B7 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv0 32) ?B1 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B3 ) ) ) (=  false (=  (_ bv0 32) ?B4 ) ) ) (=  false (=  (_ bv0 32) ?B5 ) ) ) (=  false (=  (_ bv0 32) ?B6 ) ) ) (=  false (=  (_ bv0 32) ?B7 ) ) ) (=  false (=  (_ bv0 32) ?B8 ) ) ) (=  (_ bv0 32) (bvsrem  ?B7 ?B8 ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000009
[Parsed from .ktest]
var a int 100
var b int 99
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq false (Eq 0 N2:(SRem w32 N0 N1)))
         (Eq false
             (Eq 0 N3:(SRem w32 N1 N2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N2 N3)))
         (Eq false
             (Eq 0 N5:(SRem w32 N3 N4)))
         (Eq false
             (Eq 0 N6:(SRem w32 N4 N5)))
         (Eq false
             (Eq 0 N7:(SRem w32 N5 N6)))
         (Eq false
             (Eq 0 N8:(SRem w32 N6 N7)))
         (Eq false
             (Eq 0 (SRem w32 N7 N8)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsrem  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsrem  ?B1 ?B3 ) ) ) (let ( (?B5 (bvsrem  ?B3 ?B4 ) ) ) (let ( (?B6 (bvsrem  ?B4 ?B5 ) ) ) (let ( (?B7 (bvsrem  ?B5 ?B6 ) ) ) (let ( (?B8 (bvsrem  ?B6 ?B7 ) ) ) (let ( (?B9 (bvsrem  ?B7 ?B8 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv0 32) ?B1 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B3 ) ) ) (=  false (=  (_ bv0 32) ?B4 ) ) ) (=  false (=  (_ bv0 32) ?B5 ) ) ) (=  false (=  (_ bv0 32) ?B6 ) ) ) (=  false (=  (_ bv0 32) ?B7 ) ) ) (=  false (=  (_ bv0 32) ?B8 ) ) ) (=  false (=  (_ bv0 32) ?B9 ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B8 ?B9 ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


--- Program 82 ---
critical path is "test000008.kquery", content is "array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
array d[4] : w32 -> w8 = symbolic
(query [(Sle 4294967286
              N0:(ReadLSB w32 0 a))
         (Sle N0 10)
         (Sle 4294967286
              N1:(ReadLSB w32 0 b))
         (Sle N1 10)
         (Sle 4294967286
              N2:(ReadLSB w32 0 c))
         (Sle N2 10)
         (Sle 4294967286
              N3:(ReadLSB w32 0 d))
         (Sle N3 10)
         (Slt (Add w32 (Mul w32 (Add w32 N0 N1)
                              (Sub w32 N2 N3))
                   (Sub w32 (Mul w32 N0 N3) (Mul w32 N1 N2)))
              4294966296)]
        false)
"

Test case: test000001
[Parsed from .ktest]
var a int -11
var b int 0
var c int 0
var d int 0
[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 4294967286
                  (ReadLSB w32 0 a)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv4294967286 32) (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var a int 0
var b int -11
var c int 0
var d int 0
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Sle 4294967286
              N0:(ReadLSB w32 0 a))
         (Sle N0 10)
         (Eq false
             (Sle 4294967286
                  (ReadLSB w32 0 b)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv4294967286 32) ?B1 ) (bvsle  ?B1 (_ bv10 32) ) ) (=  false (bvsle  (_ bv4294967286 32) (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var a int 0
var b int 0
var c int -11
var d int 0
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
(query [(Sle 4294967286
              N0:(ReadLSB w32 0 a))
         (Sle N0 10)
         (Sle 4294967286
              N1:(ReadLSB w32 0 b))
         (Sle N1 10)
         (Eq false
             (Sle 4294967286
                  (ReadLSB w32 0 c)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv4294967286 32) ?B2 ) (bvsle  ?B2 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (=  false (bvsle  (_ bv4294967286 32) (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var a int 0
var b int 0
var c int 0
var d int -11
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
array d[4] : w32 -> w8 = symbolic
(query [(Sle 4294967286
              N0:(ReadLSB w32 0 a))
         (Sle N0 10)
         (Sle 4294967286
              N1:(ReadLSB w32 0 b))
         (Sle N1 10)
         (Sle 4294967286
              N2:(ReadLSB w32 0 c))
         (Sle N2 10)
         (Eq false
             (Sle 4294967286
                  (ReadLSB w32 0 d)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun d () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv4294967286 32) ?B3 ) (bvsle  ?B3 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B2 ) ) (bvsle  ?B2 (_ bv10 32) ) ) (=  false (bvsle  (_ bv4294967286 32) (concat  (select  d (_ bv3 32) ) (concat  (select  d (_ bv2 32) ) (concat  (select  d (_ bv1 32) ) (select  d (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var a int -9
var b int -9
var c int -9
var d int -9
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
array d[4] : w32 -> w8 = symbolic
(query [(Sle 4294967286
              N0:(ReadLSB w32 0 a))
         (Sle N0 10)
         (Sle 4294967286
              N1:(ReadLSB w32 0 b))
         (Sle N1 10)
         (Sle 4294967286
              N2:(ReadLSB w32 0 c))
         (Sle N2 10)
         (Sle 4294967286
              N3:(ReadLSB w32 0 d))
         (Sle N3 10)
         (Eq false
             (Slt (Add w32 (Mul w32 (Add w32 N0 N1)
                                  (Sub w32 N2 N3))
                       (Sub w32 (Mul w32 N0 N3) (Mul w32 N1 N2)))
                  4294966296))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun d () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  d (_ bv3 32) ) (concat  (select  d (_ bv2 32) ) (concat  (select  d (_ bv1 32) ) (select  d (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B4 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv4294967286 32) ?B4 ) (bvsle  ?B4 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B3 ) ) (bvsle  ?B3 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B2 ) ) (bvsle  ?B2 (_ bv10 32) ) ) (=  false (bvslt  (bvadd  (bvmul  (bvadd  ?B4 ?B1 ) (bvsub  ?B3 ?B2 ) ) (bvsub  (bvmul  ?B4 ?B2 ) (bvmul  ?B1 ?B3 ) ) ) (_ bv4294966296 32) ) ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var a int -10
var b int -10
var c int -10
var d int 10
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
array d[4] : w32 -> w8 = symbolic
(query [(Sle 4294967286
              N0:(ReadLSB w32 0 a))
         (Sle N0 10)
         (Sle 4294967286
              N1:(ReadLSB w32 0 b))
         (Sle N1 10)
         (Sle 4294967286
              N2:(ReadLSB w32 0 c))
         (Sle N2 10)
         (Sle 4294967286
              N3:(ReadLSB w32 0 d))
         (Sle N3 10)
         (Slt (Add w32 (Mul w32 (Add w32 N0 N1)
                              (Sub w32 N2 N3))
                   (Sub w32 (Mul w32 N0 N3) (Mul w32 N1 N2)))
              4294966296)
         (Eq false
             (Slt (Add w32 (Mul w32 (Add w32 N0 N1)
                                  (Sub w32 N2 N3))
                       (Sub w32 (Mul w32 N0 N3) (Mul w32 N1 N2)))
                  4294966297))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun d () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  d (_ bv3 32) ) (concat  (select  d (_ bv2 32) ) (concat  (select  d (_ bv1 32) ) (select  d (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B4 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B5 (bvadd  (bvmul  (bvadd  ?B4 ?B1 ) (bvsub  ?B3 ?B2 ) ) (bvsub  (bvmul  ?B4 ?B2 ) (bvmul  ?B1 ?B3 ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv4294967286 32) ?B4 ) (bvsle  ?B4 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B3 ) ) (bvsle  ?B3 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B2 ) ) (bvsle  ?B2 (_ bv10 32) ) ) (bvslt  ?B5 (_ bv4294966296 32) ) ) (=  false (bvslt  ?B5 (_ bv4294966297 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000007
[Parsed from .ktest]
var a int 10
var b int 10
var c int 10
var d int -8
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
array d[4] : w32 -> w8 = symbolic
(query [(Sle 4294967286
              N0:(ReadLSB w32 0 a))
         (Sle N0 10)
         (Sle 4294967286
              N1:(ReadLSB w32 0 b))
         (Sle N1 10)
         (Sle 4294967286
              N2:(ReadLSB w32 0 c))
         (Sle N2 10)
         (Sle 4294967286
              N3:(ReadLSB w32 0 d))
         (Sle N3 10)
         (Slt (Add w32 (Mul w32 (Add w32 N0 N1)
                              (Sub w32 N2 N3))
                   (Sub w32 (Mul w32 N0 N3) (Mul w32 N1 N2)))
              4294966297)
         (Eq false
             (Slt (Add w32 (Mul w32 (Add w32 N0 N1)
                                  (Sub w32 N2 N3))
                       (Sub w32 (Mul w32 N0 N3) (Mul w32 N1 N2)))
                  4294966298))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun d () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  d (_ bv3 32) ) (concat  (select  d (_ bv2 32) ) (concat  (select  d (_ bv1 32) ) (select  d (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B4 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B5 (bvadd  (bvmul  (bvadd  ?B4 ?B1 ) (bvsub  ?B3 ?B2 ) ) (bvsub  (bvmul  ?B4 ?B2 ) (bvmul  ?B1 ?B3 ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv4294967286 32) ?B4 ) (bvsle  ?B4 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B3 ) ) (bvsle  ?B3 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B2 ) ) (bvsle  ?B2 (_ bv10 32) ) ) (bvslt  ?B5 (_ bv4294966297 32) ) ) (=  false (bvslt  ?B5 (_ bv4294966298 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000008
[Parsed from .ktest]
var a int 9
var b int 9
var c int 9
var d int 9
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
array d[4] : w32 -> w8 = symbolic
(query [(Sle 4294967286
              N0:(ReadLSB w32 0 a))
         (Sle N0 10)
         (Sle 4294967286
              N1:(ReadLSB w32 0 b))
         (Sle N1 10)
         (Sle 4294967286
              N2:(ReadLSB w32 0 c))
         (Sle N2 10)
         (Sle 4294967286
              N3:(ReadLSB w32 0 d))
         (Sle N3 10)
         (Slt (Add w32 (Mul w32 (Add w32 N0 N1)
                              (Sub w32 N2 N3))
                   (Sub w32 (Mul w32 N0 N3) (Mul w32 N1 N2)))
              4294966298)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun d () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  d (_ bv3 32) ) (concat  (select  d (_ bv2 32) ) (concat  (select  d (_ bv1 32) ) (select  d (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B4 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (bvslt  (bvadd  (bvmul  (bvadd  ?B4 ?B1 ) (bvsub  ?B3 ?B2 ) ) (bvsub  (bvmul  ?B4 ?B2 ) (bvmul  ?B1 ?B3 ) ) ) (_ bv4294966298 32) ) ) ) )
(check-sat)
(exit)


--- Program 83 ---
critical path is "test000021.kquery", content is "array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq false
             (Eq 1 (SRem w32 N1 2)))
         (Slt 0 N3:(SDiv w32 N1 2))
         (Eq false
             (Eq 1 (SRem w32 N3 2)))
         (Slt 0 N4:(SDiv w32 N3 2))
         (Eq false
             (Eq 1 (SRem w32 N4 2)))
         (Slt 0 N5:(SDiv w32 N4 2))
         (Eq false
             (Eq 1 (SRem w32 N5 2)))
         (Slt 0 N6:(SDiv w32 N5 2))
         (Eq false
             (Eq 1 (SRem w32 N6 2)))
         (Slt 0 N7:(SDiv w32 N6 2))
         (Eq false
             (Eq 1 (SRem w32 N7 2)))
         (Eq 0 (SDiv w32 N7 2))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var base int 0
var exp int -1
var mod int 2
[.kquery content]
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              (ReadLSB w32 0 mod))
         (Sle (ReadLSB w32 0 mod)
              100)
         (Eq false
             (Sle 0
                  (ReadLSB w32 0 exp)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvslt  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (bvsle  (_ bv0 32) ?B2 ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var base int -1
var exp int 0
var mod int 2
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              (ReadLSB w32 0 mod))
         (Sle (ReadLSB w32 0 mod)
              100)
         (Sle 0
              (ReadLSB w32 0 exp))
         (Eq false
             (Sle 0
                  (ReadLSB w32 0 base)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (=  false (bvsle  (_ bv0 32) ?B2 ) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var base int 0
var exp int 0
var mod int 0
[.kquery content]
array mod[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Slt 1
                  (ReadLSB w32 0 mod)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (=  false (bvslt  (_ bv1 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var base int 0
var exp int 1
var mod int 2
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq 1 (SRem w32 N1 2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (sdiv  ?B1 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  (_ bv1 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var base int 0
var exp int 2
var mod int 2
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq false
             (Eq 1 (SRem w32 N1 2)))
         (Slt 0 (SDiv w32 N1 2))
         (Eq 1
             (SRem w32 (SDiv w32 N1 2)
                  2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (sdiv  ?B1 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B4 ) ) (=  (_ bv1 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var base int 0
var exp int 4
var mod int 2
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq false
             (Eq 1 (SRem w32 N1 2)))
         (Slt 0 N3:(SDiv w32 N1 2))
         (Eq false
             (Eq 1 (SRem w32 N3 2)))
         (Slt 0 (SDiv w32 N3 2))
         (Eq 1
             (SRem w32 (SDiv w32 N3 2)
                  2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (sdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (sdiv  ?B4 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B4 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B5 ) ) (=  (_ bv1 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000007
[Parsed from .ktest]
var base int 0
var exp int 16
var mod int 2
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq false
             (Eq 1 (SRem w32 N1 2)))
         (Slt 0 N3:(SDiv w32 N1 2))
         (Eq false
             (Eq 1 (SRem w32 N3 2)))
         (Slt 0 N4:(SDiv w32 N3 2))
         (Eq false
             (Eq 1 (SRem w32 N4 2)))
         (Slt 0 N5:(SDiv w32 N4 2))
         (Eq false
             (Eq 1 (SRem w32 N5 2)))
         (Eq 0 (SDiv w32 N5 2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (sdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (sdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (sdiv  ?B5 (_ bv2 32) ) ) ) (let ( (?B7 (sdiv  ?B6 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B4 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B5 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B6 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (=  (_ bv0 32) (sdiv  ?B6 (_ bv2 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000008
[Parsed from .ktest]
var base int 64
var exp int 17
var mod int 65
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq 1 (SRem w32 N1 2))
         (Slt 0 N3:(SDiv w32 N1 2))
         (Eq false
             (Eq 1 (SRem w32 N3 2)))
         (Slt 0 N4:(SDiv w32 N3 2))
         (Eq false
             (Eq 1 (SRem w32 N4 2)))
         (Slt 0 N5:(SDiv w32 N4 2))
         (Eq false
             (Eq 1 (SRem w32 N5 2)))
         (Slt 0 N6:(SDiv w32 N5 2))
         (Eq 1 (SRem w32 N6 2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (sdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (sdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (sdiv  ?B5 (_ bv2 32) ) ) ) (let ( (?B7 (sdiv  ?B6 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  (_ bv1 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv0 32) ?B4 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B5 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B6 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B7 ) ) (=  (_ bv1 32) (bvsrem  ?B7 (_ bv2 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000009
[Parsed from .ktest]
var base int 0
var exp int 8
var mod int 2
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq false
             (Eq 1 (SRem w32 N1 2)))
         (Slt 0 N3:(SDiv w32 N1 2))
         (Eq false
             (Eq 1 (SRem w32 N3 2)))
         (Slt 0 N4:(SDiv w32 N3 2))
         (Eq false
             (Eq 1 (SRem w32 N4 2)))
         (Slt 0 (SDiv w32 N4 2))
         (Eq 1
             (SRem w32 (SDiv w32 N4 2)
                  2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (sdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (sdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (sdiv  ?B5 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B4 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B5 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B6 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) (sdiv  ?B6 (_ bv2 32) ) ) ) (=  (_ bv1 32) (bvsrem  (sdiv  ?B6 (_ bv2 32) ) (_ bv2 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000010
[Parsed from .ktest]
var base int 0
var exp int 20
var mod int 2
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq false
             (Eq 1 (SRem w32 N1 2)))
         (Slt 0 N3:(SDiv w32 N1 2))
         (Eq false
             (Eq 1 (SRem w32 N3 2)))
         (Slt 0 N4:(SDiv w32 N3 2))
         (Eq false
             (Eq 1 (SRem w32 N4 2)))
         (Slt 0 N5:(SDiv w32 N4 2))
         (Eq false
             (Eq 1 (SRem w32 N5 2)))
         (Slt 0 N6:(SDiv w32 N5 2))
         (Eq false
             (Eq 1 (SRem w32 N6 2)))
         (Eq 0 (SDiv w32 N6 2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (sdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (sdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (sdiv  ?B5 (_ bv2 32) ) ) ) (let ( (?B7 (sdiv  ?B6 (_ bv2 32) ) ) ) (let ( (?B8 (sdiv  ?B7 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B4 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B5 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B6 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B7 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B7 (_ bv2 32) ) ) ) ) (=  (_ bv0 32) (sdiv  ?B7 (_ bv2 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000011
[Parsed from .ktest]
var base int 2
var exp int 0
var mod int 3
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Eq false (Slt 0 N1))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (=  false (bvslt  (_ bv0 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000012
[Parsed from .ktest]
var base int 913789082
var exp int 14
var mod int 29
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq false
             (Eq 1 (SRem w32 N1 2)))
         (Slt 0 N3:(SDiv w32 N1 2))
         (Eq false
             (Eq 1 (SRem w32 N3 2)))
         (Slt 0 N4:(SDiv w32 N3 2))
         (Eq false
             (Eq 1 (SRem w32 N4 2)))
         (Slt 0 N5:(SDiv w32 N4 2))
         (Eq 1 (SRem w32 N5 2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (sdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (sdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (sdiv  ?B5 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B4 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B5 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B6 ) ) (=  (_ bv1 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000013
[Parsed from .ktest]
var base int 42
var exp int 15
var mod int 43
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq 1 (SRem w32 N1 2))
         (Slt 0 N3:(SDiv w32 N1 2))
         (Eq false
             (Eq 1 (SRem w32 N3 2)))
         (Slt 0 N4:(SDiv w32 N3 2))
         (Eq false
             (Eq 1 (SRem w32 N4 2)))
         (Slt 0 N5:(SDiv w32 N4 2))
         (Eq false
             (Eq 1 (SRem w32 N5 2)))
         (Slt 0 (SDiv w32 N5 2))
         (Eq 1
             (SRem w32 (SDiv w32 N5 2)
                  2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (sdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (sdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (sdiv  ?B5 (_ bv2 32) ) ) ) (let ( (?B7 (sdiv  ?B6 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  (_ bv1 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv0 32) ?B4 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B5 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B6 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B7 ) ) (=  (_ bv1 32) (bvsrem  ?B7 (_ bv2 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000014
[Parsed from .ktest]
var base int 437987328
var exp int 12
var mod int 81
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq false
             (Eq 1 (SRem w32 N1 2)))
         (Slt 0 N3:(SDiv w32 N1 2))
         (Eq false
             (Eq 1 (SRem w32 N3 2)))
         (Slt 0 N4:(SDiv w32 N3 2))
         (Eq false
             (Eq 1 (SRem w32 N4 2)))
         (Slt 0 N5:(SDiv w32 N4 2))
         (Eq 1 (SRem w32 N5 2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (sdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (sdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (sdiv  ?B5 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B4 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B5 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B6 ) ) (=  (_ bv1 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000015
[Parsed from .ktest]
var base int 41
var exp int 13
var mod int 57
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq 1 (SRem w32 N1 2))
         (Slt 0 N3:(SDiv w32 N1 2))
         (Eq false
             (Eq 1 (SRem w32 N3 2)))
         (Slt 0 N4:(SDiv w32 N3 2))
         (Eq false
             (Eq 1 (SRem w32 N4 2)))
         (Slt 0 N5:(SDiv w32 N4 2))
         (Eq 1 (SRem w32 N5 2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (sdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (sdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (sdiv  ?B5 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  (_ bv1 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv0 32) ?B4 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B5 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B6 ) ) (=  (_ bv1 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000016
[Parsed from .ktest]
var base int 0
var exp int 18
var mod int 2
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq false
             (Eq 1 (SRem w32 N1 2)))
         (Slt 0 N3:(SDiv w32 N1 2))
         (Eq false
             (Eq 1 (SRem w32 N3 2)))
         (Slt 0 N4:(SDiv w32 N3 2))
         (Eq false
             (Eq 1 (SRem w32 N4 2)))
         (Slt 0 N5:(SDiv w32 N4 2))
         (Eq false
             (Eq 1 (SRem w32 N5 2)))
         (Slt 0 N6:(SDiv w32 N5 2))
         (Eq 1 (SRem w32 N6 2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (sdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (sdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (sdiv  ?B5 (_ bv2 32) ) ) ) (let ( (?B7 (sdiv  ?B6 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B4 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B5 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B6 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B7 ) ) (=  (_ bv1 32) (bvsrem  ?B7 (_ bv2 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000017
[Parsed from .ktest]
var base int 0
var exp int 6
var mod int 2
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq false
             (Eq 1 (SRem w32 N1 2)))
         (Slt 0 N3:(SDiv w32 N1 2))
         (Eq false
             (Eq 1 (SRem w32 N3 2)))
         (Slt 0 (SDiv w32 N3 2))
         (Eq false
             (Eq 1 (SRem w32 (SDiv w32 N3 2)
                           2)))
         (Eq 0 (SDiv w32 (SDiv w32 N3 2)
                      2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (sdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (sdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (sdiv  ?B5 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B4 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B5 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B6 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (=  (_ bv0 32) (sdiv  ?B6 (_ bv2 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000018
[Parsed from .ktest]
var base int 16
var exp int 19
var mod int 47
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq 1 (SRem w32 N1 2))
         (Slt 0 N3:(SDiv w32 N1 2))
         (Eq false
             (Eq 1 (SRem w32 N3 2)))
         (Slt 0 N4:(SDiv w32 N3 2))
         (Eq false
             (Eq 1 (SRem w32 N4 2)))
         (Slt 0 N5:(SDiv w32 N4 2))
         (Eq false
             (Eq 1 (SRem w32 N5 2)))
         (Slt 0 N6:(SDiv w32 N5 2))
         (Eq 1 (SRem w32 N6 2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (sdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (sdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (sdiv  ?B5 (_ bv2 32) ) ) ) (let ( (?B7 (sdiv  ?B6 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  (_ bv1 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv0 32) ?B4 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B5 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B6 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B7 ) ) (=  (_ bv1 32) (bvsrem  ?B7 (_ bv2 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000019
[Parsed from .ktest]
var base int 2
var exp int 10
var mod int 3
[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Slt 1
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Slt 0 N1)
         (Eq false
             (Eq 1 (SRem w32 N1 2)))
         (Slt 0 N3:(SDiv w32 N1 2))
         (Eq false
             (Eq 1 (SRem w32 N3 2)))
         (Slt 0 N4:(SDiv w32 N3 2))
         (Eq 1 (SRem w32 N4 2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (sdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (sdiv  ?B4 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvslt  ?B2 ?B3 ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (bvslt  (_ bv0 32) ?B4 ) ) (=  false (=  (_ bv1 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (

--- Program 84 ---
critical path is "test000002.kquery", content is "array x[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Slt (ReadLSB w32 0 x)
                  0))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var x int -1
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Slt (ReadLSB w32 0 x)
              0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (bvslt  (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) (_ bv0 32) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var x int 0
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Slt (ReadLSB w32 0 x)
                  0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvslt  (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) (_ bv0 32) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var x int 65536
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Slt (ReadLSB w32 0 x)
                  0))
         (Eq false
             (Eq 0
                 (ReadLSB w32 0 x)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (and  (=  false (bvslt  (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) (_ bv0 32) ) ) (=  false (=  (_ bv0 32) (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) ) )
(check-sat)
(exit)


--- Program 85 ---
critical path is "test000008.kquery", content is "array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 a))
         (Sle N0 50)
         (Sle 0
              N1:(ReadLSB w32 0 b))
         (Sle N1 50)
         (Sle 0
              N2:(ReadLSB w32 0 c))
         (Sle N2 50)
         (Eq false (Slt N0 N1))
         (Eq false (Slt N2 N1))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var a int -1
var b int 0
var c int 0
[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 a)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var a int 0
var b int -1
var c int 0
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 a))
         (Sle N0 50)
         (Eq false
             (Sle 0
                  (ReadLSB w32 0 b)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (=  false (bvsle  (_ bv0 32) (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var a int 0
var b int 0
var c int -1
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 a))
         (Sle N0 50)
         (Sle 0
              N1:(ReadLSB w32 0 b))
         (Sle N1 50)
         (Eq false
             (Sle 0
                  (ReadLSB w32 0 c)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv50 32) ) ) (=  false (bvsle  (_ bv0 32) (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var a int 1
var b int 0
var c int 0
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 a))
         (Sle N0 50)
         (Sle 0
              N1:(ReadLSB w32 0 b))
         (Sle N1 50)
         (Sle 0
              N2:(ReadLSB w32 0 c))
         (Sle N2 50)
         (Slt N1 N0)
         (Eq false (Slt N2 N1))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B3 ) (bvsle  ?B3 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv50 32) ) ) (bvslt  ?B1 ?B3 ) ) (=  false (bvslt  ?B2 ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var a int 0
var b int 1
var c int 0
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 a))
         (Sle N0 50)
         (Sle 0
              N1:(ReadLSB w32 0 b))
         (Sle N1 50)
         (Sle 0
              N2:(ReadLSB w32 0 c))
         (Sle N2 50)
         (Eq false (Slt N1 N0))
         (Eq false (Slt N2 N1))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B3 ) (bvsle  ?B3 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv50 32) ) ) (=  false (bvslt  ?B1 ?B3 ) ) ) (=  false (bvslt  ?B2 ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var a int 0
var b int 0
var c int 1
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 a))
         (Sle N0 50)
         (Sle 0
              N1:(ReadLSB w32 0 b))
         (Sle N1 50)
         (Sle 0
              N2:(ReadLSB w32 0 c))
         (Sle N2 50)
         (Eq false (Slt N1 N0))
         (Slt N2 N1)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B3 ) (bvsle  ?B3 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv50 32) ) ) (=  false (bvslt  ?B1 ?B3 ) ) ) (bvslt  ?B2 ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000007
[Parsed from .ktest]
var a int 2
var b int 1
var c int 0
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 a))
         (Sle N0 50)
         (Sle 0
              N1:(ReadLSB w32 0 b))
         (Sle N1 50)
         (Sle 0
              N2:(ReadLSB w32 0 c))
         (Sle N2 50)
         (Slt N1 N0)
         (Slt N2 N1)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B3 ) (bvsle  ?B3 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv50 32) ) ) (bvslt  ?B1 ?B3 ) ) (bvslt  ?B2 ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000008
[Parsed from .ktest]
var a int 0
var b int 0
var c int 0
[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 a))
         (Sle N0 50)
         (Sle 0
              N1:(ReadLSB w32 0 b))
         (Sle N1 50)
         (Sle 0
              N2:(ReadLSB w32 0 c))
         (Sle N2 50)
         (Eq false (Slt N0 N1))
         (Eq false (Slt N2 N1))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B3 ) (bvsle  ?B3 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv50 32) ) ) (=  false (bvslt  ?B3 ?B1 ) ) ) (=  false (bvslt  ?B2 ?B1 ) ) ) ) )
(check-sat)
(exit)


--- Program 86 ---
critical path is "test000004.kquery", content is "array x[4] : w32 -> w8 = symbolic
array y[4] : w32 -> w8 = symbolic
(query [(Sle 4294967246
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 4294967246
              N1:(ReadLSB w32 0 y))
         (Sle N1 50)
         (Eq false (Slt N1 N0))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var x int -51
var y int 0
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 4294967246
                  (ReadLSB w32 0 x)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv4294967246 32) (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var x int 0
var y int -51
[.kquery content]
array x[4] : w32 -> w8 = symbolic
array y[4] : w32 -> w8 = symbolic
(query [(Sle 4294967246
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Eq false
             (Sle 4294967246
                  (ReadLSB w32 0 y)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun y () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv4294967246 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (=  false (bvsle  (_ bv4294967246 32) (concat  (select  y (_ bv3 32) ) (concat  (select  y (_ bv2 32) ) (concat  (select  y (_ bv1 32) ) (select  y (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var x int -50
var y int -50
[.kquery content]
array x[4] : w32 -> w8 = symbolic
array y[4] : w32 -> w8 = symbolic
(query [(Sle 4294967246
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Eq 4294967246
             (ReadLSB w32 0 y))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun y () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv4294967246 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (=  (_ bv4294967246 32) (concat  (select  y (_ bv3 32) ) (concat  (select  y (_ bv2 32) ) (concat  (select  y (_ bv1 32) ) (select  y (_ bv0 32) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var x int 0
var y int 0
[.kquery content]
array x[4] : w32 -> w8 = symbolic
array y[4] : w32 -> w8 = symbolic
(query [(Sle 4294967246
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 4294967246
              N1:(ReadLSB w32 0 y))
         (Sle N1 50)
         (Eq false (Slt N1 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun y () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  y (_ bv3 32) ) (concat  (select  y (_ bv2 32) ) (concat  (select  y (_ bv1 32) ) (select  y (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv4294967246 32) ?B2 ) (bvsle  ?B2 (_ bv50 32) ) ) (bvsle  (_ bv4294967246 32) ?B1 ) ) (bvsle  ?B1 (_ bv50 32) ) ) (=  false (bvslt  ?B1 ?B2 ) ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var x int 1
var y int 0
[.kquery content]
array x[4] : w32 -> w8 = symbolic
array y[4] : w32 -> w8 = symbolic
(query [(Sle 4294967246
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 4294967246
              N1:(ReadLSB w32 0 y))
         (Sle N1 50)
         (Slt N1 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun y () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  y (_ bv3 32) ) (concat  (select  y (_ bv2 32) ) (concat  (select  y (_ bv1 32) ) (select  y (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv4294967246 32) ?B2 ) (bvsle  ?B2 (_ bv50 32) ) ) (bvsle  (_ bv4294967246 32) ?B1 ) ) (bvsle  ?B1 (_ bv50 32) ) ) (bvslt  ?B1 ?B2 ) ) ) )
(check-sat)
(exit)


--- Program 87 ---
critical path is "test000003.kquery", content is "array a[4] : w32 -> w8 = symbolic
(query [(Sle 4294967196
              N0:(ReadLSB w32 0 a))
         (Sle N0 100)
         (Eq false (Slt N0 0))
         (Eq false (Eq 0 N0))
         (Eq false (Slt 50 N0))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var a int -101
[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 4294967196
                  (ReadLSB w32 0 a)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv4294967196 32) (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var a int -74
[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Sle 4294967196
              N0:(ReadLSB w32 0 a))
         (Sle N0 100)
         (Slt N0 0)
         (Slt N0 4294967246)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv4294967196 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 (_ bv0 32) ) ) (bvslt  ?B1 (_ bv4294967246 32) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var a int 5
[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Sle 4294967196
              N0:(ReadLSB w32 0 a))
         (Sle N0 100)
         (Eq false (Slt N0 0))
         (Eq false (Eq 0 N0))
         (Eq false (Slt 50 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv4294967196 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (bvslt  ?B1 (_ bv0 32) ) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (bvslt  (_ bv50 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var a int 0
[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Sle 4294967196
              N0:(ReadLSB w32 0 a))
         (Sle N0 100)
         (Eq false (Slt N0 0))
         (Eq 0 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv4294967196 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (bvslt  ?B1 (_ bv0 32) ) ) ) (=  (_ bv0 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var a int -1
[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Sle 4294967196
              N0:(ReadLSB w32 0 a))
         (Sle N0 100)
         (Slt N0 0)
         (Eq false (Slt N0 4294967246))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv4294967196 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 (_ bv0 32) ) ) (=  false (bvslt  ?B1 (_ bv4294967246 32) ) ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var a int 94
[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Sle 4294967196
              N0:(ReadLSB w32 0 a))
         (Sle N0 100)
         (Eq false (Slt N0 0))
         (Eq false (Eq 0 N0))
         (Slt 50 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv4294967196 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (bvslt  ?B1 (_ bv0 32) ) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (bvslt  (_ bv50 32) ?B1 ) ) ) )
(check-sat)
(exit)


--- Program 88 ---
critical path is "test000051.kquery", content is "array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Sle 21 N0)
         (Sle 22 N0)
         (Sle 23 N0)
         (Sle 24 N0)
         (Sle 25 N0)
         (Sle 26 N0)
         (Sle 27 N0)
         (Sle 28 N0)
         (Sle 29 N0)
         (Sle 30 N0)
         (Sle 31 N0)
         (Sle 32 N0)
         (Sle 33 N0)
         (Sle 34 N0)
         (Sle 35 N0)
         (Sle 36 N0)
         (Sle 37 N0)
         (Sle 38 N0)
         (Sle 39 N0)
         (Sle 40 N0)
         (Sle 41 N0)
         (Sle 42 N0)
         (Sle 43 N0)
         (Sle 44 N0)
         (Sle 45 N0)
         (Sle 46 N0)
         (Sle 47 N0)
         (Sle 48 N0)
         (Sle 49 N0)
         (Eq false (Sle 50 N0))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var x int 0
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 1
                  (ReadLSB w32 0 x)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv1 32) (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var x int 1
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Eq false (Sle 2 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (=  false (bvsle  (_ bv2 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var x int 2
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Eq false (Sle 3 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (=  false (bvsle  (_ bv3 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var x int 3
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Eq false (Sle 4 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (=  false (bvsle  (_ bv4 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var x int 4
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Eq false (Sle 5 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (=  false (bvsle  (_ bv5 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var x int 5
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Eq false (Sle 6 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (=  false (bvsle  (_ bv6 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000007
[Parsed from .ktest]
var x int 6
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Eq false (Sle 7 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (=  false (bvsle  (_ bv7 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000008
[Parsed from .ktest]
var x int 7
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Eq false (Sle 8 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (=  false (bvsle  (_ bv8 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000009
[Parsed from .ktest]
var x int 8
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Eq false (Sle 9 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (=  false (bvsle  (_ bv9 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000010
[Parsed from .ktest]
var x int 9
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Eq false (Sle 10 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (=  false (bvsle  (_ bv10 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000011
[Parsed from .ktest]
var x int 10
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Eq false (Sle 11 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (=  false (bvsle  (_ bv11 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000012
[Parsed from .ktest]
var x int 11
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Eq false (Sle 12 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (=  false (bvsle  (_ bv12 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000013
[Parsed from .ktest]
var x int 12
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Eq false (Sle 13 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (=  false (bvsle  (_ bv13 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000014
[Parsed from .ktest]
var x int 13
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Eq false (Sle 14 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (=  false (bvsle  (_ bv14 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000015
[Parsed from .ktest]
var x int 14
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Eq false (Sle 15 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (=  false (bvsle  (_ bv15 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000016
[Parsed from .ktest]
var x int 15
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Eq false (Sle 16 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (=  false (bvsle  (_ bv16 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000017
[Parsed from .ktest]
var x int 16
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Eq false (Sle 17 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (=  false (bvsle  (_ bv17 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000018
[Parsed from .ktest]
var x int 17
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Eq false (Sle 18 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (=  false (bvsle  (_ bv18 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000019
[Parsed from .ktest]
var x int 18
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Eq false (Sle 19 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (=  false (bvsle  (_ bv19 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000020
[Parsed from .ktest]
var x int 19
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Eq false (Sle 20 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (=  false (bvsle  (_ bv20 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000021
[Parsed from .ktest]
var x int 20
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Eq false (Sle 21 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (bvsle  (_ bv20 32) ?B1 ) ) (=  false (bvsle  (_ bv21 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000022
[Parsed from .ktest]
var x int 21
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Sle 21 N0)
         (Eq false (Sle 22 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (bvsle  (_ bv20 32) ?B1 ) ) (bvsle  (_ bv21 32) ?B1 ) ) (=  false (bvsle  (_ bv22 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000023
[Parsed from .ktest]
var x int 22
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Sle 21 N0)
         (Sle 22 N0)
         (Eq false (Sle 23 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (bvsle  (_ bv20 32) ?B1 ) ) (bvsle  (_ bv21 32) ?B1 ) ) (bvsle  (_ bv22 32) ?B1 ) ) (=  false (bvsle  (_ bv23 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000024
[Parsed from .ktest]
var x int 23
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Sle 21 N0)
         (Sle 22 N0)
         (Sle 23 N0)
         (Eq false (Sle 24 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (bvsle  (_ bv20 32) ?B1 ) ) (bvsle  (_ bv21 32) ?B1 ) ) (bvsle  (_ bv22 32) ?B1 ) ) (bvsle  (_ bv23 32) ?B1 ) ) (=  false (bvsle  (_ bv24 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000025
[Parsed from .ktest]
var x int 24
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Sle 21 N0)
         (Sle 22 N0)
         (Sle 23 N0)
         (Sle 24 N0)
         (Eq false (Sle 25 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (bvsle  (_ bv20 32) ?B1 ) ) (bvsle  (_ bv21 32) ?B1 ) ) (bvsle  (_ bv22 32) ?B1 ) ) (bvsle  (_ bv23 32) ?B1 ) ) (bvsle  (_ bv24 32) ?B1 ) ) (=  false (bvsle  (_ bv25 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000026
[Parsed from .ktest]
var x int 25
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Sle 21 N0)
         (Sle 22 N0)
         (Sle 23 N0)
         (Sle 24 N0)
         (Sle 25 N0)
         (Eq false (Sle 26 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (bvsle  (_ bv20 32) ?B1 ) ) (bvsle  (_ bv21 32) ?B1 ) ) (bvsle  (_ bv22 32) ?B1 ) ) (bvsle  (_ bv23 32) ?B1 ) ) (bvsle  (_ bv24 32) ?B1 ) ) (bvsle  (_ bv25 32) ?B1 ) ) (=  false (bvsle  (_ bv26 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000027
[Parsed from .ktest]
var x int 26
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Sle 21 N0)
         (Sle 22 N0)
         (Sle 23 N0)
         (Sle 24 N0)
         (Sle 25 N0)
         (Sle 26 N0)
         (Eq false (Sle 27 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (bvsle  (_ bv20 32) ?B1 ) ) (bvsle  (_ bv21 32) ?B1 ) ) (bvsle  (_ bv22 32) ?B1 ) ) (bvsle  (_ bv23 32) ?B1 ) ) (bvsle  (_ bv24 32) ?B1 ) ) (bvsle  (_ bv25 32) ?B1 ) ) (bvsle  (_ bv26 32) ?B1 ) ) (=  false (bvsle  (_ bv27 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000028
[Parsed from .ktest]
var x int 27
[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (S

--- Program 89 ---
critical path is "test000101.kquery", content is "array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  N0:(ReadLSB w32 0 n)))
         (Eq false (Sle N0 100))
         (Eq false
             (Eq (Mul w32 0 0) N0))
         (Eq false
             (Slt (Mul w32 0 0) N0))
         (Eq false
             (Eq (Mul w32 1 1) N0))
         (Eq false
             (Slt (Mul w32 1 1) N0))
         (Eq false
             (Eq (Mul w32 2 2) N0))
         (Eq false
             (Slt (Mul w32 2 2) N0))
         (Eq false
             (Eq (Mul w32 3 3) N0))
         (Eq false
             (Slt (Mul w32 3 3) N0))
         (Eq false
             (Eq (Mul w32 4 4) N0))
         (Eq false
             (Slt (Mul w32 4 4) N0))
         (Eq false
             (Eq (Mul w32 5 5) N0))
         (Eq false
             (Slt (Mul w32 5 5) N0))
         (Eq false
             (Eq (Mul w32 6 6) N0))
         (Eq false
             (Slt (Mul w32 6 6) N0))
         (Eq false
             (Eq (Mul w32 7 7) N0))
         (Eq false
             (Slt (Mul w32 7 7) N0))
         (Eq false
             (Eq (Mul w32 8 8) N0))
         (Eq false
             (Slt (Mul w32 8 8) N0))
         (Eq false
             (Eq (Mul w32 9 9) N0))
         (Eq false
             (Slt (Mul w32 9 9) N0))
         (Eq false
             (Eq (Mul w32 10 10) N0))
         (Eq false
             (Slt (Mul w32 10 10) N0))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var n int -1
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 n)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var n int 0
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq (Mul w32 0 0) N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv0 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var n int 1
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  N0:(ReadLSB w32 0 n)))
         (Eq false (Sle N0 100))
         (Eq false
             (Eq (Mul w32 0 0) N0))
         (Eq (Mul w32 1 1) N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (=  false (bvsle  (_ bv0 32) ?B1 ) ) (=  false (bvsle  ?B1 (_ bv100 32) ) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  (_ bv1 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var n int 4
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  N0:(ReadLSB w32 0 n)))
         (Eq false (Sle N0 100))
         (Eq false
             (Eq (Mul w32 0 0) N0))
         (Eq false
             (Slt (Mul w32 0 0) N0))
         (Eq false
             (Eq (Mul w32 1 1) N0))
         (Eq false
             (Slt (Mul w32 1 1) N0))
         (Eq false
             (Eq (Mul w32 2 2) N0))
         (Eq false
             (Slt (Mul w32 2 2) N0))
         (Eq (Mul w32 3 3) N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (=  false (bvsle  (_ bv0 32) ?B1 ) ) (=  false (bvsle  ?B1 (_ bv100 32) ) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (bvslt  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (bvslt  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  (_ bv9 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var n int 100
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  N0:(ReadLSB w32 0 n)))
         (Eq false (Sle N0 100))
         (Eq false
             (Eq (Mul w32 0 0) N0))
         (Eq false
             (Slt (Mul w32 0 0) N0))
         (Eq false
             (Eq (Mul w32 1 1) N0))
         (Eq false
             (Slt (Mul w32 1 1) N0))
         (Eq false
             (Eq (Mul w32 2 2) N0))
         (Eq false
             (Slt (Mul w32 2 2) N0))
         (Eq false
             (Eq (Mul w32 3 3) N0))
         (Eq false
             (Slt (Mul w32 3 3) N0))
         (Eq false
             (Eq (Mul w32 4 4) N0))
         (Eq false
             (Slt (Mul w32 4 4) N0))
         (Eq false
             (Eq (Mul w32 5 5) N0))
         (Eq false
             (Slt (Mul w32 5 5) N0))
         (Eq false
             (Eq (Mul w32 6 6) N0))
         (Eq false
             (Slt (Mul w32 6 6) N0))
         (Eq false
             (Eq (Mul w32 7 7) N0))
         (Eq false
             (Slt (Mul w32 7 7) N0))
         (Eq false
             (Eq (Mul w32 8 8) N0))
         (Eq false
             (Slt (Mul w32 8 8) N0))
         (Eq false
             (Eq (Mul w32 9 9) N0))
         (Eq false
             (Slt (Mul w32 9 9) N0))
         (Eq (Mul w32 10 10) N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  false (bvsle  (_ bv0 32) ?B1 ) ) (=  false (bvsle  ?B1 (_ bv100 32) ) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (bvslt  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (bvslt  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (bvslt  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (bvslt  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (bvslt  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv25 32) ?B1 ) ) ) (=  false (bvslt  (_ bv25 32) ?B1 ) ) ) (=  false (=  (_ bv36 32) ?B1 ) ) ) (=  false (bvslt  (_ bv36 32) ?B1 ) ) ) (=  false (=  (_ bv49 32) ?B1 ) ) ) (=  false (bvslt  (_ bv49 32) ?B1 ) ) ) (=  false (=  (_ bv64 32) ?B1 ) ) ) (=  false (bvslt  (_ bv64 32) ?B1 ) ) ) (=  false (=  (_ bv81 32) ?B1 ) ) ) (=  false (bvslt  (_ bv81 32) ?B1 ) ) ) (=  (_ bv100 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var n int 37
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  N0:(ReadLSB w32 0 n)))
         (Eq false (Sle N0 100))
         (Eq false
             (Eq (Mul w32 0 0) N0))
         (Eq false
             (Slt (Mul w32 0 0) N0))
         (Eq false
             (Eq (Mul w32 1 1) N0))
         (Eq false
             (Slt (Mul w32 1 1) N0))
         (Eq false
             (Eq (Mul w32 2 2) N0))
         (Eq false
             (Slt (Mul w32 2 2) N0))
         (Eq false
             (Eq (Mul w32 3 3) N0))
         (Eq false
             (Slt (Mul w32 3 3) N0))
         (Eq false
             (Eq (Mul w32 4 4) N0))
         (Eq false
             (Slt (Mul w32 4 4) N0))
         (Eq false
             (Eq (Mul w32 5 5) N0))
         (Eq false
             (Slt (Mul w32 5 5) N0))
         (Eq false
             (Eq (Mul w32 6 6) N0))
         (Eq (Slt (Mul w32 6 6) N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  false (bvsle  (_ bv0 32) ?B1 ) ) (=  false (bvsle  ?B1 (_ bv100 32) ) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (bvslt  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (bvslt  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (bvslt  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (bvslt  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (bvslt  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv25 32) ?B1 ) ) ) (=  false (bvslt  (_ bv25 32) ?B1 ) ) ) (=  false (=  (_ bv36 32) ?B1 ) ) ) (bvslt  (_ bv36 32) ?B1 ) ) ) )
(check-sat)
(exit)


--- Program 90 ---
critical path is "test000101.kquery", content is "array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  N0:(ReadLSB w32 0 n)))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var n int -1
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  N0:(ReadLSB w32 0 n)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var n int 0
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 25 N0))
         (Eq false (Eq 27 N0))
         (Eq false (Eq 32 N0))
         (Eq false (Eq 36 N0))
         (Eq false (Eq 49 N0))
         (Eq false (Eq 64 N0))
         (Eq false (Eq 81 N0))
         (Eq false (Eq 100 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv25 32) ?B1 ) ) ) (=  false (=  (_ bv27 32) ?B1 ) ) ) (=  false (=  (_ bv32 32) ?B1 ) ) ) (=  false (=  (_ bv36 32) ?B1 ) ) ) (=  false (=  (_ bv49 32) ?B1 ) ) ) (=  false (=  (_ bv64 32) ?B1 ) ) ) (=  false (=  (_ bv81 32) ?B1 ) ) ) (=  false (=  (_ bv100 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var n int 1
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq 0 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv0 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var n int 4
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq 1 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv1 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var n int 8
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq 4 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv4 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var n int 9
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq 8 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv8 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000007
[Parsed from .ktest]
var n int 16
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq 9 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv9 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000008
[Parsed from .ktest]
var n int 25
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq 16 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv16 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000009
[Parsed from .ktest]
var n int 27
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq 25 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv25 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000010
[Parsed from .ktest]
var n int 32
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq 27 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv27 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000011
[Parsed from .ktest]
var n int 36
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq 32 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv32 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000012
[Parsed from .ktest]
var n int 49
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq 36 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv36 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000013
[Parsed from .ktest]
var n int 64
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq 49 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv49 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000014
[Parsed from .ktest]
var n int 81
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq 64 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv64 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000015
[Parsed from .ktest]
var n int 100
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq 81 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv81 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000016
[Parsed from .ktest]
var n int 84
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 25 N0))
         (Eq false (Eq 27 N0))
         (Eq false (Eq 32 N0))
         (Eq false (Eq 36 N0))
         (Eq false (Eq 49 N0))
         (Eq false (Eq 64 N0))
         (Eq false (Eq 81 N0))
         (Eq false (Eq 100 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv25 32) ?B1 ) ) ) (=  false (=  (_ bv27 32) ?B1 ) ) ) (=  false (=  (_ bv32 32) ?B1 ) ) ) (=  false (=  (_ bv36 32) ?B1 ) ) ) (=  false (=  (_ bv49 32) ?B1 ) ) ) (=  false (=  (_ bv64 32) ?B1 ) ) ) (=  false (=  (_ bv81 32) ?B1 ) ) ) (=  false (=  (_ bv100 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


--- Program 91 ---
critical path is "test000003.kquery", content is "array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Slt 0 (SDiv w32 N0 5))
         (Slt 0 (SDiv w32 N0 25))
         (Eq false
             (Slt 0 (SDiv w32 N0 125)))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var n int -1
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 n)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var n int 0
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false
             (Slt 0 (SDiv w32 N0 5)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv5 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var n int 25
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Slt 0 (SDiv w32 N0 5))
         (Slt 0 (SDiv w32 N0 25))
         (Eq false
             (Slt 0 (SDiv w32 N0 125)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv25 32) ) ) ) (=  false (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv125 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var n int 125
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Slt 0 (SDiv w32 N0 5))
         (Slt 0 (SDiv w32 N0 25))
         (Slt 0 (SDiv w32 N0 125))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv25 32) ) ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv125 32) ) ) ) ) )
(check-sat)
(exit)


--- Program 92 ---
critical path is "test000012.kquery", content is "array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 start))
         (Sle N0 100)
         (Sle 1
              N1:(ReadLSB w32 0 cycles))
         (Sle N1 10)
         (Eq false
             (Eq 0 N0))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var cycles int 0
var start int 0
[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 1
                  (ReadLSB w32 0 cycles)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv1 32) (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var cycles int 1
var start int 0
[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 cycles))
         (Eq 0
             (ReadLSB w32 0 start))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (=  (_ bv0 32) (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var cycles int 1
var start int 1
[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 cycles))
         (Slt 0
              N1:(ReadLSB w32 0 start))
         (Sle N1 100)
         (Eq 0 N2:(Add w32 N1 4294967295))
         (Eq false
             (Slt 0 N2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvadd  ?B2 (_ bv4294967295 32) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvslt  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (=  (_ bv0 32) ?B3 ) ) (=  false (bvslt  (_ bv0 32) ?B3 ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var cycles int 1
var start int 2
[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 cycles))
         (Slt 0
              N1:(ReadLSB w32 0 start))
         (Sle N1 100)
         (Eq false
             (Eq 0 (Add w32 N1 4294967295)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967294)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvslt  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967295 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967294 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var cycles int 1
var start int 4
[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 cycles))
         (Slt 0
              N1:(ReadLSB w32 0 start))
         (Sle N1 100)
         (Eq false
             (Eq 0 (Add w32 N1 4294967295)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967294)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967293)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvslt  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967295 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967294 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967293 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var cycles int 1
var start int 8
[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 cycles))
         (Slt 0
              N1:(ReadLSB w32 0 start))
         (Sle N1 100)
         (Eq false
             (Eq 0 (Add w32 N1 4294967295)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967294)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967293)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967292)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvslt  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967295 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967294 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967293 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967292 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000007
[Parsed from .ktest]
var cycles int 1
var start int 16
[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 cycles))
         (Slt 0
              N1:(ReadLSB w32 0 start))
         (Sle N1 100)
         (Eq false
             (Eq 0 (Add w32 N1 4294967295)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967294)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967293)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967292)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967291)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvslt  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967295 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967294 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967293 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967292 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967291 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000008
[Parsed from .ktest]
var cycles int 1
var start int 32
[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 cycles))
         (Slt 0
              N1:(ReadLSB w32 0 start))
         (Sle N1 100)
         (Eq false
             (Eq 0 (Add w32 N1 4294967295)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967294)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967293)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967292)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967291)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967290)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvslt  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967295 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967294 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967293 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967292 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967291 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967290 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000009
[Parsed from .ktest]
var cycles int 1
var start int 64
[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 cycles))
         (Slt 0
              N1:(ReadLSB w32 0 start))
         (Sle N1 100)
         (Eq false
             (Eq 0 (Add w32 N1 4294967295)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967294)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967293)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967292)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967291)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967290)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967289)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvslt  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967295 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967294 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967293 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967292 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967291 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967290 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967289 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000010
[Parsed from .ktest]
var cycles int 2
var start int 64
[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 cycles))
         (Slt 0
              N1:(ReadLSB w32 0 start))
         (Sle N1 100)
         (Eq false
             (Eq 0 (Add w32 N1 4294967295)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967294)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967293)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967292)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967291)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967290)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967289)))
         (Eq false
             (Sle N0 2))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvslt  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967295 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967294 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967293 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967292 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967291 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967290 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967289 32) ) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) ) )
(check-sat)
(exit)


Test case: test000011
[Parsed from .ktest]
var cycles int 3
var start int 64
[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 cycles))
         (Slt 0
              N1:(ReadLSB w32 0 start))
         (Sle N1 100)
         (Eq false
             (Eq 0 (Add w32 N1 4294967295)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967294)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967293)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967292)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967291)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967290)))
         (Eq false
             (Eq 0 (Add w32 N1 4294967289)))
         (Eq 3 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvslt  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967295 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967294 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967293 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967292 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967291 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967290 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvadd  ?B2 (_ bv4294967289 32) ) ) ) ) (=  (_ bv3 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000012
[Parsed from .ktest]
var cycles int 0
var start int 64
[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 start))
         (Sle N0 100)
         (Eq false
             (Eq 0 (ReadLSB w32 0 cycles)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvslt  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


--- Program 93 ---
critical path is "test000102.kquery", content is "array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Slt N1 N4:(Sub w32 N3 N1))
         (Slt N1 N5:(Sub w32 N4 N1))
         (Slt N1 N6:(Sub w32 N5 N1))
         (Slt N1 N7:(Sub w32 N6 N1))
         (Slt N1 N8:(Sub w32 N7 N1))
         (Slt N1 N9:(Sub w32 N8 N1))
         (Slt N1 N10:(Sub w32 N9 N1))
         (Slt N1 N11:(Sub w32 N10 N1))
         (Slt N1 N12:(Sub w32 N11 N1))
         (Slt N1 N13:(Sub w32 N12 N1))
         (Slt N1 N14:(Sub w32 N13 N1))
         (Slt N1 N15:(Sub w32 N14 N1))
         (Slt N1 N16:(Sub w32 N15 N1))
         (Slt N1 N17:(Sub w32 N16 N1))
         (Slt N1 N18:(Sub w32 N17 N1))
         (Eq false (Slt N1 (Sub w32 N18 N1)))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var dividend int -1
var divisor int 0
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 dividend)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var dividend int 0
var divisor int 0
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Eq false
             (Sle 0
                  (ReadLSB w32 0 divisor)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv1000 32) ) ) (=  false (bvsle  (_ bv0 32) (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var dividend int 0
var divisor int 1
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Eq false (Slt N1 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (bvslt  ?B1 ?B2 ) ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var dividend int 2
var divisor int 2
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Eq false
             (Slt N1
                  (Sub w32 N0 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (=  false (bvslt  ?B1 (bvsub  ?B2 ?B1 ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var dividend int 3
var divisor int 2
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N2 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (=  false (bvslt  ?B1 (bvsub  ?B3 ?B1 ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var dividend int 4
var divisor int 2
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N3 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (bvslt  ?B1 ?B4 ) ) (=  false (bvslt  ?B1 (bvsub  ?B4 ?B1 ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000007
[Parsed from .ktest]
var dividend int 22
var divisor int 7
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Slt N1 N4:(Sub w32 N3 N1))
         (Slt N1 N5:(Sub w32 N4 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N5 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B1 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B1 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (bvslt  ?B1 ?B4 ) ) (bvslt  ?B1 ?B5 ) ) (=  false (bvslt  ?B1 (bvsub  ?B6 ?B1 ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000008
[Parsed from .ktest]
var dividend int 27
var divisor int 9
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Slt N1 N4:(Sub w32 N3 N1))
         (Slt N1 N5:(Sub w32 N4 N1))
         (Slt N1 N6:(Sub w32 N5 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N6 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B1 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B1 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B1 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (bvslt  ?B1 ?B4 ) ) (bvslt  ?B1 ?B5 ) ) (bvslt  ?B1 ?B6 ) ) (=  false (bvslt  ?B1 (bvsub  ?B7 ?B1 ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000009
[Parsed from .ktest]
var dividend int 35
var divisor int 3
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N2 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (=  false (bvslt  ?B1 (bvsub  ?B3 ?B1 ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000010
[Parsed from .ktest]
var dividend int 64
var divisor int 2
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Slt N1 N4:(Sub w32 N3 N1))
         (Slt N1 N5:(Sub w32 N4 N1))
         (Slt N1 N6:(Sub w32 N5 N1))
         (Slt N1 N7:(Sub w32 N6 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N7 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B1 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B1 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B1 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B1 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (bvslt  ?B1 ?B4 ) ) (bvslt  ?B1 ?B5 ) ) (bvslt  ?B1 ?B6 ) ) (bvslt  ?B1 ?B7 ) ) (=  false (bvslt  ?B1 (bvsub  ?B8 ?B1 ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000011
[Parsed from .ktest]
var dividend int 86
var divisor int 8
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Slt N1 N4:(Sub w32 N3 N1))
         (Slt N1 N5:(Sub w32 N4 N1))
         (Slt N1 N6:(Sub w32 N5 N1))
         (Slt N1 N7:(Sub w32 N6 N1))
         (Slt N1 N8:(Sub w32 N7 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N8 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B1 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B1 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B1 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B1 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B1 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (bvslt  ?B1 ?B4 ) ) (bvslt  ?B1 ?B5 ) ) (bvslt  ?B1 ?B6 ) ) (bvslt  ?B1 ?B7 ) ) (bvslt  ?B1 ?B8 ) ) (=  false (bvslt  ?B1 (bvsub  ?B9 ?B1 ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000012
[Parsed from .ktest]
var dividend int 103
var divisor int 4
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Slt N1 N4:(Sub w32 N3 N1))
         (Slt N1 N5:(Sub w32 N4 N1))
         (Slt N1 N6:(Sub w32 N5 N1))
         (Slt N1 N7:(Sub w32 N6 N1))
         (Slt N1 N8:(Sub w32 N7 N1))
         (Slt N1 N9:(Sub w32 N8 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N9 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B1 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B1 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B1 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B1 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B1 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B1 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (bvslt  ?B1 ?B4 ) ) (bvslt  ?B1 ?B5 ) ) (bvslt  ?B1 ?B6 ) ) (bvslt  ?B1 ?B7 ) ) (bvslt  ?B1 ?B8 ) ) (bvslt  ?B1 ?B9 ) ) (=  false (bvslt  ?B1 (bvsub  ?B10 ?B1 ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000013
[Parsed from .ktest]
var dividend int 121
var divisor int 11
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Slt N1 N4:(Sub w32 N3 N1))
         (Slt N1 N5:(Sub w32 N4 N1))
         (Slt N1 N6:(Sub w32 N5 N1))
         (Slt N1 N7:(Sub w32 N6 N1))
         (Slt N1 N8:(Sub w32 N7 N1))
         (Slt N1 N9:(Sub w32 N8 N1))
         (Slt N1 N10:(Sub w32 N9 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N10 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B1 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B1 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B1 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B1 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B1 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B1 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B1 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (bvslt  ?B1 ?B4 ) ) (bvslt  ?B1 ?B5 ) ) (bvslt  ?B1 ?B6 ) ) (bvslt  ?B1 ?B7 ) ) (bvslt  ?B1 ?B8 ) ) (bvslt  ?B1 ?B9 ) ) (bvslt  ?B1 ?B10 ) ) (=  false (bvslt  ?B1 (bvsub  ?B11 ?B1 ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000014
[Parsed from .ktest]
var dividend int 144
var divisor int 12
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Slt N1 N4:(Sub w32 N3 N1))
         (Slt N1 N5:(Sub w32 N4 N1))
         (Slt N1 N6:(Sub w32 N5 N1))
         (Slt N1 N7:(Sub w32 N6 N1))
         (Slt N1 N8:(Sub w32 N7 N1))
         (Slt N1 N9:(Sub w32 N8 N1))
         (Slt N1 N10:(Sub w32 N9 N1))
         (Slt N1 N11:(Sub w32 N10 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N11 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B1 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B1 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B1 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B1 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B1 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B1 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B1 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B1 ) ) ) (let ( (?B12 (bvsub  ?B11 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (bvslt  ?B1 ?B4 ) ) (bvslt  ?B1 ?B5 ) ) (bvslt  ?B1 ?B6 ) ) (bvslt  ?B1 ?B7 ) ) (bvslt  ?B1 ?B8 ) ) (bvslt  ?B1 ?B9 ) ) (bvslt  ?B1 ?B10 ) ) (bvslt  ?B1 ?B11 ) ) (=  false (bvslt  ?B1 (bvsub  ?B12 ?B1 ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000015
[Parsed from .ktest]
var dividend int 162
var divisor int 27
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Slt N1 N4:(Sub w32 N3 N1))
         (Slt N1 N5:(Sub w32 N4 N1))
         (Slt N1 N6:(Sub w32 N5 N1))
         (Slt N1 N7:(Sub w32 N6 N1))
         (Slt N1 N8:(Sub w32 N7 N1))
         (Slt N1 N9:(Sub w32 N8 N1))
         (Slt N1 N10:(Sub w32 N9 N1))
         (Slt N1 N11:(Sub w32 N10 N1))
         (Slt N1 N12:(Sub w32 N11 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N12 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B1 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B1 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B1 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B1 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B1 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B1 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B1 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B1 ) ) ) (let ( (?B12 (bvsub  ?B11 ?B1 ) ) ) (let ( (?B13 (bvsub  ?B12 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (bvslt  ?B1 ?B4 ) ) (bvslt  ?B1 ?B5 ) ) (bvslt  ?B1 ?B6 ) ) (bvslt  ?B1 ?B7 ) ) (bvslt  ?B1 ?B8 ) ) (bvslt  ?B1 ?B9 ) ) (bvslt  ?B1 ?B10 ) ) (bvslt  ?B1 ?B11 ) ) (bvslt  ?B1 ?B12 ) ) (=  false (bvslt  ?B1 (bvsub  ?B13 ?B1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000016
[Parsed from .ktest]
var dividend int 220
var divisor int 55
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Slt N1 N4:(Sub w32 N3 N1))
         (Slt N1 N5:(Sub w32 N4 N1))
         (Slt N1 N6:(Sub w32 N5 N1))
         (Slt N1 N7:(Sub w32 N6 N1))
         (Slt N1 N8:(Sub w32 N7 N1))
         (Slt N1 N9:(Sub w32 N8 N1))
         (Slt N1 N10:(Sub w32 N9 N1))
         (Slt N1 N11:(Sub w32 N10 N1))
         (Slt N1 N12:(Sub w32 N11 N1))
         (Slt N1 N13:(Sub w32 N12 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N13 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B1 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B1 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B1 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B1 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B1 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B1 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B1 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B1 ) ) ) (let ( (?B12 (bvsub  ?B11 ?B1 ) ) ) (let ( (?B13 (bvsub  ?B12 ?B1 ) ) ) (let ( (?B14 (bvsub  ?B13 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (bvslt  ?B1 ?B4 ) ) (bvslt  ?B1 ?B5 ) ) (bvslt  ?B1 ?B6 ) ) (bvslt  ?B1 ?B7 ) ) (bvslt  ?B1 ?B8 ) ) (bvslt  ?B1 ?B9 ) ) (bvslt  ?B1 ?B10 ) ) (bvslt  ?B1 ?B11 ) ) (bvslt  ?B1 ?B12 ) ) (bvslt  ?B1 ?B13 ) ) (=  false (bvslt  ?B1 (bvsub  ?B14 ?B1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000017
[Parsed from .ktest]
var dividend int 256
var divisor int 2
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Slt N1 N4:(Sub w32 N3 N1))
         (Slt N1 N5:(Sub w32 N4 N1))
         (Slt N1 N6:(Sub w32 N5 N1))
         (Slt N1 N7:(Sub w32 N6 N1))
         (Slt N1 N8:(Sub w32 N7 N1))
         (Slt N1 N9:(Sub w32 N8 N1))
         (Slt N1 N10:(Sub w32 N9 N1))
         (Slt N1 N11:(Sub w32 N10 N1))
         (Slt N1 N12:(Sub w32 N11 N1))
         (Slt N1 N13:(Sub w32 N12 N1))
         (Slt N1 N14:(Sub w32 N13 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N14 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B1 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B1 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B1 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B1 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B1 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B1 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B1 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B1 ) ) ) (let ( (?B12 (bvsub  ?B11 ?B1 ) ) ) (let ( (?B13 (bvsub  ?B12 ?B1 ) ) ) (let ( (?B14 (bvsub  ?B13 ?B1 ) ) ) (let ( (?B15 (bvsub  ?B14 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (bvslt  ?B1 ?B4 ) ) (bvslt  ?B1 ?B5 ) ) (bvslt  ?B1 ?B6 ) ) (bvslt  ?B1 ?B7 ) ) (bvslt  ?B1 ?B8 ) ) (bvslt  ?B1 ?B9 ) ) (bvslt  ?B1 ?B10 ) ) (bvslt  ?B1 ?B11 ) ) (bvslt  ?B1 ?B12 ) ) (bvslt  ?B1 ?B13 ) ) (bvslt  ?B1 ?B14 ) ) (=  false (bvslt  ?B1 (bvsub  ?B15 ?B1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000018
[Parsed from .ktest]
var dividend int 561
var divisor int 69
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Slt N1 N4:(Sub w32 N3 N1))
         (Slt N1 N5:(Sub w32 N4 N1))
         (Slt N1 N6:(Sub w32 N5 N1))
         (Slt N1 N7:(Sub w32 N6 N1))
         (Slt N1 N8:(Sub w32 N7 N1))
         (Slt N1 N9:(Sub w32 N8 N1))
         (Slt N1 N10:(Sub w32 N9 N1))
         (Slt N1 N11:(Sub w32 N10 N1))
         (Slt N1 N12:(Sub w32 N11 N1))
         (Slt N1 N13:(Sub w32 N12 N1))
         (Slt N1 N14:(Sub w32 N13 N1))
         (Slt N1 N15:(Sub w32 N14 N1))
         (Slt N1 N16:(Sub w32 N15 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N16 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B1 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B1 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B1 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B1 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B1 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B1 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B1 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B1 ) ) ) (let ( (?B12 (bvsub  ?B11 ?B1 ) ) ) (let ( (?B13 (bvsub  ?B12 ?B1 ) ) ) (let ( (?B14 (bvsub  ?B13 ?B1 ) ) ) (let ( (?B15 (bvsub  ?B14 ?B1 ) ) ) (let ( (?B16 (bvsub  ?B15 ?B1 ) ) ) (let ( (?B17 (bvsub  ?B16 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (bvslt  ?B1 ?B4 ) ) (bvslt  ?B1 ?B5 ) ) (bvslt  ?B1 ?B6 ) ) (bvslt  ?B1 ?B7 ) ) (bvslt  ?B1 ?B8 ) ) (bvslt  ?B1 ?B9 ) ) (bvslt  ?B1 ?B10 ) ) (bvslt  ?B1 ?B11 ) ) (bvslt  ?B1 ?B12 ) ) (bvslt  ?B1 ?B13 ) ) (bvslt  ?B1 ?B14 ) ) (bvslt  ?B1 ?B15 ) ) (bvslt  ?B1 ?B16 ) ) (=  false (bvslt  ?B1 (bvsub  ?B17 ?B1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000019
[Parsed from .ktest]
var dividend int 671
var divisor int 95
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Slt N1 N4:(Sub w32 N3 N1))
         (Slt N1 N5:(Sub w32 N4 N1))
         (Slt N1 N6:(Sub w32 N5 N1))
         (Slt N1 N7:(Sub w32 N6 N1))
         (Slt N1 N8:(Sub w32 N7 N1))
         (Slt N1 N9:(Sub w32 N8 N1))
         (Slt N1 N10:(Sub w32 N9 N1))
         (Slt N1 N11:(Sub w32 N10 N1))
         (Slt N1 N12:(Sub w32 N11 N1))
         (Slt N1 N13:(Sub w32 N12 N1))
         (Slt N1 N14:(Sub w32 N13 N1))
         (Slt N1 N15:(Sub w32 N14 N1))
         (Slt N1 N16:(Sub w32 N15 N1))
         (Slt N1 N17:(Sub w32 N16 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N17 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B1 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B1 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B1 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B1 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B1 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B1 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B1 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B1 ) ) ) (let ( (?B12 (bvsub  ?B11 ?B1 ) ) ) (let ( (?B13 (bvsub  ?B12 ?B1 ) ) ) (let ( (?B14 (bvsub  ?B13 ?B1 ) ) ) (let ( (?B15 (bvsub  ?B14 ?B1 ) ) ) (let ( (?B16 (bvsub  ?B15 ?B1 ) ) ) (let ( (?B17 (bvsub  ?B16 ?B1 ) ) ) (let ( (?B18 (bvsub  ?B17 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (bvslt  ?B1 ?B4 ) ) (bvslt  ?B1 ?B5 ) ) (bvslt  ?B1 ?B6 ) ) (bvslt  ?B1 ?B7 ) ) (bvslt  ?B1 ?B8 ) ) (bvslt  ?B1 ?B9 ) ) (bvslt  ?B1 ?B10 ) ) (bvslt  ?B1 ?B11 ) ) (bvslt  ?B1 ?B12 ) ) (bvslt  ?B1 ?B13 ) ) (bvslt  ?B1 ?B14 ) ) (bvslt  ?B1 ?B15 ) ) (bvslt  ?B1 ?B16 ) ) (bvslt  ?B1 ?B17 ) ) (=  false (bvslt  ?B1 (bvsub  ?B18 ?B1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000020
[Parsed from .ktest]
var dividend int 720
var divisor int 16
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Slt N1 N4:(Sub w32 N3 N1))
         (Slt N1 N5:(Sub w32 N4 N1))
         (Slt N1 N6:(Sub w32 N5 N1))
         (Slt N1 N7:(Sub w32 N6 N1))
         (Slt N1 N8:(Sub w32 N7 N1))
         (Slt N1 N9:(Sub w32 N8 N1))
         (Slt N1 N10:(Sub w32 N9 N1))
         (Slt N1 N11:(Sub w32 N10 N1))
         (Slt N1 N12:(Sub w32 N11 N1))
         (Slt N1 N13:(Sub w32 N12 N1))
         (Slt N1 N14:(Sub w32 N13 N1))
         (Slt N1 N15:(Sub w32 N14 N1))
         (Slt N1 N16:(Sub w32 N15 N1))
         (Eq false
             (Slt N1
                  (Sub w32 N16 N1)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B1 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B1 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B1 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B1 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B1 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B1 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B1 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B1 ) ) ) (let ( (?B12 (bvsub  ?B11 ?B1 ) ) ) (let ( (?B13 (bvsub  ?B12 ?B1 ) ) ) (let ( (?B14 (bvsub  ?B13 ?B1 ) ) ) (let ( (?B15 (bvsub  ?B14 ?B1 ) ) ) (let ( (?B16 (bvsub  ?B15 ?B1 ) ) ) (let ( (?B17 (bvsub  ?B16 ?B1 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv1000 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 ?B2 ) ) (bvslt  ?B1 ?B3 ) ) (bvslt  ?B1 ?B4 ) ) (bvslt  ?B1 ?B5 ) ) (bvslt  ?B1 ?B6 ) ) (bvslt  ?B1 ?B7 ) ) (bvslt  ?B1 ?B8 ) ) (bvslt  ?B1 ?B9 ) ) (bvslt  ?B1 ?B10 ) ) (bvslt  ?B1 ?B11 ) ) (bvslt  ?B1 ?B12 ) ) (bvslt  ?B1 ?B13 ) ) (bvslt  ?B1 ?B14 ) ) (bvslt  ?B1 ?B15 ) ) (bvslt  ?B1 ?B16 ) ) (=  false (bvslt  ?B1 (bvsub  ?B17 ?B1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000021
[Parsed from .ktest]
var dividend int 864
var divisor int 72
[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 dividend))
         (Sle N0 1000)
         (Sle 0
              N1:(ReadLSB w32 0 divisor))
         (Sle N1 100)
         (Slt N1 N0)
         (Slt N1 N2:(Sub w32 N0 N1))
         (Slt N1 N3:(Sub w32 N2 N1))
         (Slt N1 N4

--- Program 94 ---
critical path is "test000021.kquery", content is "array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Slt 14 N0)
         (Slt 15 N0)
         (Slt 16 N0)
         (Slt 17 N0)
         (Slt 18 N0)
         (Slt 19 N0)
         (Eq false (Slt 20 N0))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var n int -1
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 n)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var n int 0
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Slt 0 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvslt  (_ bv0 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var n int 1
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Eq false (Slt 1 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  false (bvslt  (_ bv1 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var n int 2
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Eq false (Slt 2 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (=  false (bvslt  (_ bv2 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var n int 3
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Eq false (Slt 3 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (=  false (bvslt  (_ bv3 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var n int 4
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Eq false (Slt 4 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (=  false (bvslt  (_ bv4 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000007
[Parsed from .ktest]
var n int 5
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Eq false (Slt 5 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (=  false (bvslt  (_ bv5 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000008
[Parsed from .ktest]
var n int 6
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Eq false (Slt 6 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (=  false (bvslt  (_ bv6 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000009
[Parsed from .ktest]
var n int 7
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Eq false (Slt 7 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (=  false (bvslt  (_ bv7 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000010
[Parsed from .ktest]
var n int 8
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Eq false (Slt 8 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (=  false (bvslt  (_ bv8 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000011
[Parsed from .ktest]
var n int 9
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Eq false (Slt 9 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (=  false (bvslt  (_ bv9 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000012
[Parsed from .ktest]
var n int 10
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Eq false (Slt 10 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (=  false (bvslt  (_ bv10 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000013
[Parsed from .ktest]
var n int 11
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Eq false (Slt 11 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (=  false (bvslt  (_ bv11 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000014
[Parsed from .ktest]
var n int 12
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Eq false (Slt 12 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (=  false (bvslt  (_ bv12 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000015
[Parsed from .ktest]
var n int 13
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Eq false (Slt 13 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (=  false (bvslt  (_ bv13 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000016
[Parsed from .ktest]
var n int 14
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Eq false (Slt 14 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (bvslt  (_ bv13 32) ?B1 ) ) (=  false (bvslt  (_ bv14 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000017
[Parsed from .ktest]
var n int 15
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Slt 14 N0)
         (Eq false (Slt 15 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (bvslt  (_ bv13 32) ?B1 ) ) (bvslt  (_ bv14 32) ?B1 ) ) (=  false (bvslt  (_ bv15 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000018
[Parsed from .ktest]
var n int 16
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Slt 14 N0)
         (Slt 15 N0)
         (Eq false (Slt 16 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (bvslt  (_ bv13 32) ?B1 ) ) (bvslt  (_ bv14 32) ?B1 ) ) (bvslt  (_ bv15 32) ?B1 ) ) (=  false (bvslt  (_ bv16 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000019
[Parsed from .ktest]
var n int 17
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Slt 14 N0)
         (Slt 15 N0)
         (Slt 16 N0)
         (Eq false (Slt 17 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (bvslt  (_ bv13 32) ?B1 ) ) (bvslt  (_ bv14 32) ?B1 ) ) (bvslt  (_ bv15 32) ?B1 ) ) (bvslt  (_ bv16 32) ?B1 ) ) (=  false (bvslt  (_ bv17 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000020
[Parsed from .ktest]
var n int 18
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Slt 14 N0)
         (Slt 15 N0)
         (Slt 16 N0)
         (Slt 17 N0)
         (Eq false (Slt 18 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (bvslt  (_ bv13 32) ?B1 ) ) (bvslt  (_ bv14 32) ?B1 ) ) (bvslt  (_ bv15 32) ?B1 ) ) (bvslt  (_ bv16 32) ?B1 ) ) (bvslt  (_ bv17 32) ?B1 ) ) (=  false (bvslt  (_ bv18 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000021
[Parsed from .ktest]
var n int 19
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Slt 14 N0)
         (Slt 15 N0)
         (Slt 16 N0)
         (Slt 17 N0)
         (Slt 18 N0)
         (Eq false (Slt 19 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (bvslt  (_ bv13 32) ?B1 ) ) (bvslt  (_ bv14 32) ?B1 ) ) (bvslt  (_ bv15 32) ?B1 ) ) (bvslt  (_ bv16 32) ?B1 ) ) (bvslt  (_ bv17 32) ?B1 ) ) (bvslt  (_ bv18 32) ?B1 ) ) (=  false (bvslt  (_ bv19 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000022
[Parsed from .ktest]
var n int 20
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Slt 14 N0)
         (Slt 15 N0)
         (Slt 16 N0)
         (Slt 17 N0)
         (Slt 18 N0)
         (Slt 19 N0)
         (Eq false (Slt 20 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (bvslt  (_ bv13 32) ?B1 ) ) (bvslt  (_ bv14 32) ?B1 ) ) (bvslt  (_ bv15 32) ?B1 ) ) (bvslt  (_ bv16 32) ?B1 ) ) (bvslt  (_ bv17 32) ?B1 ) ) (bvslt  (_ bv18 32) ?B1 ) ) (bvslt  (_ bv19 32) ?B1 ) ) (=  false (bvslt  (_ bv20 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000023
[Parsed from .ktest]
var n int 1073741824
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Eq false (Sle N0 20))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv0 32) ?B1 ) (=  false (bvsle  ?B1 (_ bv20 32) ) ) ) ) )
(check-sat)
(exit)


--- Program 95 ---
critical path is "test000021.kquery", content is "array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Slt 14 N0)
         (Slt 15 N0)
         (Slt 16 N0)
         (Slt 17 N0)
         (Slt 18 N0)
         (Eq false (Slt 19 N0))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var n int -1
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 n)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var n int 0
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Slt 0 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvslt  (_ bv0 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var n int 1
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Eq false (Slt 1 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  false (bvslt  (_ bv1 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var n int 2
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Eq false (Slt 2 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (=  false (bvslt  (_ bv2 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var n int 3
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Eq false (Slt 3 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (=  false (bvslt  (_ bv3 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var n int 4
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Eq false (Slt 4 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (=  false (bvslt  (_ bv4 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000007
[Parsed from .ktest]
var n int 5
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Eq false (Slt 5 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (=  false (bvslt  (_ bv5 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000008
[Parsed from .ktest]
var n int 6
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Eq false (Slt 6 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (=  false (bvslt  (_ bv6 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000009
[Parsed from .ktest]
var n int 7
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Eq false (Slt 7 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (=  false (bvslt  (_ bv7 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000010
[Parsed from .ktest]
var n int 8
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Eq false (Slt 8 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (=  false (bvslt  (_ bv8 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000011
[Parsed from .ktest]
var n int 9
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Eq false (Slt 9 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (=  false (bvslt  (_ bv9 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000012
[Parsed from .ktest]
var n int 10
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Eq false (Slt 10 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (=  false (bvslt  (_ bv10 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000013
[Parsed from .ktest]
var n int 11
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Eq false (Slt 11 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (=  false (bvslt  (_ bv11 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000014
[Parsed from .ktest]
var n int 12
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Eq false (Slt 12 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (=  false (bvslt  (_ bv12 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000015
[Parsed from .ktest]
var n int 13
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Eq false (Slt 13 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (=  false (bvslt  (_ bv13 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000016
[Parsed from .ktest]
var n int 14
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Eq false (Slt 14 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (bvslt  (_ bv13 32) ?B1 ) ) (=  false (bvslt  (_ bv14 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000017
[Parsed from .ktest]
var n int 15
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Slt 14 N0)
         (Eq false (Slt 15 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (bvslt  (_ bv13 32) ?B1 ) ) (bvslt  (_ bv14 32) ?B1 ) ) (=  false (bvslt  (_ bv15 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000018
[Parsed from .ktest]
var n int 16
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Slt 14 N0)
         (Slt 15 N0)
         (Eq false (Slt 16 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (bvslt  (_ bv13 32) ?B1 ) ) (bvslt  (_ bv14 32) ?B1 ) ) (bvslt  (_ bv15 32) ?B1 ) ) (=  false (bvslt  (_ bv16 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000019
[Parsed from .ktest]
var n int 17
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Slt 14 N0)
         (Slt 15 N0)
         (Slt 16 N0)
         (Eq false (Slt 17 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (bvslt  (_ bv13 32) ?B1 ) ) (bvslt  (_ bv14 32) ?B1 ) ) (bvslt  (_ bv15 32) ?B1 ) ) (bvslt  (_ bv16 32) ?B1 ) ) (=  false (bvslt  (_ bv17 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000020
[Parsed from .ktest]
var n int 18
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Slt 14 N0)
         (Slt 15 N0)
         (Slt 16 N0)
         (Slt 17 N0)
         (Eq false (Slt 18 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (bvslt  (_ bv13 32) ?B1 ) ) (bvslt  (_ bv14 32) ?B1 ) ) (bvslt  (_ bv15 32) ?B1 ) ) (bvslt  (_ bv16 32) ?B1 ) ) (bvslt  (_ bv17 32) ?B1 ) ) (=  false (bvslt  (_ bv18 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000021
[Parsed from .ktest]
var n int 19
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Slt 14 N0)
         (Slt 15 N0)
         (Slt 16 N0)
         (Slt 17 N0)
         (Slt 18 N0)
         (Eq false (Slt 19 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (bvslt  (_ bv13 32) ?B1 ) ) (bvslt  (_ bv14 32) ?B1 ) ) (bvslt  (_ bv15 32) ?B1 ) ) (bvslt  (_ bv16 32) ?B1 ) ) (bvslt  (_ bv17 32) ?B1 ) ) (bvslt  (_ bv18 32) ?B1 ) ) (=  false (bvslt  (_ bv19 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000022
[Parsed from .ktest]
var n int 20
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Slt 9 N0)
         (Slt 10 N0)
         (Slt 11 N0)
         (Slt 12 N0)
         (Slt 13 N0)
         (Slt 14 N0)
         (Slt 15 N0)
         (Slt 16 N0)
         (Slt 17 N0)
         (Slt 18 N0)
         (Slt 19 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (bvslt  (_ bv13 32) ?B1 ) ) (bvslt  (_ bv14 32) ?B1 ) ) (bvslt  (_ bv15 32) ?B1 ) ) (bvslt  (_ bv16 32) ?B1 ) ) (bvslt  (_ bv17 32) ?B1 ) ) (bvslt  (_ bv18 32) ?B1 ) ) (bvslt  (_ bv19 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


--- Program 96 ---
critical path is "test000032.kquery", content is "array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false
             (Eq 1 N0))
         (Eq false
             (Eq 2 N0))
         (Eq false
             (Eq 3 N0))
         (Eq false
             (Eq 4 N0))
         (Eq false
             (Eq 5 N0))
         (Eq false
             (Eq 6 N0))
         (Eq false
             (Eq 7 N0))
         (Eq false
             (Eq 8 N0))
         (Eq false
             (Eq 9 N0))
         (Eq false
             (Eq 10 N0))
         (Eq false
             (Eq 11 N0))
         (Eq false
             (Eq 12 N0))
         (Eq false
             (Eq 13 N0))
         (Eq false
             (Eq 14 N0))
         (Eq false
             (Eq 15 N0))
         (Eq false
             (Eq 16 N0))
         (Eq false
             (Eq 17 N0))
         (Eq false
             (Eq 18 N0))
         (Eq false
             (Eq 19 N0))
         (Eq false
             (Eq 20 N0))
         (Eq false
             (Eq 21 N0))
         (Eq false
             (Eq 22 N0))
         (Eq false
             (Eq 23 N0))
         (Eq false
             (Eq 24 N0))
         (Eq false
             (Eq 25 N0))
         (Eq false
             (Eq 26 N0))
         (Eq false
             (Eq 27 N0))
         (Eq false
             (Eq 28 N0))
         (Eq false
             (Eq 29 N0))
         (Eq false
             (Eq 30 N0))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var n int -1
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 n)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var n int 0
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq 0 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  (_ bv0 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var n int 1
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq 1 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  (_ bv1 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var n int 2
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq 2 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  (_ bv2 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var n int 3
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq 3 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  (_ bv3 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var n int 4
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq 4 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  (_ bv4 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000007
[Parsed from .ktest]
var n int 5
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq 5 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  (_ bv5 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000008
[Parsed from .ktest]
var n int 6
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq 6 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  (_ bv6 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000009
[Parsed from .ktest]
var n int 7
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq 7 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  (_ bv7 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000010
[Parsed from .ktest]
var n int 8
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq 8 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  (_ bv8 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000011
[Parsed from .ktest]
var n int 9
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq 9 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  (_ bv9 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000012
[Parsed from .ktest]
var n int 10
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq 10 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  (_ bv10 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000013
[Parsed from .ktest]
var n int 11
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq 11 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  (_ bv11 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000014
[Parsed from .ktest]
var n int 12
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq 12 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  (_ bv12 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000015
[Parsed from .ktest]
var n int 13
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq 13 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  (_ bv13 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000016
[Parsed from .ktest]
var n int 14
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq 14 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  (_ bv14 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000017
[Parsed from .ktest]
var n int 15
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq 15 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  (_ bv15 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000018
[Parsed from .ktest]
var n int 16
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq 16 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  (_ bv16 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000019
[Parsed from .ktest]
var n int 17
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq 17 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  (_ bv17 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000020
[Parsed from .ktest]
var n int 18
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 17 N0))
         (Eq 18 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv17 32) ?B1 ) ) ) (=  (_ bv18 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000021
[Parsed from .ktest]
var n int 19
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 17 N0))
         (Eq false (Eq 18 N0))
         (Eq 19 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv17 32) ?B1 ) ) ) (=  false (=  (_ bv18 32) ?B1 ) ) ) (=  (_ bv19 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000022
[Parsed from .ktest]
var n int 20
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 17 N0))
         (Eq false (Eq 18 N0))
         (Eq false (Eq 19 N0))
         (Eq 20 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv17 32) ?B1 ) ) ) (=  false (=  (_ bv18 32) ?B1 ) ) ) (=  false (=  (_ bv19 32) ?B1 ) ) ) (=  (_ bv20 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000023
[Parsed from .ktest]
var n int 21
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 17 N0))
         (Eq false (Eq 18 N0))
         (Eq false (Eq 19 N0))
         (Eq false (Eq 20 N0))
         (Eq 21 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv17 32) ?B1 ) ) ) (=  false (=  (_ bv18 32) ?B1 ) ) ) (=  false (=  (_ bv19 32) ?B1 ) ) ) (=  false (=  (_ bv20 32) ?B1 ) ) ) (=  (_ bv21 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000024
[Parsed from .ktest]
var n int 22
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 17 N0))
         (Eq false (Eq 18 N0))
         (Eq false (Eq 19 N0))
         (Eq false (Eq 20 N0))
         (Eq false (Eq 21 N0))
         (Eq 22 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv17 32) ?B1 ) ) ) (=  false (=  (_ bv18 32) ?B1 ) ) ) (=  false (=  (_ bv19 32) ?B1 ) ) ) (=  false (=  (_ bv20 32) ?B1 ) ) ) (=  false (=  (_ bv21 32) ?B1 ) ) ) (=  (_ bv22 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000025
[Parsed from .ktest]
var n int 23
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 17 N0))
         (Eq false (Eq 18 N0))
         (Eq false (Eq 19 N0))
         (Eq false (Eq 20 N0))
         (Eq false (Eq 21 N0))
         (Eq false (Eq 22 N0))
         (Eq 23 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv17 32) ?B1 ) ) ) (=  false (=  (_ bv18 32) ?B1 ) ) ) (=  false (=  (_ bv19 32) ?B1 ) ) ) (=  false (=  (_ bv20 32) ?B1 ) ) ) (=  false (=  (_ bv21 32) ?B1 ) ) ) (=  false (=  (_ bv22 32) ?B1 ) ) ) (=  (_ bv23 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000026
[Parsed from .ktest]
var n int 24
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 17 N0))
         (Eq false (Eq 18 N0))
         (Eq false (Eq 19 N0))
         (Eq false (Eq 20 N0))
         (Eq false (Eq 21 N0))
         (Eq false (Eq 22 N0))
         (Eq false (Eq 23 N0))
         (Eq 24 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv17 32) ?B1 ) ) ) (=  false (=  (_ bv18 32) ?B1 ) ) ) (=  false (=  (_ bv19 32) ?B1 ) ) ) (=  false (=  (_ bv20 32) ?B1 ) ) ) (=  false (=  (_ bv21 32) ?B1 ) ) ) (=  false (=  (_ bv22 32) ?B1 ) ) ) (=  false (=  (_ bv23 32) ?B1 ) ) ) (=  (_ bv24 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000027
[Parsed from .ktest]
var n int 25
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 17 N0))
         (Eq false (Eq 18 N0))
         (Eq false (Eq 19 N0))
         (Eq false (Eq 20 N0))
         (Eq false (Eq 21 N0))
         (Eq false (Eq 22 N0))
         (Eq false (Eq 23 N0))
         (Eq false (Eq 24 N0))
         (Eq 25 N0)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_

--- Program 97 ---
critical path is "test000021.kquery", content is "array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)
"

Test case: test000001
[Parsed from .ktest]
var input int 0
var transitions int 0
[.kquery content]
array transitions[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 1 (ReadLSB w32 0 transitions)))]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv1 32) (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var input int 0
var transitions int 1
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var input int 1
var transitions int 2
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var input int 2
var transitions int 2
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var input int 3
var transitions int 2
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var input int -3
var transitions int 2
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000007
[Parsed from .ktest]
var input int 0
var transitions int 3
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000008
[Parsed from .ktest]
var input int 1
var transitions int 4
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000009
[Parsed from .ktest]
var input int 2
var transitions int 4
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000010
[Parsed from .ktest]
var input int 3
var transitions int 4
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000011
[Parsed from .ktest]
var input int -3
var transitions int 4
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000012
[Parsed from .ktest]
var input int 0
var transitions int 5
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000013
[Parsed from .ktest]
var input int 1
var transitions int 8
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000014
[Parsed from .ktest]
var input int 2
var transitions int 8
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000015
[Parsed from .ktest]
var input int 3
var transitions int 8
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000016
[Parsed from .ktest]
var input int -3
var transitions int 8
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000017
[Parsed from .ktest]
var input int 0
var transitions int 9
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000018
[Parsed from .ktest]
var input int 1
var transitions int 16
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000019
[Parsed from .ktest]
var input int 2
var transitions int 16
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000020
[Parsed from .ktest]
var input int 3
var transitions int 16
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000021
[Parsed from .ktest]
var input int -3
var transitions int 16
[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1 N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)]
        true)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


--- Program 98 ---
critical path is "test000011.kquery", content is "array steps[4] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
array step[5] : w32 -> w8 = symbolic
array step[0] : w32 -> w8 = symbolic
array step[6] : w32 -> w8 = symbolic
array step[3] : w32 -> w8 = symbolic
array step[1] : w32 -> w8 = symbolic
array step[7] : w32 -> w8 = symbolic
array step[8] : w32 -> w8 = symbolic
array step[2] : w32 -> w8 = symbolic
array step[9] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle -1
              N1:(ReadLSB w32 0 step[0]))
         (Sle N1 1)
         (Sle -1
              N2:(ReadLSB w32 0 step[1]))
         (Sle N2 1)
         (Sle -1
              N3:(ReadLSB w32 0 step[2]))
         (Sle N3 1)
         (Sle -1
              N4:(ReadLSB w32 0 step[3]))
         (Sle N4 1)
         (Sle -1
              N5:(ReadLSB w32 0 step[4]))
         (Sle N5 1)
         (Sle -1
              N6:(ReadLSB w32 0 step[5]))
         (Sle N6 1)
         (Sle -1
              N7:(ReadLSB w32 0 step[6]))
         (Sle N7 1)
         (Sle -1
              N8:(ReadLSB w32 0 step[7]))
         (Sle N8 1)
         (Sle -1
              N9:(ReadLSB w32 0 step[8]))
         (Sle N9 1)
         (Sle -1
              N10:(ReadLSB w32 0 step[9]))
         (Sle N10 1)]
        false)
"

Test case: test000001
[Parsed from .ktest]
var steps int 0
var step int 0
[.kquery content]
array steps[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 1
                  (ReadLSB w32 0 steps)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv1 32) (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var steps int 1
var step int -2
[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[0] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Eq false
             (Sle -1
                  (ReadLSB w32 0 step[0])))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv10 32) ) ) (=  false (bvsle  (_ bv-1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var steps int 1
var step int 0
[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[0] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle -1
              N1:(ReadLSB w32 0 step[0]))
         (Sle N1 1)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv10 32) ) ) (bvsle  (_ bv-1 32) ?B1 ) ) (bvsle  ?B1 (_ bv1 32) ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var steps int 2
var step int 0
[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[1] : w32 -> w8 = symbolic
array step[0] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle -1
              N1:(ReadLSB w32 0 step[0]))
         (Sle N1 1)
         (Sle -1
              N2:(ReadLSB w32 0 step[1]))
         (Sle N2 1)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B3 ) (bvsle  ?B3 (_ bv10 32) ) ) (bvsle  (_ bv-1 32) ?B2 ) ) (bvsle  ?B2 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B1 ) ) (bvsle  ?B1 (_ bv1 32) ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var steps int 3
var step int 0
[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[1] : w32 -> w8 = symbolic
array step[2] : w32 -> w8 = symbolic
array step[0] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle -1
              N1:(ReadLSB w32 0 step[0]))
         (Sle N1 1)
         (Sle -1
              N2:(ReadLSB w32 0 step[1]))
         (Sle N2 1)
         (Sle -1
              N3:(ReadLSB w32 0 step[2]))
         (Sle N3 1)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B4 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B4 ) (bvsle  ?B4 (_ bv10 32) ) ) (bvsle  (_ bv-1 32) ?B3 ) ) (bvsle  ?B3 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B2 ) ) (bvsle  ?B2 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B1 ) ) (bvsle  ?B1 (_ bv1 32) ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var steps int 4
var step int 0
[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[3] : w32 -> w8 = symbolic
array step[1] : w32 -> w8 = symbolic
array step[2] : w32 -> w8 = symbolic
array step[0] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle -1
              N1:(ReadLSB w32 0 step[0]))
         (Sle N1 1)
         (Sle -1
              N2:(ReadLSB w32 0 step[1]))
         (Sle N2 1)
         (Sle -1
              N3:(ReadLSB w32 0 step[2]))
         (Sle N3 1)
         (Sle -1
              N4:(ReadLSB w32 0 step[3]))
         (Sle N4 1)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B4 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B5 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B5 ) (bvsle  ?B5 (_ bv10 32) ) ) (bvsle  (_ bv-1 32) ?B4 ) ) (bvsle  ?B4 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B3 ) ) (bvsle  ?B3 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B2 ) ) (bvsle  ?B2 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B1 ) ) (bvsle  ?B1 (_ bv1 32) ) ) ) )
(check-sat)
(exit)


Test case: test000007
[Parsed from .ktest]
var steps int 5
var step int 0
[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[3] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
array step[1] : w32 -> w8 = symbolic
array step[2] : w32 -> w8 = symbolic
array step[0] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle -1
              N1:(ReadLSB w32 0 step[0]))
         (Sle N1 1)
         (Sle -1
              N2:(ReadLSB w32 0 step[1]))
         (Sle N2 1)
         (Sle -1
              N3:(ReadLSB w32 0 step[2]))
         (Sle N3 1)
         (Sle -1
              N4:(ReadLSB w32 0 step[3]))
         (Sle N4 1)
         (Sle -1
              N5:(ReadLSB w32 0 step[4]))
         (Sle N5 1)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B4 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B5 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B6 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B6 ) (bvsle  ?B6 (_ bv10 32) ) ) (bvsle  (_ bv-1 32) ?B5 ) ) (bvsle  ?B5 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B4 ) ) (bvsle  ?B4 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B3 ) ) (bvsle  ?B3 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B2 ) ) (bvsle  ?B2 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B1 ) ) (bvsle  ?B1 (_ bv1 32) ) ) ) )
(check-sat)
(exit)


Test case: test000008
[Parsed from .ktest]
var steps int 6
var step int 0
[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[3] : w32 -> w8 = symbolic
array step[5] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
array step[1] : w32 -> w8 = symbolic
array step[2] : w32 -> w8 = symbolic
array step[0] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle -1
              N1:(ReadLSB w32 0 step[0]))
         (Sle N1 1)
         (Sle -1
              N2:(ReadLSB w32 0 step[1]))
         (Sle N2 1)
         (Sle -1
              N3:(ReadLSB w32 0 step[2]))
         (Sle N3 1)
         (Sle -1
              N4:(ReadLSB w32 0 step[3]))
         (Sle N4 1)
         (Sle -1
              N5:(ReadLSB w32 0 step[4]))
         (Sle N5 1)
         (Sle -1
              N6:(ReadLSB w32 0 step[5]))
         (Sle N6 1)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B4 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B5 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B6 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B7 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B7 ) (bvsle  ?B7 (_ bv10 32) ) ) (bvsle  (_ bv-1 32) ?B6 ) ) (bvsle  ?B6 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B5 ) ) (bvsle  ?B5 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B4 ) ) (bvsle  ?B4 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B3 ) ) (bvsle  ?B3 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B2 ) ) (bvsle  ?B2 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B1 ) ) (bvsle  ?B1 (_ bv1 32) ) ) ) )
(check-sat)
(exit)


Test case: test000009
[Parsed from .ktest]
var steps int 7
var step int 0
[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[3] : w32 -> w8 = symbolic
array step[5] : w32 -> w8 = symbolic
array step[6] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
array step[1] : w32 -> w8 = symbolic
array step[2] : w32 -> w8 = symbolic
array step[0] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle -1
              N1:(ReadLSB w32 0 step[0]))
         (Sle N1 1)
         (Sle -1
              N2:(ReadLSB w32 0 step[1]))
         (Sle N2 1)
         (Sle -1
              N3:(ReadLSB w32 0 step[2]))
         (Sle N3 1)
         (Sle -1
              N4:(ReadLSB w32 0 step[3]))
         (Sle N4 1)
         (Sle -1
              N5:(ReadLSB w32 0 step[4]))
         (Sle N5 1)
         (Sle -1
              N6:(ReadLSB w32 0 step[5]))
         (Sle N6 1)
         (Sle -1
              N7:(ReadLSB w32 0 step[6]))
         (Sle N7 1)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B4 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B5 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B6 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B7 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B8 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B8 ) (bvsle  ?B8 (_ bv10 32) ) ) (bvsle  (_ bv-1 32) ?B7 ) ) (bvsle  ?B7 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B6 ) ) (bvsle  ?B6 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B5 ) ) (bvsle  ?B5 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B4 ) ) (bvsle  ?B4 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B3 ) ) (bvsle  ?B3 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B2 ) ) (bvsle  ?B2 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B1 ) ) (bvsle  ?B1 (_ bv1 32) ) ) ) )
(check-sat)
(exit)


Test case: test000010
[Parsed from .ktest]
var steps int 8
var step int 0
[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[3] : w32 -> w8 = symbolic
array step[5] : w32 -> w8 = symbolic
array step[6] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
array step[1] : w32 -> w8 = symbolic
array step[8] : w32 -> w8 = symbolic
array step[2] : w32 -> w8 = symbolic
array step[0] : w32 -> w8 = symbolic
array step[7] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle -1
              N1:(ReadLSB w32 0 step[0]))
         (Sle N1 1)
         (Sle -1
              N2:(ReadLSB w32 0 step[1]))
         (Sle N2 1)
         (Sle -1
              N3:(ReadLSB w32 0 step[2]))
         (Sle N3 1)
         (Sle -1
              N4:(ReadLSB w32 0 step[3]))
         (Sle N4 1)
         (Sle -1
              N5:(ReadLSB w32 0 step[4]))
         (Sle N5 1)
         (Sle -1
              N6:(ReadLSB w32 0 step[5]))
         (Sle N6 1)
         (Sle -1
              N7:(ReadLSB w32 0 step[6]))
         (Sle N7 1)
         (Sle -1
              N8:(ReadLSB w32 0 step[7]))
         (Sle N8 1)
         (Sle -1
              N9:(ReadLSB w32 0 step[8]))
         (Sle N9 1)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B4 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B5 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B6 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B7 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B8 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B9 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B9 ) (bvsle  ?B9 (_ bv10 32) ) ) (bvsle  (_ bv-1 32) ?B8 ) ) (bvsle  ?B8 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B7 ) ) (bvsle  ?B7 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B6 ) ) (bvsle  ?B6 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B5 ) ) (bvsle  ?B5 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B4 ) ) (bvsle  ?B4 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B3 ) ) (bvsle  ?B3 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B2 ) ) (bvsle  ?B2 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B1 ) ) (bvsle  ?B1 (_ bv1 32) ) ) ) )
(check-sat)
(exit)


Test case: test000011
[Parsed from .ktest]
var steps int 9
var step int 0
[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
array step[5] : w32 -> w8 = symbolic
array step[0] : w32 -> w8 = symbolic
array step[6] : w32 -> w8 = symbolic
array step[3] : w32 -> w8 = symbolic
array step[1] : w32 -> w8 = symbolic
array step[7] : w32 -> w8 = symbolic
array step[8] : w32 -> w8 = symbolic
array step[2] : w32 -> w8 = symbolic
array step[9] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle -1
              N1:(ReadLSB w32 0 step[0]))
         (Sle N1 1)
         (Sle -1
              N2:(ReadLSB w32 0 step[1]))
         (Sle N2 1)
         (Sle -1
              N3:(ReadLSB w32 0 step[2]))
         (Sle N3 1)
         (Sle -1
              N4:(ReadLSB w32 0 step[3]))
         (Sle N4 1)
         (Sle -1
              N5:(ReadLSB w32 0 step[4]))
         (Sle N5 1)
         (Sle -1
              N6:(ReadLSB w32 0 step[5]))
         (Sle N6 1)
         (Sle -1
              N7:(ReadLSB w32 0 step[6]))
         (Sle N7 1)
         (Sle -1
              N8:(ReadLSB w32 0 step[7]))
         (Sle N8 1)
         (Sle -1
              N9:(ReadLSB w32 0 step[8]))
         (Sle N9 1)
         (Sle -1
              N10:(ReadLSB w32 0 step[9]))
         (Sle N10 1)]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B4 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B5 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B6 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B7 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B8 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B9 (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) (?B10 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B10 ) (bvsle  ?B10 (_ bv10 32) ) ) (bvsle  (_ bv-1 32) ?B9 ) ) (bvsle  ?B9 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B8 ) ) (bvsle  ?B8 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B7 ) ) (bvsle  ?B7 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B6 ) ) (bvsle  ?B6 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B5 ) ) (bvsle  ?B5 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B4 ) ) (bvsle  ?B4 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B3 ) ) (bvsle  ?B3 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B2 ) ) (bvsle  ?B2 (_ bv1 32) ) ) (bvsle  (_ bv-1 32) ?B1 ) ) (bvsle  ?B1 (_ bv1 32) ) ) ) )
(check-sat)
(exit)


--- Program 99 ---
critical path is "test000021.kquery", content is "array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Eq 1
                 (ReadLSB w32 0 flag)))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 1
              (ReadLSB w32 0 iterations))
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Slt 6
              (ReadLSB w32 0 iterations))
         (Slt 7
              (ReadLSB w32 0 iterations))
         (Slt 8
              (ReadLSB w32 0 iterations))
         (Slt 9
              (ReadLSB w32 0 iterations))
         (Slt 10
              (ReadLSB w32 0 iterations))
         (Slt 11
              (ReadLSB w32 0 iterations))
         (Slt 12
              (ReadLSB w32 0 iterations))
         (Slt 13
              (ReadLSB w32 0 iterations))
         (Slt 14
              (ReadLSB w32 0 iterations))
         (Slt 15
              (ReadLSB w32 0 iterations))
         (Slt 16
              (ReadLSB w32 0 iterations))
         (Slt 17
              (ReadLSB w32 0 iterations))
         (Slt 18
              (ReadLSB w32 0 iterations))
         (Eq false (Slt 19 (ReadLSB w32 0 iterations)))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var flag int -1
var iterations int 0
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Eq 0
                 (ReadLSB w32 0 iterations)))
         (Eq false
             (Sle 1
                  (ReadLSB w32 0 iterations)))
         (Eq false
             (Eq 0
                 (ReadLSB w32 0 flag)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) ) (and  (and  (=  false (=  (_ bv0 32) ?B1 ) ) (=  false (bvsle  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv0 32) ?B2 ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var flag int 0
var iterations int 1
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 0
             (ReadLSB w32 0 flag))
         (Eq 1
             (ReadLSB w32 0 iterations))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  (_ bv1 32) (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) ?B1 ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var flag int 1
var iterations int 1
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 1
             (ReadLSB w32 0 flag))
         (Eq 1
             (ReadLSB w32 0 iterations))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  (_ bv1 32) (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) ?B1 ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var flag int 0
var iterations int 2
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 0
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Eq false
             (Slt 2
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (=  (_ bv0 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvslt  (_ bv2 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var flag int 1
var iterations int 2
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 1
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Eq false
             (Slt 2
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvslt  (_ bv2 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000006
[Parsed from .ktest]
var flag int 0
var iterations int 3
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Eq 1
                 (ReadLSB w32 0 flag)))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 3
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (=  false (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (=  false (bvslt  (_ bv3 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000007
[Parsed from .ktest]
var flag int 1
var iterations int 3
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 1
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 3
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (=  false (bvslt  (_ bv3 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000008
[Parsed from .ktest]
var flag int 0
var iterations int 4
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 0
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 4
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (=  (_ bv0 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (=  false (bvslt  (_ bv4 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000009
[Parsed from .ktest]
var flag int 1
var iterations int 4
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 1
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 4
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (=  false (bvslt  (_ bv4 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000010
[Parsed from .ktest]
var flag int 0
var iterations int 5
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Eq 1
                 (ReadLSB w32 0 flag)))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 5
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (=  false (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (=  false (bvslt  (_ bv5 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000011
[Parsed from .ktest]
var flag int 1
var iterations int 5
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 1
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 5
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (=  false (bvslt  (_ bv5 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000012
[Parsed from .ktest]
var flag int 0
var iterations int 6
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 0
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 6
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (=  (_ bv0 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (=  false (bvslt  (_ bv6 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000013
[Parsed from .ktest]
var flag int 1
var iterations int 6
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 1
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 6
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (=  false (bvslt  (_ bv6 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000014
[Parsed from .ktest]
var flag int 0
var iterations int 7
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Eq 1
                 (ReadLSB w32 0 flag)))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Slt 6
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 7
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  false (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (=  false (bvslt  (_ bv7 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000015
[Parsed from .ktest]
var flag int 1
var iterations int 7
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 1
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Slt 6
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 7
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (=  false (bvslt  (_ bv7 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000016
[Parsed from .ktest]
var flag int 0
var iterations int 8
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 0
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Slt 6
              (ReadLSB w32 0 iterations))
         (Slt 7
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 8
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  (_ bv0 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (=  false (bvslt  (_ bv8 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000017
[Parsed from .ktest]
var flag int 1
var iterations int 8
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 1
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Slt 6
              (ReadLSB w32 0 iterations))
         (Slt 7
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 8
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (=  false (bvslt  (_ bv8 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000018
[Parsed from .ktest]
var flag int 0
var iterations int 9
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Eq 1
                 (ReadLSB w32 0 flag)))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Slt 6
              (ReadLSB w32 0 iterations))
         (Slt 7
              (ReadLSB w32 0 iterations))
         (Slt 8
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 9
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  false (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (=  false (bvslt  (_ bv9 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000019
[Parsed from .ktest]
var flag int 1
var iterations int 9
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 1
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Slt 6
              (ReadLSB w32 0 iterations))
         (Slt 7
              (ReadLSB w32 0 iterations))
         (Slt 8
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 9
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (=  false (bvslt  (_ bv9 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000020
[Parsed from .ktest]
var flag int 0
var iterations int 10
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 0
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Slt 6
              (ReadLSB w32 0 iterations))
         (Slt 7
              (ReadLSB w32 0 iterations))
         (Slt 8
              (ReadLSB w32 0 iterations))
         (Slt 9
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 10
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  (_ bv0 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (=  false (bvslt  (_ bv10 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000021
[Parsed from .ktest]
var flag int 1
var iterations int 10
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Eq 1
                 (ReadLSB w32 0 flag)))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 1
              (ReadLSB w32 0 iterations))
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Slt 6
              (ReadLSB w32 0 iterations))
         (Slt 7
              (ReadLSB w32 0 iterations))
         (Slt 8
              (ReadLSB w32 0 iterations))
         (Slt 9
              (ReadLSB w32 0 iterations))
         (Slt 10
              (ReadLSB w32 0 iterations))
         (Slt 11
              (ReadLSB w32 0 iterations))
         (Slt 12
              (ReadLSB w32 0 iterations))
         (Slt 13
              (ReadLSB w32 0 iterations))
         (Slt 14
              (ReadLSB w32 0 iterations))
         (Slt 15
              (ReadLSB w32 0 iterations))
         (Slt 16
              (ReadLSB w32 0 iterations))
         (Slt 17
              (ReadLSB w32 0 iterations))
         (Slt 18
              (ReadLSB w32 0 iterations))
         (Eq false (Slt 19 (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  false (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv1 32) ?B1 ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (bvslt  (_ bv12 32) ?B1 ) ) (bvslt  (_ bv13 32) ?B1 ) ) (bvslt  (_ bv14 32) ?B1 ) ) (bvslt  (_ bv15 32) ?B1 ) ) (bvslt  (_ bv16 32) ?B1 ) ) (bvslt  (_ bv17 32) ?B1 ) ) (bvslt  (_ bv18 32) ?B1 ) ) (=  false (bvslt  (_ bv19 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000022
[Parsed from .ktest]
var flag int 0
var iterations int 11
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 0
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Slt 6
              (ReadLSB w32 0 iterations))
         (Slt 7
              (ReadLSB w32 0 iterations))
         (Slt 8
              (ReadLSB w32 0 iterations))
         (Slt 9
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 10
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  (_ bv0 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (=  false (bvslt  (_ bv10 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000023
[Parsed from .ktest]
var flag int 1
var iterations int 11
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 1
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Slt 6
              (ReadLSB w32 0 iterations))
         (Slt 7
              (ReadLSB w32 0 iterations))
         (Slt 8
              (ReadLSB w32 0 iterations))
         (Slt 9
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 10
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (=  false (bvslt  (_ bv10 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000024
[Parsed from .ktest]
var flag int 0
var iterations int 12
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 0
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Slt 6
              (ReadLSB w32 0 iterations))
         (Slt 7
              (ReadLSB w32 0 iterations))
         (Slt 8
              (ReadLSB w32 0 iterations))
         (Slt 9
              (ReadLSB w32 0 iterations))
         (Slt 10
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 11
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  (_ bv0 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (=  false (bvslt  (_ bv11 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000025
[Parsed from .ktest]
var flag int 1
var iterations int 12
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 1
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Slt 6
              (ReadLSB w32 0 iterations))
         (Slt 7
              (ReadLSB w32 0 iterations))
         (Slt 8
              (ReadLSB w32 0 iterations))
         (Slt 9
              (ReadLSB w32 0 iterations))
         (Slt 10
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 11
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (=  false (bvslt  (_ bv11 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000026
[Parsed from .ktest]
var flag int 0
var iterations int 13
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 0
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 4
              (ReadLSB w32 0 iterations))
         (Slt 5
              (ReadLSB w32 0 iterations))
         (Slt 6
              (ReadLSB w32 0 iterations))
         (Slt 7
              (ReadLSB w32 0 iterations))
         (Slt 8
              (ReadLSB w32 0 iterations))
         (Slt 9
              (ReadLSB w32 0 iterations))
         (Slt 10
              (ReadLSB w32 0 iterations))
         (Slt 11
              (ReadLSB w32 0 iterations))
         (Eq false
             (Slt 12
                  (ReadLSB w32 0 iterations)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  (_ bv0 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv2 32) ?B1 ) ) (bvslt  (_ bv3 32) ?B1 ) ) (bvslt  (_ bv4 32) ?B1 ) ) (bvslt  (_ bv5 32) ?B1 ) ) (bvslt  (_ bv6 32) ?B1 ) ) (bvslt  (_ bv7 32) ?B1 ) ) (bvslt  (_ bv8 32) ?B1 ) ) (bvslt  (_ bv9 32) ?B1 ) ) (bvslt  (_ bv10 32) ?B1 ) ) (bvslt  (_ bv11 32) ?B1 ) ) (=  false (bvslt  (_ bv12 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000027
[Parsed from .ktest]
var flag int 1
var iterations int 13
[.kquery content]
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq 1
             (ReadLSB w32 0 flag))
         (Eq false
             (Eq 1
                 (ReadLSB w32 0 iterations)))
         (Sle 1
              (ReadLSB w32 0 iterations))
         (Sle (ReadLSB w32 0 iterations)
              20)
         (Slt 2
              (ReadLSB w32 0 iterations))
         (Slt 3
              (ReadLSB w32 0 iterations))
         (Slt 

--- Program 100 ---
critical path is "test000004.kquery", content is "array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 1000)
         (Slt 0 N0)
         (Slt 0 (SDiv w32 N0 10))
         (Eq false
             (Slt 0
                  (SDiv w32 (SDiv w32 N0 10) 10)))]
        false)
"

Test case: test000001
[Parsed from .ktest]
var n int -1
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 n)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000002
[Parsed from .ktest]
var n int 0
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 1000)
         (Eq false (Slt 0 N0))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv1000 32) ) ) (=  false (bvslt  (_ bv0 32) ?B1 ) ) ) ) )
(check-sat)
(exit)


Test case: test000003
[Parsed from .ktest]
var n int 3
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 1000)
         (Slt 0 N0)
         (Eq false
             (Slt 0 (SDiv w32 N0 10)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  false (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv10 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000004
[Parsed from .ktest]
var n int 296
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 1000)
         (Slt 0 N0)
         (Slt 0 (SDiv w32 N0 10))
         (Eq false
             (Slt 0
                  (SDiv w32 (SDiv w32 N0 10) 10)))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv10 32) ) ) ) (=  false (bvslt  (_ bv0 32) (bvsdiv  (bvsdiv  ?B1 (_ bv10 32) ) (_ bv10 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000005
[Parsed from .ktest]
var n int 1000
[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 1000)
         (Slt 0 N0)
         (Slt 0 (SDiv w32 N0 10))
         (Slt 0
              (SDiv w32 (SDiv w32 N0 10) 10))]
        false)

[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv10 32) ) ) ) (bvslt  (_ bv0 32) (bvsdiv  (bvsdiv  ?B1 (_ bv10 32) ) (_ bv10 32) ) ) ) ) )
(check-sat)
(exit)


