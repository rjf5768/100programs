--- Program 81 ---
critical path is: test000007.kquery

[critical path content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq false
             (Eq 0 N2:(SRem w32 N0 N1)))
         (Eq false
             (Eq 0 N3:(SRem w32 N1 N2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N2 N3)))
         (Eq false
             (Eq 0 N5:(SRem w32 N3 N4)))
         (Eq false
             (Eq 0 N6:(SRem w32 N4 N5)))
         (Eq 0 (SRem w32 N5 N6))]
        false)


Test case: test000001
[Parsed from .ktest]
var a int 0
var b int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvslt  (_ bv0 32) (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Slt 0
                  (ReadLSB w32 0 a)))]
        false)


Test case: test000002
[Parsed from .ktest]
var a int 64
var b int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv0 32) ?B1 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv0 32) (bvsrem  ?B2 ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq 0 (SRem w32 N0 N1))]
        false)


Test case: test000003
[Parsed from .ktest]
var a int 32
var b int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsrem  ?B2 ?B1 ) ) ) (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv0 32) ?B1 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B3 ) ) ) (=  (_ bv0 32) (bvsrem  ?B1 ?B3 ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq false
             (Eq 0 N2:(SRem w32 N0 N1)))
         (Eq 0 (SRem w32 N1 N2))]
        false)


Test case: test000004
[Parsed from .ktest]
var a int 64
var b int 96
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsrem  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsrem  ?B1 ?B3 ) ) ) (and  (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv0 32) ?B1 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B3 ) ) ) (=  false (=  (_ bv0 32) ?B4 ) ) ) (=  (_ bv0 32) (bvsrem  ?B3 ?B4 ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq false
             (Eq 0 N2:(SRem w32 N0 N1)))
         (Eq false
             (Eq 0 N3:(SRem w32 N1 N2)))
         (Eq 0 (SRem w32 N2 N3))]
        false)


Test case: test000005
[Parsed from .ktest]
var a int 53
var b int 82
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsrem  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsrem  ?B1 ?B3 ) ) ) (let ( (?B5 (bvsrem  ?B3 ?B4 ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv0 32) ?B1 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B3 ) ) ) (=  false (=  (_ bv0 32) ?B4 ) ) ) (=  false (=  (_ bv0 32) ?B5 ) ) ) (=  (_ bv0 32) (bvsrem  ?B4 ?B5 ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq false
             (Eq 0 N2:(SRem w32 N0 N1)))
         (Eq false
             (Eq 0 N3:(SRem w32 N1 N2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N2 N3)))
         (Eq 0 (SRem w32 N3 N4))]
        false)


Test case: test000006
[Parsed from .ktest]
var a int 97
var b int 98
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsrem  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsrem  ?B1 ?B3 ) ) ) (let ( (?B5 (bvsrem  ?B3 ?B4 ) ) ) (let ( (?B6 (bvsrem  ?B4 ?B5 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv0 32) ?B1 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B3 ) ) ) (=  false (=  (_ bv0 32) ?B4 ) ) ) (=  false (=  (_ bv0 32) ?B5 ) ) ) (=  false (=  (_ bv0 32) ?B6 ) ) ) (=  (_ bv0 32) (bvsrem  ?B5 ?B6 ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq false
             (Eq 0 N2:(SRem w32 N0 N1)))
         (Eq false
             (Eq 0 N3:(SRem w32 N1 N2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N2 N3)))
         (Eq false
             (Eq 0 N5:(SRem w32 N3 N4)))
         (Eq 0 (SRem w32 N4 N5))]
        false)


Test case: test000007
[Parsed from .ktest]
var a int 99
var b int 100
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsrem  ?B2 ?B1 ) ) ) (let ( (?B4 (bvsrem  ?B1 ?B3 ) ) ) (let ( (?B5 (bvsrem  ?B3 ?B4 ) ) ) (let ( (?B6 (bvsrem  ?B4 ?B5 ) ) ) (let ( (?B7 (bvsrem  ?B5 ?B6 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv0 32) ?B1 ) ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B3 ) ) ) (=  false (=  (_ bv0 32) ?B4 ) ) ) (=  false (=  (_ bv0 32) ?B5 ) ) ) (=  false (=  (_ bv0 32) ?B6 ) ) ) (=  false (=  (_ bv0 32) ?B7 ) ) ) (=  (_ bv0 32) (bvsrem  ?B6 ?B7 ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 a))
         (Slt 0
              N1:(ReadLSB w32 0 b))
         (Sle N0 100)
         (Sle N1 100)
         (Eq false
             (Eq 0 N2:(SRem w32 N0 N1)))
         (Eq false
             (Eq 0 N3:(SRem w32 N1 N2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N2 N3)))
         (Eq false
             (Eq 0 N5:(SRem w32 N3 N4)))
         (Eq false
             (Eq 0 N6:(SRem w32 N4 N5)))
         (Eq 0 (SRem w32 N5 N6))]
        false)


--- Program 82 ---
critical path is: test000001.smt2

[critical path content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv4294967286 32) (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000001
[Parsed from .ktest]
var a int -11
var b int 0
var c int 0
var d int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv4294967286 32) (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 4294967286
                  (ReadLSB w32 0 a)))]
        false)


Test case: test000002
[Parsed from .ktest]
var a int 0
var b int -11
var c int 0
var d int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv4294967286 32) ?B1 ) (bvsle  ?B1 (_ bv10 32) ) ) (=  false (bvsle  (_ bv4294967286 32) (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Sle 4294967286
              N0:(ReadLSB w32 0 a))
         (Sle N0 10)
         (Eq false
             (Sle 4294967286
                  (ReadLSB w32 0 b)))]
        false)


Test case: test000003
[Parsed from .ktest]
var a int 0
var b int 0
var c int -11
var d int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv4294967286 32) ?B2 ) (bvsle  ?B2 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (=  false (bvsle  (_ bv4294967286 32) (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
(query [(Sle 4294967286
              N0:(ReadLSB w32 0 a))
         (Sle N0 10)
         (Sle 4294967286
              N1:(ReadLSB w32 0 b))
         (Sle N1 10)
         (Eq false
             (Sle 4294967286
                  (ReadLSB w32 0 c)))]
        false)


Test case: test000004
[Parsed from .ktest]
var a int 0
var b int 0
var c int 0
var d int -11
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun d () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv4294967286 32) ?B3 ) (bvsle  ?B3 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B2 ) ) (bvsle  ?B2 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (=  false (bvsle  (_ bv4294967286 32) (concat  (select  d (_ bv3 32) ) (concat  (select  d (_ bv2 32) ) (concat  (select  d (_ bv1 32) ) (select  d (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
array d[4] : w32 -> w8 = symbolic
(query [(Sle 4294967286
              N0:(ReadLSB w32 0 a))
         (Sle N0 10)
         (Sle 4294967286
              N1:(ReadLSB w32 0 b))
         (Sle N1 10)
         (Sle 4294967286
              N2:(ReadLSB w32 0 c))
         (Sle N2 10)
         (Eq false
             (Sle 4294967286
                  (ReadLSB w32 0 d)))]
        false)


Test case: test000005
[Parsed from .ktest]
var a int 0
var b int 0
var c int 0
var d int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun d () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  d (_ bv3 32) ) (concat  (select  d (_ bv2 32) ) (concat  (select  d (_ bv1 32) ) (select  d (_ bv0 32) ) ) ) ) ) (?B4 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B5 (bvmul  (bvadd  ?B4 ?B2 ) (bvsub  ?B1 ?B3 ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv4294967286 32) ?B4 ) (bvsle  ?B4 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B2 ) ) (bvsle  ?B2 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B3 ) ) (bvsle  ?B3 (_ bv10 32) ) ) (bvslt  ?B5 (_ bv4294966296 32) ) (bvslt  (_ bv1000 32) ?B5 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
array d[4] : w32 -> w8 = symbolic
(query [(Sle 4294967286
              N0:(ReadLSB w32 0 a))
         (Sle N0 10)
         (Sle 4294967286
              N1:(ReadLSB w32 0 b))
         (Sle N1 10)
         (Sle 4294967286
              N2:(ReadLSB w32 0 c))
         (Sle N2 10)
         (Sle 4294967286
              N3:(ReadLSB w32 0 d))
         (Sle N3 10)
         (Slt N4:(Mul w32 (Add w32 N0 N1) (Sub w32 N2 N3))
              4294966296)
         (Slt 1000 N4)]
        false)


Test case: test000006
[Parsed from .ktest]
var a int 0
var b int 0
var c int 0
var d int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun d () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  d (_ bv3 32) ) (concat  (select  d (_ bv2 32) ) (concat  (select  d (_ bv1 32) ) (select  d (_ bv0 32) ) ) ) ) ) (?B4 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B5 (bvmul  (bvadd  ?B4 ?B2 ) (bvsub  ?B1 ?B3 ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv4294967286 32) ?B4 ) (bvsle  ?B4 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B2 ) ) (bvsle  ?B2 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (bvsle  (_ bv4294967286 32) ?B3 ) ) (bvsle  ?B3 (_ bv10 32) ) ) (=  false (bvslt  ?B5 (_ bv4294966296 32) ) ) (=  false (bvslt  (_ bv1000 32) ?B5 ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
array d[4] : w32 -> w8 = symbolic
(query [(Sle 4294967286
              N0:(ReadLSB w32 0 a))
         (Sle N0 10)
         (Sle 4294967286
              N1:(ReadLSB w32 0 b))
         (Sle N1 10)
         (Sle 4294967286
              N2:(ReadLSB w32 0 c))
         (Sle N2 10)
         (Sle 4294967286
              N3:(ReadLSB w32 0 d))
         (Sle N3 10)
         (Eq false
             (Slt N4:(Mul w32 (Add w32 N0 N1) (Sub w32 N2 N3))
                  4294966296))
         (Eq false (Slt 1000 N4))]
        false)


--- Program 83 ---
critical path is: test000007.kquery

[critical path content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Sle 2
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0 N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0 N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Eq false
             (Eq 0 N3:(SRem w32 N1 2)))
         (Eq 0 N4:(SRem w32 N5:(SDiv w32 N1 2) 2))]
        false)


Test case: test000001
[Parsed from .ktest]
var base int 0
var exp int -1
var mod int 2
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv2 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (bvsle  (_ bv0 32) (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Sle 2
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Eq false
             (Sle 0
                  (ReadLSB w32 0 exp)))]
        false)


Test case: test000002
[Parsed from .ktest]
var base int -1
var exp int 0
var mod int 2
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv2 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  (_ bv0 32) (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Sle 2
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Eq false
             (Sle 0
                  (ReadLSB w32 0 base)))]
        false)


Test case: test000003
[Parsed from .ktest]
var base int 0
var exp int 0
var mod int 2
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv2 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B3 ) ) (bvslt  ?B3 ?B2 ) ) (=  (_ bv0 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Sle 2
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Eq 0 (SRem w32 N1 2))]
        false)


Test case: test000004
[Parsed from .ktest]
var base int 0
var exp int 1
var mod int 2
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (bvsdiv  ?B1 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv2 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B3 ) ) (bvslt  ?B3 ?B2 ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (=  (_ bv0 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Sle 2
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Eq false
             (Eq 0 N3:(SRem w32 N1 2)))
         (Eq 0 (SRem w32 (SDiv w32 N1 2) 2))]
        false)


Test case: test000005
[Parsed from .ktest]
var base int 0
var exp int 3
var mod int 2
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (bvsdiv  ?B1 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv2 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B3 ) ) (bvslt  ?B3 ?B2 ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (=  (_ bv0 32) (bvsrem  (bvsdiv  ?B4 (_ bv2 32) ) (_ bv2 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Sle 2
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Eq false
             (Eq 0 N3:(SRem w32 N1 2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N5:(SDiv w32 N1 2) 2)))
         (Eq 0 (SRem w32 (SDiv w32 N5 2) 2))]
        false)


Test case: test000006
[Parsed from .ktest]
var base int 0
var exp int 5
var mod int 2
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (bvsdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (bvsdiv  ?B4 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv2 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B3 ) ) (bvslt  ?B3 ?B2 ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (=  (_ bv0 32) (bvsrem  (bvsdiv  ?B5 (_ bv2 32) ) (_ bv2 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Sle 2
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Eq false
             (Eq 0 N3:(SRem w32 N1 2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N5:(SDiv w32 N1 2) 2)))
         (Eq false
             (Eq 0 N6:(SRem w32 N7:(SDiv w32 N5 2) 2)))
         (Eq 0 (SRem w32 (SDiv w32 N7 2) 2))]
        false)


Test case: test000007
[Parsed from .ktest]
var base int 0
var exp int 7
var mod int 3
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (bvsdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (bvsdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (bvsdiv  ?B5 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv2 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B3 ) ) (bvslt  ?B3 ?B2 ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (=  (_ bv0 32) (bvsrem  (bvsdiv  ?B6 (_ bv2 32) ) (_ bv2 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Sle 2
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Eq false
             (Eq 0 N3:(SRem w32 N1 2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N5:(SDiv w32 N1 2) 2)))
         (Eq false
             (Eq 0 N6:(SRem w32 N7:(SDiv w32 N5 2) 2)))
         (Eq false
             (Eq 0 N8:(SRem w32 N9:(SDiv w32 N7 2) 2)))
         (Eq 0 (SRem w32 (SDiv w32 N9 2) 2))]
        false)


Test case: test000008
[Parsed from .ktest]
var base int 0
var exp int 9
var mod int 98
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (bvsdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (bvsdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (bvsdiv  ?B5 (_ bv2 32) ) ) ) (let ( (?B7 (bvsdiv  ?B6 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv2 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B3 ) ) (bvslt  ?B3 ?B2 ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B7 (_ bv2 32) ) ) ) ) (=  (_ bv0 32) (bvsrem  (bvsdiv  ?B7 (_ bv2 32) ) (_ bv2 32) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Sle 2
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Eq false
             (Eq 0 N3:(SRem w32 N1 2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N5:(SDiv w32 N1 2) 2)))
         (Eq false
             (Eq 0 N6:(SRem w32 N7:(SDiv w32 N5 2) 2)))
         (Eq false
             (Eq 0 N8:(SRem w32 N9:(SDiv w32 N7 2) 2)))
         (Eq false
             (Eq 0 N10:(SRem w32 N11:(SDiv w32 N9 2) 2)))
         (Eq 0 (SRem w32 (SDiv w32 N11 2) 2))]
        false)


Test case: test000009
[Parsed from .ktest]
var base int 0
var exp int 11
var mod int 7
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (bvsdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (bvsdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (bvsdiv  ?B5 (_ bv2 32) ) ) ) (let ( (?B7 (bvsdiv  ?B6 (_ bv2 32) ) ) ) (let ( (?B8 (bvsdiv  ?B7 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv2 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B3 ) ) (bvslt  ?B3 ?B2 ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B7 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B8 (_ bv2 32) ) ) ) ) (=  (_ bv0 32) (bvsrem  (bvsdiv  ?B8 (_ bv2 32) ) (_ bv2 32) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Sle 2
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Eq false
             (Eq 0 N3:(SRem w32 N1 2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N5:(SDiv w32 N1 2) 2)))
         (Eq false
             (Eq 0 N6:(SRem w32 N7:(SDiv w32 N5 2) 2)))
         (Eq false
             (Eq 0 N8:(SRem w32 N9:(SDiv w32 N7 2) 2)))
         (Eq false
             (Eq 0 N10:(SRem w32 N11:(SDiv w32 N9 2) 2)))
         (Eq false
             (Eq 0 N12:(SRem w32 N13:(SDiv w32 N11 2) 2)))
         (Eq 0 (SRem w32 (SDiv w32 N13 2) 2))]
        false)


Test case: test000010
[Parsed from .ktest]
var base int 0
var exp int 13
var mod int 3
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (bvsdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (bvsdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (bvsdiv  ?B5 (_ bv2 32) ) ) ) (let ( (?B7 (bvsdiv  ?B6 (_ bv2 32) ) ) ) (let ( (?B8 (bvsdiv  ?B7 (_ bv2 32) ) ) ) (let ( (?B9 (bvsdiv  ?B8 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv2 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B3 ) ) (bvslt  ?B3 ?B2 ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B7 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B8 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B9 (_ bv2 32) ) ) ) ) (=  (_ bv0 32) (bvsrem  (bvsdiv  ?B9 (_ bv2 32) ) (_ bv2 32) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Sle 2
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Eq false
             (Eq 0 N3:(SRem w32 N1 2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N5:(SDiv w32 N1 2) 2)))
         (Eq false
             (Eq 0 N6:(SRem w32 N7:(SDiv w32 N5 2) 2)))
         (Eq false
             (Eq 0 N8:(SRem w32 N9:(SDiv w32 N7 2) 2)))
         (Eq false
             (Eq 0 N10:(SRem w32 N11:(SDiv w32 N9 2) 2)))
         (Eq false
             (Eq 0 N12:(SRem w32 N13:(SDiv w32 N11 2) 2)))
         (Eq false
             (Eq 0 N14:(SRem w32 N15:(SDiv w32 N13 2) 2)))
         (Eq 0 (SRem w32 (SDiv w32 N15 2) 2))]
        false)


Test case: test000011
[Parsed from .ktest]
var base int 0
var exp int 15
var mod int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (bvsdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (bvsdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (bvsdiv  ?B5 (_ bv2 32) ) ) ) (let ( (?B7 (bvsdiv  ?B6 (_ bv2 32) ) ) ) (let ( (?B8 (bvsdiv  ?B7 (_ bv2 32) ) ) ) (let ( (?B9 (bvsdiv  ?B8 (_ bv2 32) ) ) ) (let ( (?B10 (bvsdiv  ?B9 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv2 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B3 ) ) (bvslt  ?B3 ?B2 ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B7 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B8 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B9 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B10 (_ bv2 32) ) ) ) ) (=  (_ bv0 32) (bvsrem  (bvsdiv  ?B10 (_ bv2 32) ) (_ bv2 32) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Sle 2
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Eq false
             (Eq 0 N3:(SRem w32 N1 2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N5:(SDiv w32 N1 2) 2)))
         (Eq false
             (Eq 0 N6:(SRem w32 N7:(SDiv w32 N5 2) 2)))
         (Eq false
             (Eq 0 N8:(SRem w32 N9:(SDiv w32 N7 2) 2)))
         (Eq false
             (Eq 0 N10:(SRem w32 N11:(SDiv w32 N9 2) 2)))
         (Eq false
             (Eq 0 N12:(SRem w32 N13:(SDiv w32 N11 2) 2)))
         (Eq false
             (Eq 0 N14:(SRem w32 N15:(SDiv w32 N13 2) 2)))
         (Eq false
             (Eq 0 N16:(SRem w32 N17:(SDiv w32 N15 2) 2)))
         (Eq 0 (SRem w32 (SDiv w32 N17 2) 2))]
        false)


Test case: test000012
[Parsed from .ktest]
var base int 0
var exp int 17
var mod int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (bvsdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (bvsdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (bvsdiv  ?B5 (_ bv2 32) ) ) ) (let ( (?B7 (bvsdiv  ?B6 (_ bv2 32) ) ) ) (let ( (?B8 (bvsdiv  ?B7 (_ bv2 32) ) ) ) (let ( (?B9 (bvsdiv  ?B8 (_ bv2 32) ) ) ) (let ( (?B10 (bvsdiv  ?B9 (_ bv2 32) ) ) ) (let ( (?B11 (bvsdiv  ?B10 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv2 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B3 ) ) (bvslt  ?B3 ?B2 ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B7 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B8 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B9 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B10 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B11 (_ bv2 32) ) ) ) ) (=  (_ bv0 32) (bvsrem  (bvsdiv  ?B11 (_ bv2 32) ) (_ bv2 32) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Sle 2
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Eq false
             (Eq 0 N3:(SRem w32 N1 2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N5:(SDiv w32 N1 2) 2)))
         (Eq false
             (Eq 0 N6:(SRem w32 N7:(SDiv w32 N5 2) 2)))
         (Eq false
             (Eq 0 N8:(SRem w32 N9:(SDiv w32 N7 2) 2)))
         (Eq false
             (Eq 0 N10:(SRem w32 N11:(SDiv w32 N9 2) 2)))
         (Eq false
             (Eq 0 N12:(SRem w32 N13:(SDiv w32 N11 2) 2)))
         (Eq false
             (Eq 0 N14:(SRem w32 N15:(SDiv w32 N13 2) 2)))
         (Eq false
             (Eq 0 N16:(SRem w32 N17:(SDiv w32 N15 2) 2)))
         (Eq false
             (Eq 0 N18:(SRem w32 N19:(SDiv w32 N17 2) 2)))
         (Eq 0 (SRem w32 (SDiv w32 N19 2) 2))]
        false)


Test case: test000013
[Parsed from .ktest]
var base int 0
var exp int 19
var mod int 32
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (bvsdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (bvsdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (bvsdiv  ?B5 (_ bv2 32) ) ) ) (let ( (?B7 (bvsdiv  ?B6 (_ bv2 32) ) ) ) (let ( (?B8 (bvsdiv  ?B7 (_ bv2 32) ) ) ) (let ( (?B9 (bvsdiv  ?B8 (_ bv2 32) ) ) ) (let ( (?B10 (bvsdiv  ?B9 (_ bv2 32) ) ) ) (let ( (?B11 (bvsdiv  ?B10 (_ bv2 32) ) ) ) (let ( (?B12 (bvsdiv  ?B11 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv2 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B3 ) ) (bvslt  ?B3 ?B2 ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B7 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B8 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B9 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B10 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B11 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B12 (_ bv2 32) ) ) ) ) (=  (_ bv0 32) (bvsrem  (bvsdiv  ?B12 (_ bv2 32) ) (_ bv2 32) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Sle 2
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Eq false
             (Eq 0 N3:(SRem w32 N1 2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N5:(SDiv w32 N1 2) 2)))
         (Eq false
             (Eq 0 N6:(SRem w32 N7:(SDiv w32 N5 2) 2)))
         (Eq false
             (Eq 0 N8:(SRem w32 N9:(SDiv w32 N7 2) 2)))
         (Eq false
             (Eq 0 N10:(SRem w32 N11:(SDiv w32 N9 2) 2)))
         (Eq false
             (Eq 0 N12:(SRem w32 N13:(SDiv w32 N11 2) 2)))
         (Eq false
             (Eq 0 N14:(SRem w32 N15:(SDiv w32 N13 2) 2)))
         (Eq false
             (Eq 0 N16:(SRem w32 N17:(SDiv w32 N15 2) 2)))
         (Eq false
             (Eq 0 N18:(SRem w32 N19:(SDiv w32 N17 2) 2)))
         (Eq false
             (Eq 0 N20:(SRem w32 N21:(SDiv w32 N19 2) 2)))
         (Eq 0 (SRem w32 (SDiv w32 N21 2) 2))]
        false)


Test case: test000014
[Parsed from .ktest]
var base int 0
var exp int 20
var mod int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun base () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun exp () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun mod () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  exp (_ bv3 32) ) (concat  (select  exp (_ bv2 32) ) (concat  (select  exp (_ bv1 32) ) (select  exp (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  mod (_ bv3 32) ) (concat  (select  mod (_ bv2 32) ) (concat  (select  mod (_ bv1 32) ) (select  mod (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  base (_ bv3 32) ) (concat  (select  base (_ bv2 32) ) (concat  (select  base (_ bv1 32) ) (select  base (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (bvsdiv  ?B1 (_ bv2 32) ) ) ) (let ( (?B5 (bvsdiv  ?B4 (_ bv2 32) ) ) ) (let ( (?B6 (bvsdiv  ?B5 (_ bv2 32) ) ) ) (let ( (?B7 (bvsdiv  ?B6 (_ bv2 32) ) ) ) (let ( (?B8 (bvsdiv  ?B7 (_ bv2 32) ) ) ) (let ( (?B9 (bvsdiv  ?B8 (_ bv2 32) ) ) ) (let ( (?B10 (bvsdiv  ?B9 (_ bv2 32) ) ) ) (let ( (?B11 (bvsdiv  ?B10 (_ bv2 32) ) ) ) (let ( (?B12 (bvsdiv  ?B11 (_ bv2 32) ) ) ) (let ( (?B13 (bvsdiv  ?B12 (_ bv2 32) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv2 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  (_ bv0 32) ?B3 ) ) (bvslt  ?B3 ?B2 ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B1 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B4 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B5 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B6 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B7 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B8 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B9 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B10 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B11 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B12 (_ bv2 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  ?B13 (_ bv2 32) ) ) ) ) (=  (_ bv0 32) (bvsrem  (bvsdiv  ?B13 (_ bv2 32) ) (_ bv2 32) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array base[4] : w32 -> w8 = symbolic
array exp[4] : w32 -> w8 = symbolic
array mod[4] : w32 -> w8 = symbolic
(query [(Sle 2
              N0:(ReadLSB w32 0 mod))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 exp))
         (Sle N1 20)
         (Sle 0
              N2:(ReadLSB w32 0 base))
         (Slt N2 N0)
         (Eq false
             (Eq 0 N3:(SRem w32 N1 2)))
         (Eq false
             (Eq 0 N4:(SRem w32 N5:(SDiv w32 N1 2) 2)))
         (Eq false
             (Eq 0 N6:(SRem w32 N7:(SDiv w32 N5 2) 2)))
         (Eq false
             (Eq 0 N8:(SRem w32 N9:(SDiv w32 N7 2) 2)))
         (Eq false
             (Eq 0 N10:(SRem w32 N11:(SDiv w32 N9 2) 2)))
         (Eq false
             (Eq 0 N12:(SRem w32 N13:(SDiv w32 N11 2) 2)))
         (Eq false
             (Eq 0 N14:(SRem w32 N15:(SDiv w32 N13 2) 2)))
         (Eq false
             (Eq 0 N16:(SRem w32 N17:(SDiv w32 N15 2) 2)))
         (Eq false
             (Eq 0 N18:(SRem w32 N19:(SDiv w32 N17 2) 2)))
         (Eq false
             (Eq 0 N20:(SRem w32 N21:(SDiv w32 N19 2) 2)))
         (Eq false
             (Eq 0 N22:(SRem w32 N23:(SDiv w32 N21 2) 2)))
         (Eq 0 (SRem w32 (SDiv w32 N23 2) 2))]
        false)


--- Program 84 ---
critical path is: test000001.smt2

[critical path content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvslt  (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) (_ bv0 32) ) ) )
(check-sat)
(exit)


Test case: test000001
[Parsed from .ktest]
var x int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvslt  (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) (_ bv0 32) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Slt (ReadLSB w32 0 x)
                  0))]
        false)


Test case: test000002
[Parsed from .ktest]
var x int -2147483648
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (bvslt  (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) (_ bv0 32) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Slt (ReadLSB w32 0 x)
              0)]
        false)


--- Program 85 ---
critical path is: test000007.kquery

[critical path content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 a))
         (Sle N0 50)
         (Sle 0
              N1:(ReadLSB w32 0 b))
         (Sle N1 50)
         (Sle 0
              N2:(ReadLSB w32 0 c))
         (Sle N2 50)
         (Eq false (Slt N1 N0))
         (Eq false (Slt N2 N1))
         (Eq false
             (Slt (Add w32 N0 N2) N1))
         (Eq false
             (Slt (Sub w32 N0 N1) -100))
         (Slt 1000
              (Sub w32 N0 N1))]
        false)


Test case: test000001
[Parsed from .ktest]
var a int 0
var b int -1
var c int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array b[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 b)))]
        false)


Test case: test000002
[Parsed from .ktest]
var a int -1
var b int 0
var c int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 a)))]
        false)


Test case: test000003
[Parsed from .ktest]
var a int 0
var b int 0
var c int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv50 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 a))
         (Sle N0 50)
         (Sle 0
              N1:(ReadLSB w32 0 b))
         (Sle N1 50)]
        false)


Test case: test000004
[Parsed from .ktest]
var a int 0
var b int 31
var c int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B3 ) (bvsle  ?B3 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv50 32) ) ) (bvslt  ?B1 ?B3 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 a))
         (Sle N0 50)
         (Sle 0
              N1:(ReadLSB w32 0 b))
         (Sle N1 50)
         (Sle 0
              N2:(ReadLSB w32 0 c))
         (Sle N2 50)
         (Slt N1 N0)]
        false)


Test case: test000005
[Parsed from .ktest]
var a int 32
var b int 0
var c int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (bvmul  ?B3 (bvmul  ?B1 ?B2 ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  false (bvslt  ?B1 ?B3 ) ) (=  false (bvslt  ?B2 ?B1 ) ) ) (=  false (bvslt  (bvadd  ?B3 ?B2 ) ?B1 ) ) ) (=  false (bvslt  ?B4 (_ bv4294967196 32) ) ) ) (=  false (bvslt  (_ bv1000 32) ?B4 ) ) ) (bvsle  (_ bv0 32) ?B3 ) ) (bvsle  ?B3 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv50 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 a))
         (Sle N0 50)
         (Sle 0
              N1:(ReadLSB w32 0 b))
         (Sle N1 50)
         (Sle 0
              N2:(ReadLSB w32 0 c))
         (Sle N2 50)
         (Eq false (Slt N1 N0))
         (Eq false (Slt N2 N1))
         (Eq false
             (Slt (Add w32 N0 N2) N1))
         (Eq false
             (Slt (Sub w32 N0 N1) -100))
         (Eq false
             (Slt 1000
                  (Sub w32 N0 N1)))]
        false)


Test case: test000006
[Parsed from .ktest]
var a int 0
var b int 0
var c int 48
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (bvmul  ?B3 (bvmul  ?B1 ?B2 ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  false (bvslt  ?B1 ?B3 ) ) (=  false (bvslt  ?B2 ?B1 ) ) ) (bvslt  (bvadd  ?B3 ?B2 ) ?B1 ) ) (=  false (bvslt  ?B4 (_ bv4294967196 32) ) ) ) (=  false (bvslt  (_ bv1000 32) ?B4 ) ) ) (bvsle  (_ bv0 32) ?B3 ) ) (bvsle  ?B3 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv50 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 a))
         (Sle N0 50)
         (Sle 0
              N1:(ReadLSB w32 0 b))
         (Sle N1 50)
         (Sle 0
              N2:(ReadLSB w32 0 c))
         (Sle N2 50)
         (Eq false (Slt N1 N0))
         (Eq false (Slt N2 N1))
         (Slt (Add w32 N0 N2) N1)
         (Eq false
             (Slt (Mul w32 N0
                           (Mul w32 N1 N2))
                  -100))
         (Eq false
             (Slt 1000
                  (Mul w32 N0
                            (Mul w32 N1 N2))))]
        false)


Test case: test000007
[Parsed from .ktest]
var a int 34
var b int 48
var c int 48
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun b () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun c () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  b (_ bv3 32) ) (concat  (select  b (_ bv2 32) ) (concat  (select  b (_ bv1 32) ) (select  b (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  c (_ bv3 32) ) (concat  (select  c (_ bv2 32) ) (concat  (select  c (_ bv1 32) ) (select  c (_ bv0 32) ) ) ) ) ) (?B3 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (let ( (?B4 (bvmul  ?B3 (bvmul  ?B1 ?B2 ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (=  false (bvslt  ?B1 ?B3 ) ) (=  false (bvslt  ?B2 ?B1 ) ) ) (=  false (bvslt  (bvadd  ?B3 ?B2 ) ?B1 ) ) ) (=  false (bvslt  (_ bv4294967196 32) (bvsub  ?B3 ?B1 ) ) ) ) (bvslt  (_ bv1000 32) (bvsub  ?B3 ?B1 ) ) ) (=  false (bvslt  ?B4 (_ bv4294967196 32) ) ) ) (=  false (bvslt  (_ bv1000 32) ?B4 ) ) ) (bvsle  (_ bv0 32) ?B3 ) ) (bvsle  ?B3 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv0 32) ?B2 ) ) (bvsle  ?B2 (_ bv50 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
array b[4] : w32 -> w8 = symbolic
array c[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 a))
         (Sle N0 50)
         (Sle 0
              N1:(ReadLSB w32 0 b))
         (Sle N1 50)
         (Sle 0
              N2:(ReadLSB w32 0 c))
         (Sle N2 50)
         (Eq false (Slt N1 N0))
         (Eq false (Slt N2 N1))
         (Eq false
             (Slt (Add w32 N0 N2) N1))
         (Slt (Sub w32 N0 N1) -100)
         (Eq false
             (Slt 1000
                  (Sub w32 N0 N1)))]
        false)


--- Program 86 ---
critical path is: test000001.smt2

[critical path content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv4294967246 32) (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000001
[Parsed from .ktest]
var x int -51
var y int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv4294967246 32) (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 4294967246
                  (ReadLSB w32 0 x)))]
        false)


Test case: test000002
[Parsed from .ktest]
var x int 0
var y int -51
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun y () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv4294967246 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (=  false (bvsle  (_ bv4294967246 32) (concat  (select  y (_ bv3 32) ) (concat  (select  y (_ bv2 32) ) (concat  (select  y (_ bv1 32) ) (select  y (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
array y[4] : w32 -> w8 = symbolic
(query [(Sle 4294967246
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Eq false
             (Sle 4294967246
                  (ReadLSB w32 0 y)))]
        false)


Test case: test000003
[Parsed from .ktest]
var x int 0
var y int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun y () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  y (_ bv3 32) ) (concat  (select  y (_ bv2 32) ) (concat  (select  y (_ bv1 32) ) (select  y (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv4294967246 32) ?B2 ) (bvsle  ?B2 (_ bv50 32) ) ) (bvsle  (_ bv4294967246 32) ?B1 ) ) (bvsle  ?B1 (_ bv50 32) ) ) (=  false (bvslt  ?B1 ?B2 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
array y[4] : w32 -> w8 = symbolic
(query [(Sle 4294967246
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 4294967246
              N1:(ReadLSB w32 0 y))
         (Sle N1 50)
         (Eq false (Slt N1 N0))]
        false)


Test case: test000004
[Parsed from .ktest]
var x int 50
var y int -50
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun y () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  y (_ bv3 32) ) (concat  (select  y (_ bv2 32) ) (concat  (select  y (_ bv1 32) ) (select  y (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv4294967246 32) ?B2 ) (bvsle  ?B2 (_ bv50 32) ) ) (bvsle  (_ bv4294967246 32) ?B1 ) ) (bvsle  ?B1 (_ bv50 32) ) ) (bvslt  ?B1 ?B2 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
array y[4] : w32 -> w8 = symbolic
(query [(Sle 4294967246
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 4294967246
              N1:(ReadLSB w32 0 y))
         (Sle N1 50)
         (Slt N1 N0)]
        false)


--- Program 87 ---
critical path is: test000007.kquery

[critical path content]
array a[4] : w32 -> w8 = symbolic
(query [(Sle 4294967196
              N0:(ReadLSB w32 0 a))
         (Sle N0 100)
         (Eq false (Slt N0 0))
         (Eq false (Eq 0 N0))
         (Eq false (Slt 50 N0))]
        false)


Test case: test000001
[Parsed from .ktest]
var a int -101
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv4294967196 32) (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 4294967196
                  (ReadLSB w32 0 a)))]
        false)


Test case: test000002
[Parsed from .ktest]
var a int -100
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv4294967196 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 (_ bv0 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Sle 4294967196
              N0:(ReadLSB w32 0 a))
         (Sle N0 100)
         (Slt N0 0)]
        false)


Test case: test000003
[Parsed from .ktest]
var a int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv4294967196 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (bvslt  ?B1 (_ bv0 32) ) ) ) (=  ?B1 (_ bv0 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Sle 4294967196
              N0:(ReadLSB w32 0 a))
         (Sle N0 100)
         (Eq false (Slt N0 0))
         (Eq 0 N0)]
        false)


Test case: test000004
[Parsed from .ktest]
var a int 1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv4294967196 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (bvslt  ?B1 (_ bv0 32) ) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (bvslt  (_ bv50 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Sle 4294967196
              N0:(ReadLSB w32 0 a))
         (Sle N0 100)
         (Eq false (Slt N0 0))
         (Eq false (Eq 0 N0))
         (Eq false (Slt 50 N0))]
        false)


Test case: test000005
[Parsed from .ktest]
var a int 100
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv4294967196 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (bvslt  ?B1 (_ bv0 32) ) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (bvslt  (_ bv50 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Sle 4294967196
              N0:(ReadLSB w32 0 a))
         (Sle N0 100)
         (Eq false (Slt N0 0))
         (Eq false (Eq 0 N0))
         (Slt 50 N0)]
        false)


Test case: test000006
[Parsed from .ktest]
var a int -38
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv4294967196 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 (_ bv0 32) ) ) (=  false (bvslt  ?B1 (_ bv4294967246 32) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Sle 4294967196
              N0:(ReadLSB w32 0 a))
         (Sle N0 100)
         (Slt N0 0)
         (Eq false (Slt N0 4294967246))]
        false)


Test case: test000007
[Parsed from .ktest]
var a int -85
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun a () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  a (_ bv3 32) ) (concat  (select  a (_ bv2 32) ) (concat  (select  a (_ bv1 32) ) (select  a (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv4294967196 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  ?B1 (_ bv0 32) ) ) (bvslt  ?B1 (_ bv4294967246 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array a[4] : w32 -> w8 = symbolic
(query [(Sle 4294967196
              N0:(ReadLSB w32 0 a))
         (Sle N0 100)
         (Slt N0 0)
         (Slt N0 4294967246)]
        false)


--- Program 88 ---
critical path is: test000052.kquery

[critical path content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Sle 21 N0)
         (Sle 22 N0)
         (Sle 23 N0)
         (Sle 24 N0)
         (Sle 25 N0)
         (Sle 26 N0)
         (Sle 27 N0)
         (Sle 28 N0)
         (Sle 29 N0)
         (Sle 30 N0)
         (Sle 31 N0)
         (Sle 32 N0)
         (Sle 33 N0)
         (Sle 34 N0)
         (Sle 35 N0)
         (Sle 36 N0)
         (Sle 37 N0)
         (Sle 38 N0)
         (Sle 39 N0)
         (Sle 40 N0)
         (Sle 41 N0)
         (Sle 42 N0)
         (Sle 43 N0)
         (Sle 44 N0)
         (Sle 45 N0)
         (Sle 46 N0)
         (Sle 47 N0)
         (Sle 48 N0)
         (Sle 49 N0)
         (Sle 50 N0)]
        false)


Test case: test000001
[Parsed from .ktest]
var x int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv1 32) (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 1
                  (ReadLSB w32 0 x)))]
        false)


Test case: test000002
[Parsed from .ktest]
var x int 1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (=  false (bvsle  (_ bv2 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Eq false (Sle 2 N0))]
        false)


Test case: test000003
[Parsed from .ktest]
var x int 2
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (=  false (bvsle  (_ bv3 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Eq false (Sle 3 N0))]
        false)


Test case: test000004
[Parsed from .ktest]
var x int 3
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (=  false (bvsle  (_ bv4 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Eq false (Sle 4 N0))]
        false)


Test case: test000005
[Parsed from .ktest]
var x int 4
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (=  false (bvsle  (_ bv5 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Eq false (Sle 5 N0))]
        false)


Test case: test000006
[Parsed from .ktest]
var x int 5
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (=  false (bvsle  (_ bv6 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Eq false (Sle 6 N0))]
        false)


Test case: test000007
[Parsed from .ktest]
var x int 6
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (=  false (bvsle  (_ bv7 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Eq false (Sle 7 N0))]
        false)


Test case: test000008
[Parsed from .ktest]
var x int 7
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (=  false (bvsle  (_ bv8 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Eq false (Sle 8 N0))]
        false)


Test case: test000009
[Parsed from .ktest]
var x int 8
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (=  false (bvsle  (_ bv9 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Eq false (Sle 9 N0))]
        false)


Test case: test000010
[Parsed from .ktest]
var x int 9
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (=  false (bvsle  (_ bv10 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Eq false (Sle 10 N0))]
        false)


Test case: test000011
[Parsed from .ktest]
var x int 10
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (=  false (bvsle  (_ bv11 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Eq false (Sle 11 N0))]
        false)


Test case: test000012
[Parsed from .ktest]
var x int 11
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (=  false (bvsle  (_ bv12 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Eq false (Sle 12 N0))]
        false)


Test case: test000013
[Parsed from .ktest]
var x int 12
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (=  false (bvsle  (_ bv13 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Eq false (Sle 13 N0))]
        false)


Test case: test000014
[Parsed from .ktest]
var x int 13
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (=  false (bvsle  (_ bv14 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Eq false (Sle 14 N0))]
        false)


Test case: test000015
[Parsed from .ktest]
var x int 14
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (=  false (bvsle  (_ bv15 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Eq false (Sle 15 N0))]
        false)


Test case: test000016
[Parsed from .ktest]
var x int 15
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (=  false (bvsle  (_ bv16 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Eq false (Sle 16 N0))]
        false)


Test case: test000017
[Parsed from .ktest]
var x int 16
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (=  false (bvsle  (_ bv17 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Eq false (Sle 17 N0))]
        false)


Test case: test000018
[Parsed from .ktest]
var x int 17
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (=  false (bvsle  (_ bv18 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Eq false (Sle 18 N0))]
        false)


Test case: test000019
[Parsed from .ktest]
var x int 18
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (=  false (bvsle  (_ bv19 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Eq false (Sle 19 N0))]
        false)


Test case: test000020
[Parsed from .ktest]
var x int 19
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (=  false (bvsle  (_ bv20 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Eq false (Sle 20 N0))]
        false)


Test case: test000021
[Parsed from .ktest]
var x int 20
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (bvsle  (_ bv20 32) ?B1 ) ) (=  false (bvsle  (_ bv21 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Eq false (Sle 21 N0))]
        false)


Test case: test000022
[Parsed from .ktest]
var x int 21
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (bvsle  (_ bv20 32) ?B1 ) ) (bvsle  (_ bv21 32) ?B1 ) ) (=  false (bvsle  (_ bv22 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Sle 21 N0)
         (Eq false (Sle 22 N0))]
        false)


Test case: test000023
[Parsed from .ktest]
var x int 22
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (bvsle  (_ bv20 32) ?B1 ) ) (bvsle  (_ bv21 32) ?B1 ) ) (bvsle  (_ bv22 32) ?B1 ) ) (=  false (bvsle  (_ bv23 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Sle 21 N0)
         (Sle 22 N0)
         (Eq false (Sle 23 N0))]
        false)


Test case: test000024
[Parsed from .ktest]
var x int 23
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (bvsle  (_ bv20 32) ?B1 ) ) (bvsle  (_ bv21 32) ?B1 ) ) (bvsle  (_ bv22 32) ?B1 ) ) (bvsle  (_ bv23 32) ?B1 ) ) (=  false (bvsle  (_ bv24 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Sle 21 N0)
         (Sle 22 N0)
         (Sle 23 N0)
         (Eq false (Sle 24 N0))]
        false)


Test case: test000025
[Parsed from .ktest]
var x int 24
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (bvsle  (_ bv20 32) ?B1 ) ) (bvsle  (_ bv21 32) ?B1 ) ) (bvsle  (_ bv22 32) ?B1 ) ) (bvsle  (_ bv23 32) ?B1 ) ) (bvsle  (_ bv24 32) ?B1 ) ) (=  false (bvsle  (_ bv25 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Sle 21 N0)
         (Sle 22 N0)
         (Sle 23 N0)
         (Sle 24 N0)
         (Eq false (Sle 25 N0))]
        false)


Test case: test000026
[Parsed from .ktest]
var x int 25
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (bvsle  (_ bv20 32) ?B1 ) ) (bvsle  (_ bv21 32) ?B1 ) ) (bvsle  (_ bv22 32) ?B1 ) ) (bvsle  (_ bv23 32) ?B1 ) ) (bvsle  (_ bv24 32) ?B1 ) ) (bvsle  (_ bv25 32) ?B1 ) ) (=  false (bvsle  (_ bv26 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Sle 21 N0)
         (Sle 22 N0)
         (Sle 23 N0)
         (Sle 24 N0)
         (Sle 25 N0)
         (Eq false (Sle 26 N0))]
        false)


Test case: test000027
[Parsed from .ktest]
var x int 26
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun x () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  x (_ bv3 32) ) (concat  (select  x (_ bv2 32) ) (concat  (select  x (_ bv1 32) ) (select  x (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv50 32) ) ) (bvsle  (_ bv2 32) ?B1 ) ) (bvsle  (_ bv3 32) ?B1 ) ) (bvsle  (_ bv4 32) ?B1 ) ) (bvsle  (_ bv5 32) ?B1 ) ) (bvsle  (_ bv6 32) ?B1 ) ) (bvsle  (_ bv7 32) ?B1 ) ) (bvsle  (_ bv8 32) ?B1 ) ) (bvsle  (_ bv9 32) ?B1 ) ) (bvsle  (_ bv10 32) ?B1 ) ) (bvsle  (_ bv11 32) ?B1 ) ) (bvsle  (_ bv12 32) ?B1 ) ) (bvsle  (_ bv13 32) ?B1 ) ) (bvsle  (_ bv14 32) ?B1 ) ) (bvsle  (_ bv15 32) ?B1 ) ) (bvsle  (_ bv16 32) ?B1 ) ) (bvsle  (_ bv17 32) ?B1 ) ) (bvsle  (_ bv18 32) ?B1 ) ) (bvsle  (_ bv19 32) ?B1 ) ) (bvsle  (_ bv20 32) ?B1 ) ) (bvsle  (_ bv21 32) ?B1 ) ) (bvsle  (_ bv22 32) ?B1 ) ) (bvsle  (_ bv23 32) ?B1 ) ) (bvsle  (_ bv24 32) ?B1 ) ) (bvsle  (_ bv25 32) ?B1 ) ) (bvsle  (_ bv26 32) ?B1 ) ) (=  false (bvsle  (_ bv27 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array x[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 x))
         (Sle N0 50)
         (Sle 2 N0)
         (Sle 3 N0)
         (Sle 4 N0)
         (Sle 5 N0)
         (Sle 6 N0)
         (Sle 7 N0)
         (Sle 8 N0)
         (Sle 9 N0)
         (Sle 10 N0)
         (Sle 11 N0)
         (Sle 12 N0)
         (Sle 13 N0)
         (Sle 14 N0)
         (Sle 15 N0)
         (Sle 16 N0)
         (Sle 17 N0)
         (Sle 18 N0)
         (Sle 19 N0)
         (Sle 20 N0)
         (Sle 21 N0)
         (Sle 22 N0)
         (Sle 23 N0)
         (Sle 24 N0)
         (Sle 25 N0)
         (Sle 26 N0)
         (Eq false (Sle 27 N0))]
        false)


Test case: test000028
[Parsed from .ktest]
var x int 

--- Program 89 ---
critical path is: test000052.kquery

[critical path content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false
             (Eq 1 N0))
         (Eq false
             (Eq 4 N0))
         (Eq false
             (Eq 9 N0))
         (Eq false
             (Eq 16 N0))
         (Eq false
             (Eq 25 N0))
         (Eq false
             (Eq 36 N0))
         (Eq false
             (Eq 49 N0))
         (Eq false
             (Eq 64 N0))
         (Eq false
             (Eq 81 N0))
         (Eq false
             (Eq 100 N0))
         (Slt 100 N0)]
        false)


Test case: test000001
[Parsed from .ktest]
var n int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 n)))]
        false)


Test case: test000002
[Parsed from .ktest]
var n int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv0 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq 0 N0)]
        false)


Test case: test000003
[Parsed from .ktest]
var n int 2
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))]
        false)


Test case: test000004
[Parsed from .ktest]
var n int 4
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  (_ bv4 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq 4 N0)]
        false)


Test case: test000005
[Parsed from .ktest]
var n int 6
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 9 N0))]
        false)


Test case: test000006
[Parsed from .ktest]
var n int 9
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 16 N0))]
        false)


Test case: test000007
[Parsed from .ktest]
var n int 17
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv25 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 25 N0))]
        false)


Test case: test000008
[Parsed from .ktest]
var n int 26
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv25 32) ?B1 ) ) ) (=  false (=  (_ bv36 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 25 N0))
         (Eq false (Eq 36 N0))]
        false)


Test case: test000009
[Parsed from .ktest]
var n int 37
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv25 32) ?B1 ) ) ) (=  false (=  (_ bv36 32) ?B1 ) ) ) (=  false (=  (_ bv49 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 25 N0))
         (Eq false (Eq 36 N0))
         (Eq false (Eq 49 N0))]
        false)


Test case: test000010
[Parsed from .ktest]
var n int 49
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv25 32) ?B1 ) ) ) (=  false (=  (_ bv36 32) ?B1 ) ) ) (=  (_ bv49 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 25 N0))
         (Eq false (Eq 36 N0))
         (Eq 49 N0)]
        false)


Test case: test000011
[Parsed from .ktest]
var n int 50
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv25 32) ?B1 ) ) ) (=  false (=  (_ bv36 32) ?B1 ) ) ) (=  false (=  (_ bv49 32) ?B1 ) ) ) (=  false (=  (_ bv64 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 25 N0))
         (Eq false (Eq 36 N0))
         (Eq false (Eq 49 N0))
         (Eq false (Eq 64 N0))]
        false)


Test case: test000012
[Parsed from .ktest]
var n int 68
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv25 32) ?B1 ) ) ) (=  false (=  (_ bv36 32) ?B1 ) ) ) (=  false (=  (_ bv49 32) ?B1 ) ) ) (=  false (=  (_ bv64 32) ?B1 ) ) ) (=  false (=  (_ bv81 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 25 N0))
         (Eq false (Eq 36 N0))
         (Eq false (Eq 49 N0))
         (Eq false (Eq 64 N0))
         (Eq false (Eq 81 N0))]
        false)


Test case: test000013
[Parsed from .ktest]
var n int 81
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv25 32) ?B1 ) ) ) (=  false (=  (_ bv36 32) ?B1 ) ) ) (=  false (=  (_ bv49 32) ?B1 ) ) ) (=  false (=  (_ bv64 32) ?B1 ) ) ) (=  (_ bv81 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 25 N0))
         (Eq false (Eq 36 N0))
         (Eq false (Eq 49 N0))
         (Eq false (Eq 64 N0))
         (Eq 81 N0)]
        false)


Test case: test000014
[Parsed from .ktest]
var n int 82
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv25 32) ?B1 ) ) ) (=  false (=  (_ bv36 32) ?B1 ) ) ) (=  false (=  (_ bv49 32) ?B1 ) ) ) (=  false (=  (_ bv64 32) ?B1 ) ) ) (=  false (=  (_ bv81 32) ?B1 ) ) ) (=  false (=  (_ bv100 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 25 N0))
         (Eq false (Eq 36 N0))
         (Eq false (Eq 49 N0))
         (Eq false (Eq 64 N0))
         (Eq false (Eq 81 N0))
         (Eq false (Eq 100 N0))]
        false)


Test case: test000015
[Parsed from .ktest]
var n int 100
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv25 32) ?B1 ) ) ) (=  false (=  (_ bv36 32) ?B1 ) ) ) (=  false (=  (_ bv49 32) ?B1 ) ) ) (=  false (=  (_ bv64 32) ?B1 ) ) ) (=  false (=  (_ bv81 32) ?B1 ) ) ) (=  (_ bv100 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 25 N0))
         (Eq false (Eq 36 N0))
         (Eq false (Eq 49 N0))
         (Eq false (Eq 64 N0))
         (Eq false (Eq 81 N0))
         (Eq 100 N0)]
        false)


Test case: test000016
[Parsed from .ktest]
var n int 71
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv25 32) ?B1 ) ) ) (=  false (=  (_ bv36 32) ?B1 ) ) ) (=  false (=  (_ bv49 32) ?B1 ) ) ) (=  false (=  (_ bv64 32) ?B1 ) ) ) (=  false (=  (_ bv81 32) ?B1 ) ) ) (=  false (=  (_ bv100 32) ?B1 ) ) ) (bvslt  (_ bv100 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 25 N0))
         (Eq false (Eq 36 N0))
         (Eq false (Eq 49 N0))
         (Eq false (Eq 64 N0))
         (Eq false (Eq 81 N0))
         (Eq false (Eq 100 N0))
         (Slt 100 N0)]
        false)


--- Program 90 ---
critical path is: test000007.kquery

[critical path content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false
             (Slt N0 1))
         (Eq false
             (Slt N0 8))
         (Eq false
             (Slt N0 27))
         (Eq false
             (Slt N0 64))
         (Slt N0 125)]
        false)


Test case: test000001
[Parsed from .ktest]
var n int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 n)))]
        false)


Test case: test000002
[Parsed from .ktest]
var n int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  (_ bv0 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq 0 N0)]
        false)


Test case: test000003
[Parsed from .ktest]
var n int 1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (bvslt  ?B1 (_ bv8 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Slt N0 8)]
        false)


Test case: test000004
[Parsed from .ktest]
var n int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (bvslt  ?B1 (_ bv8 32) ) ) ) (=  false (bvslt  ?B1 (_ bv27 32) ) ) ) (bvslt  ?B1 (_ bv64 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false
             (Slt N0 8))
         (Eq false
             (Slt N0 27))
         (Slt N0 64)]
        false)


Test case: test000005
[Parsed from .ktest]
var n int 32
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (bvslt  ?B1 (_ bv8 32) ) ) ) (bvslt  ?B1 (_ bv27 32) ) ) (=  false (bvslt  ?B1 (_ bv64 32) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false
             (Slt N0 8))
         (Slt N0 27)
         (Eq false
             (Slt N0 64))]
        false)


Test case: test000006
[Parsed from .ktest]
var n int 27
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (bvslt  ?B1 (_ bv8 32) ) ) ) (=  false (bvslt  ?B1 (_ bv27 32) ) ) (=  (_ bv64 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false
             (Slt N0 8))
         (Eq false
             (Slt N0 27))
         (Eq 64 N0)]
        false)


Test case: test000007
[Parsed from .ktest]
var n int 100
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (bvslt  ?B1 (_ bv8 32) ) ) ) (=  false (bvslt  ?B1 (_ bv27 32) ) ) ) (=  false (bvslt  ?B1 (_ bv64 32) ) ) ) (=  false (=  (_ bv64 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false (Eq 0 N0))
         (Eq false
             (Slt N0 8))
         (Eq false
             (Slt N0 27))
         (Eq false
             (Slt N0 64))
         (Eq false (Eq 64 N0))]
        false)


--- Program 91 ---
critical path is: test000007.kquery

[critical path content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Slt 0 (SDiv w32 N0 5))
         (Slt 0 (SDiv w32 N0 25))
         (Slt 0 (SDiv w32 N0 125))]
        false)


Test case: test000001
[Parsed from .ktest]
var n int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 n)))]
        false)


Test case: test000002
[Parsed from .ktest]
var n int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv5 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Eq false
             (Slt 0 (SDiv w32 N0 5)))]
        false)


Test case: test000003
[Parsed from .ktest]
var n int 5
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv5 32) ) ) ) (=  false (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv25 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Slt 0 (SDiv w32 N0 5))
         (Eq false
             (Slt 0 (SDiv w32 N0 25)))]
        false)


Test case: test000004
[Parsed from .ktest]
var n int 25
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv25 32) ) ) ) (=  false (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv125 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Slt 0 (SDiv w32 N0 5))
         (Slt 0 (SDiv w32 N0 25))
         (Eq false
             (Slt 0 (SDiv w32 N0 125)))]
        false)


Test case: test000005
[Parsed from .ktest]
var n int 10900
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) (_ bv100 32) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle (ReadLSB w32 0 n) 100))]
        false)


Test case: test000006
[Parsed from .ktest]
var n int 30
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv5 32) ) ) ) (=  false (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv25 32) ) ) ) ) (=  false (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv125 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Slt 0 (SDiv w32 N0 5))
         (Eq false
             (Slt 0 (SDiv w32 N0 25)))
         (Eq false
             (Slt 0 (SDiv w32 N0 125)))]
        false)


Test case: test000007
[Parsed from .ktest]
var n int 100
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv25 32) ) ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv125 32) ) ) ) (=  false (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv625 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Slt 0 (SDiv w32 N0 5))
         (Slt 0 (SDiv w32 N0 25))
         (Slt 0 (SDiv w32 N0 125))
         (Eq false
             (Slt 0 (SDiv w32 N0 625)))]
        false)


Test case: test000008
[Parsed from .ktest]
var n int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv25 32) ) ) ) (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv125 32) ) ) ) (=  false (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv625 32) ) ) ) ) (=  false (bvslt  (_ bv0 32) (bvsdiv  ?B1 (_ bv3125 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 100)
         (Slt 0 (SDiv w32 N0 5))
         (Slt 0 (SDiv w32 N0 25))
         (Slt 0 (SDiv w32 N0 125))
         (Eq false
             (Slt 0 (SDiv w32 N0 625)))
         (Eq false
             (Slt 0 (SDiv w32 N0 3125)))]
        false)


--- Program 92 ---
critical path is: test000007.kquery

[critical path content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 start))
         (Sle N0 100)
         (Sle 1 N1:(ReadLSB w32 0 cycles))
         (Sle N1 10)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Eq false (Slt 3 N0))]
        false)


Test case: test000001
[Parsed from .ktest]
var cycles int 0
var start int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvslt  (_ bv0 32) (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Slt 0
                  (ReadLSB w32 0 start)))]
        false)


Test case: test000002
[Parsed from .ktest]
var cycles int 0
var start int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (=  false (bvsle  ?B1 (_ bv10 32) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 start))
         (Sle N0 100)
         (Sle 1 N1:(ReadLSB w32 0 cycles))
         (Eq false (Sle N1 10))]
        false)


Test case: test000003
[Parsed from .ktest]
var cycles int 1
var start int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (=  false (bvslt  (_ bv0 32) ?B2 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 start))
         (Sle N0 100)
         (Sle 1 N1:(ReadLSB w32 0 cycles))
         (Sle N1 10)
         (Eq false (Slt 0 N0))]
        false)


Test case: test000004
[Parsed from .ktest]
var cycles int 2
var start int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (and  (bvslt  (_ bv0 32) ?B2 ) (=  false (bvslt  (_ bv1 32) ?B2 ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 start))
         (Sle N0 100)
         (Sle 1 N1:(ReadLSB w32 0 cycles))
         (Sle N1 10)
         (Slt 0 N0)
         (Eq false (Slt 1 N0))]
        false)


Test case: test000005
[Parsed from .ktest]
var cycles int 3
var start int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv1 32) ?B2 ) ) (=  false (bvslt  (_ bv2 32) ?B2 ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 start))
         (Sle N0 100)
         (Sle 1 N1:(ReadLSB w32 0 cycles))
         (Sle N1 10)
         (Slt 0 N0)
         (Slt 1 N0)
         (Eq false (Slt 2 N0))]
        false)


Test case: test000006
[Parsed from .ktest]
var cycles int 4
var start int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv1 32) ?B2 ) ) (bvslt  (_ bv2 32) ?B2 ) ) (=  false (bvslt  (_ bv3 32) ?B2 ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 start))
         (Sle N0 100)
         (Sle 1 N1:(ReadLSB w32 0 cycles))
         (Sle N1 10)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Eq false (Slt 3 N0))]
        false)


Test case: test000007
[Parsed from .ktest]
var cycles int 5
var start int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv1 32) ?B2 ) ) (bvslt  (_ bv2 32) ?B2 ) ) (bvslt  (_ bv3 32) ?B2 ) ) (=  false (bvslt  (_ bv4 32) ?B2 ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 start))
         (Sle N0 100)
         (Sle 1 N1:(ReadLSB w32 0 cycles))
         (Sle N1 10)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Eq false (Slt 4 N0))]
        false)


Test case: test000008
[Parsed from .ktest]
var cycles int 6
var start int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv1 32) ?B2 ) ) (bvslt  (_ bv2 32) ?B2 ) ) (bvslt  (_ bv3 32) ?B2 ) ) (bvslt  (_ bv4 32) ?B2 ) ) (=  false (bvslt  (_ bv5 32) ?B2 ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 start))
         (Sle N0 100)
         (Sle 1 N1:(ReadLSB w32 0 cycles))
         (Sle N1 10)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Eq false (Slt 5 N0))]
        false)


Test case: test000009
[Parsed from .ktest]
var cycles int 7
var start int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (and  (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv1 32) ?B2 ) ) (bvslt  (_ bv2 32) ?B2 ) ) (bvslt  (_ bv3 32) ?B2 ) ) (bvslt  (_ bv4 32) ?B2 ) ) (bvslt  (_ bv5 32) ?B2 ) ) (=  false (bvslt  (_ bv6 32) ?B2 ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 start))
         (Sle N0 100)
         (Sle 1 N1:(ReadLSB w32 0 cycles))
         (Sle N1 10)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Eq false (Slt 6 N0))]
        false)


Test case: test000010
[Parsed from .ktest]
var cycles int 8
var start int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv1 32) ?B2 ) ) (bvslt  (_ bv2 32) ?B2 ) ) (bvslt  (_ bv3 32) ?B2 ) ) (bvslt  (_ bv4 32) ?B2 ) ) (bvslt  (_ bv5 32) ?B2 ) ) (bvslt  (_ bv6 32) ?B2 ) ) (=  false (bvslt  (_ bv7 32) ?B2 ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 start))
         (Sle N0 100)
         (Sle 1 N1:(ReadLSB w32 0 cycles))
         (Sle N1 10)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Eq false (Slt 7 N0))]
        false)


Test case: test000011
[Parsed from .ktest]
var cycles int 9
var start int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv1 32) ?B2 ) ) (bvslt  (_ bv2 32) ?B2 ) ) (bvslt  (_ bv3 32) ?B2 ) ) (bvslt  (_ bv4 32) ?B2 ) ) (bvslt  (_ bv5 32) ?B2 ) ) (bvslt  (_ bv6 32) ?B2 ) ) (bvslt  (_ bv7 32) ?B2 ) ) (=  false (bvslt  (_ bv8 32) ?B2 ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 start))
         (Sle N0 100)
         (Sle 1 N1:(ReadLSB w32 0 cycles))
         (Sle N1 10)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Eq false (Slt 8 N0))]
        false)


Test case: test000012
[Parsed from .ktest]
var cycles int 10
var start int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvslt  (_ bv1 32) ?B2 ) ) (bvslt  (_ bv2 32) ?B2 ) ) (bvslt  (_ bv3 32) ?B2 ) ) (bvslt  (_ bv4 32) ?B2 ) ) (bvslt  (_ bv5 32) ?B2 ) ) (bvslt  (_ bv6 32) ?B2 ) ) (bvslt  (_ bv7 32) ?B2 ) ) (bvslt  (_ bv8 32) ?B2 ) ) (=  false (bvslt  (_ bv9 32) ?B2 ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 start))
         (Sle N0 100)
         (Sle 1 N1:(ReadLSB w32 0 cycles))
         (Sle N1 10)
         (Slt 0 N0)
         (Slt 1 N0)
         (Slt 2 N0)
         (Slt 3 N0)
         (Slt 4 N0)
         (Slt 5 N0)
         (Slt 6 N0)
         (Slt 7 N0)
         (Slt 8 N0)
         (Eq false (Slt 9 N0))]
        false)


Test case: test000013
[Parsed from .ktest]
var cycles int 0
var start int 100
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun cycles () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun start () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  cycles (_ bv3 32) ) (concat  (select  cycles (_ bv2 32) ) (concat  (select  cycles (_ bv1 32) ) (select  cycles (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  start (_ bv3 32) ) (concat  (select  start (_ bv2 32) ) (concat  (select  start (_ bv1 32) ) (select  start (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvslt  (_ bv0 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv1 32) ?B1 ) ) (bvsle  ?B1 (_ bv10 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array cycles[4] : w32 -> w8 = symbolic
array start[4] : w32 -> w8 = symbolic
(query [(Slt 0
              N0:(ReadLSB w32 0 start))
         (Sle N0 100)
         (Sle 1 N1:(ReadLSB w32 0 cycles))
         (Sle N1 10)]
        false)


--- Program 93 ---
critical path is: test000007.kquery

[critical path content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Sle N0 N3:(Sub w32 N2 N0))
         (Eq false
             (Sle N0 (Sub w32 N3 N0)))]
        false)


Test case: test000001
[Parsed from .ktest]
var dividend int 0
var divisor int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv1 32) (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 1
                  (ReadLSB w32 0 divisor)))]
        false)


Test case: test000002
[Parsed from .ktest]
var dividend int -1
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv100 32) ) ) (=  false (bvsle  (_ bv0 32) (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Eq false
             (Sle 0
                  (ReadLSB w32 0 dividend)))]
        false)


Test case: test000003
[Parsed from .ktest]
var dividend int 0
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (=  false (bvsle  ?B2 ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Eq false (Sle N0 N1))]
        false)


Test case: test000004
[Parsed from .ktest]
var dividend int 64
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (=  false (bvsle  ?B2 ?B3 ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Eq false
             (Sle N0 (Sub w32 N1 N0)))]
        false)


Test case: test000005
[Parsed from .ktest]
var dividend int 128
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B2 ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (bvsle  ?B2 ?B3 ) ) (=  false (bvsle  ?B2 ?B4 ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Eq false
             (Sle N0 (Sub w32 N2 N0)))]
        false)


Test case: test000006
[Parsed from .ktest]
var dividend int 192
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B2 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B2 ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (bvsle  ?B2 ?B3 ) ) (bvsle  ?B2 ?B4 ) ) (=  false (bvsle  ?B2 ?B5 ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Sle N0 N3:(Sub w32 N2 N0))
         (Eq false
             (Sle N0 (Sub w32 N3 N0)))]
        false)


Test case: test000007
[Parsed from .ktest]
var dividend int 256
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B2 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B2 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B2 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (bvsle  ?B2 ?B3 ) ) (bvsle  ?B2 ?B4 ) ) (bvsle  ?B2 ?B5 ) ) (=  false (bvsle  ?B2 ?B6 ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Sle N0 N3:(Sub w32 N2 N0))
         (Sle N0 N4:(Sub w32 N3 N0))
         (Eq false
             (Sle N0 (Sub w32 N4 N0)))]
        false)


Test case: test000008
[Parsed from .ktest]
var dividend int 320
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B2 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B2 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B2 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B2 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (bvsle  ?B2 ?B3 ) ) (bvsle  ?B2 ?B4 ) ) (bvsle  ?B2 ?B5 ) ) (bvsle  ?B2 ?B6 ) ) (=  false (bvsle  ?B2 ?B7 ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Sle N0 N3:(Sub w32 N2 N0))
         (Sle N0 N4:(Sub w32 N3 N0))
         (Sle N0 N5:(Sub w32 N4 N0))
         (Eq false
             (Sle N0 (Sub w32 N5 N0)))]
        false)


Test case: test000009
[Parsed from .ktest]
var dividend int 384
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B2 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B2 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B2 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B2 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B2 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (bvsle  ?B2 ?B3 ) ) (bvsle  ?B2 ?B4 ) ) (bvsle  ?B2 ?B5 ) ) (bvsle  ?B2 ?B6 ) ) (bvsle  ?B2 ?B7 ) ) (=  false (bvsle  ?B2 ?B8 ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Sle N0 N3:(Sub w32 N2 N0))
         (Sle N0 N4:(Sub w32 N3 N0))
         (Sle N0 N5:(Sub w32 N4 N0))
         (Sle N0 N6:(Sub w32 N5 N0))
         (Eq false
             (Sle N0 (Sub w32 N6 N0)))]
        false)


Test case: test000010
[Parsed from .ktest]
var dividend int 448
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B2 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B2 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B2 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B2 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B2 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B2 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (bvsle  ?B2 ?B3 ) ) (bvsle  ?B2 ?B4 ) ) (bvsle  ?B2 ?B5 ) ) (bvsle  ?B2 ?B6 ) ) (bvsle  ?B2 ?B7 ) ) (bvsle  ?B2 ?B8 ) ) (=  false (bvsle  ?B2 ?B9 ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Sle N0 N3:(Sub w32 N2 N0))
         (Sle N0 N4:(Sub w32 N3 N0))
         (Sle N0 N5:(Sub w32 N4 N0))
         (Sle N0 N6:(Sub w32 N5 N0))
         (Sle N0 N7:(Sub w32 N6 N0))
         (Eq false
             (Sle N0 (Sub w32 N7 N0)))]
        false)


Test case: test000011
[Parsed from .ktest]
var dividend int 512
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B2 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B2 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B2 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B2 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B2 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B2 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B2 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (bvsle  ?B2 ?B3 ) ) (bvsle  ?B2 ?B4 ) ) (bvsle  ?B2 ?B5 ) ) (bvsle  ?B2 ?B6 ) ) (bvsle  ?B2 ?B7 ) ) (bvsle  ?B2 ?B8 ) ) (bvsle  ?B2 ?B9 ) ) (=  false (bvsle  ?B2 ?B10 ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Sle N0 N3:(Sub w32 N2 N0))
         (Sle N0 N4:(Sub w32 N3 N0))
         (Sle N0 N5:(Sub w32 N4 N0))
         (Sle N0 N6:(Sub w32 N5 N0))
         (Sle N0 N7:(Sub w32 N6 N0))
         (Sle N0 N8:(Sub w32 N7 N0))
         (Eq false
             (Sle N0 (Sub w32 N8 N0)))]
        false)


Test case: test000012
[Parsed from .ktest]
var dividend int 576
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B2 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B2 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B2 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B2 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B2 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B2 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B2 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B2 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (bvsle  ?B2 ?B3 ) ) (bvsle  ?B2 ?B4 ) ) (bvsle  ?B2 ?B5 ) ) (bvsle  ?B2 ?B6 ) ) (bvsle  ?B2 ?B7 ) ) (bvsle  ?B2 ?B8 ) ) (bvsle  ?B2 ?B9 ) ) (bvsle  ?B2 ?B10 ) ) (=  false (bvsle  ?B2 ?B11 ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Sle N0 N3:(Sub w32 N2 N0))
         (Sle N0 N4:(Sub w32 N3 N0))
         (Sle N0 N5:(Sub w32 N4 N0))
         (Sle N0 N6:(Sub w32 N5 N0))
         (Sle N0 N7:(Sub w32 N6 N0))
         (Sle N0 N8:(Sub w32 N7 N0))
         (Sle N0 N9:(Sub w32 N8 N0))
         (Eq false
             (Sle N0 (Sub w32 N9 N0)))]
        false)


Test case: test000013
[Parsed from .ktest]
var dividend int 640
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B2 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B2 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B2 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B2 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B2 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B2 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B2 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B2 ) ) ) (let ( (?B12 (bvsub  ?B11 ?B2 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (bvsle  ?B2 ?B3 ) ) (bvsle  ?B2 ?B4 ) ) (bvsle  ?B2 ?B5 ) ) (bvsle  ?B2 ?B6 ) ) (bvsle  ?B2 ?B7 ) ) (bvsle  ?B2 ?B8 ) ) (bvsle  ?B2 ?B9 ) ) (bvsle  ?B2 ?B10 ) ) (bvsle  ?B2 ?B11 ) ) (=  false (bvsle  ?B2 ?B12 ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Sle N0 N3:(Sub w32 N2 N0))
         (Sle N0 N4:(Sub w32 N3 N0))
         (Sle N0 N5:(Sub w32 N4 N0))
         (Sle N0 N6:(Sub w32 N5 N0))
         (Sle N0 N7:(Sub w32 N6 N0))
         (Sle N0 N8:(Sub w32 N7 N0))
         (Sle N0 N9:(Sub w32 N8 N0))
         (Sle N0 N10:(Sub w32 N9 N0))
         (Eq false
             (Sle N0 (Sub w32 N10 N0)))]
        false)


Test case: test000014
[Parsed from .ktest]
var dividend int 704
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B2 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B2 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B2 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B2 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B2 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B2 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B2 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B2 ) ) ) (let ( (?B12 (bvsub  ?B11 ?B2 ) ) ) (let ( (?B13 (bvsub  ?B12 ?B2 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (bvsle  ?B2 ?B3 ) ) (bvsle  ?B2 ?B4 ) ) (bvsle  ?B2 ?B5 ) ) (bvsle  ?B2 ?B6 ) ) (bvsle  ?B2 ?B7 ) ) (bvsle  ?B2 ?B8 ) ) (bvsle  ?B2 ?B9 ) ) (bvsle  ?B2 ?B10 ) ) (bvsle  ?B2 ?B11 ) ) (bvsle  ?B2 ?B12 ) ) (=  false (bvsle  ?B2 ?B13 ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Sle N0 N3:(Sub w32 N2 N0))
         (Sle N0 N4:(Sub w32 N3 N0))
         (Sle N0 N5:(Sub w32 N4 N0))
         (Sle N0 N6:(Sub w32 N5 N0))
         (Sle N0 N7:(Sub w32 N6 N0))
         (Sle N0 N8:(Sub w32 N7 N0))
         (Sle N0 N9:(Sub w32 N8 N0))
         (Sle N0 N10:(Sub w32 N9 N0))
         (Sle N0 N11:(Sub w32 N10 N0))
         (Eq false
             (Sle N0 (Sub w32 N11 N0)))]
        false)


Test case: test000015
[Parsed from .ktest]
var dividend int 768
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B2 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B2 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B2 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B2 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B2 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B2 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B2 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B2 ) ) ) (let ( (?B12 (bvsub  ?B11 ?B2 ) ) ) (let ( (?B13 (bvsub  ?B12 ?B2 ) ) ) (let ( (?B14 (bvsub  ?B13 ?B2 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (bvsle  ?B2 ?B3 ) ) (bvsle  ?B2 ?B4 ) ) (bvsle  ?B2 ?B5 ) ) (bvsle  ?B2 ?B6 ) ) (bvsle  ?B2 ?B7 ) ) (bvsle  ?B2 ?B8 ) ) (bvsle  ?B2 ?B9 ) ) (bvsle  ?B2 ?B10 ) ) (bvsle  ?B2 ?B11 ) ) (bvsle  ?B2 ?B12 ) ) (bvsle  ?B2 ?B13 ) ) (=  false (bvsle  ?B2 ?B14 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Sle N0 N3:(Sub w32 N2 N0))
         (Sle N0 N4:(Sub w32 N3 N0))
         (Sle N0 N5:(Sub w32 N4 N0))
         (Sle N0 N6:(Sub w32 N5 N0))
         (Sle N0 N7:(Sub w32 N6 N0))
         (Sle N0 N8:(Sub w32 N7 N0))
         (Sle N0 N9:(Sub w32 N8 N0))
         (Sle N0 N10:(Sub w32 N9 N0))
         (Sle N0 N11:(Sub w32 N10 N0))
         (Sle N0 N12:(Sub w32 N11 N0))
         (Eq false
             (Sle N0 (Sub w32 N12 N0)))]
        false)


Test case: test000016
[Parsed from .ktest]
var dividend int 832
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B2 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B2 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B2 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B2 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B2 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B2 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B2 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B2 ) ) ) (let ( (?B12 (bvsub  ?B11 ?B2 ) ) ) (let ( (?B13 (bvsub  ?B12 ?B2 ) ) ) (let ( (?B14 (bvsub  ?B13 ?B2 ) ) ) (let ( (?B15 (bvsub  ?B14 ?B2 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (bvsle  ?B2 ?B3 ) ) (bvsle  ?B2 ?B4 ) ) (bvsle  ?B2 ?B5 ) ) (bvsle  ?B2 ?B6 ) ) (bvsle  ?B2 ?B7 ) ) (bvsle  ?B2 ?B8 ) ) (bvsle  ?B2 ?B9 ) ) (bvsle  ?B2 ?B10 ) ) (bvsle  ?B2 ?B11 ) ) (bvsle  ?B2 ?B12 ) ) (bvsle  ?B2 ?B13 ) ) (bvsle  ?B2 ?B14 ) ) (=  false (bvsle  ?B2 ?B15 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Sle N0 N3:(Sub w32 N2 N0))
         (Sle N0 N4:(Sub w32 N3 N0))
         (Sle N0 N5:(Sub w32 N4 N0))
         (Sle N0 N6:(Sub w32 N5 N0))
         (Sle N0 N7:(Sub w32 N6 N0))
         (Sle N0 N8:(Sub w32 N7 N0))
         (Sle N0 N9:(Sub w32 N8 N0))
         (Sle N0 N10:(Sub w32 N9 N0))
         (Sle N0 N11:(Sub w32 N10 N0))
         (Sle N0 N12:(Sub w32 N11 N0))
         (Sle N0 N13:(Sub w32 N12 N0))
         (Eq false
             (Sle N0 (Sub w32 N13 N0)))]
        false)


Test case: test000017
[Parsed from .ktest]
var dividend int 896
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B2 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B2 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B2 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B2 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B2 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B2 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B2 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B2 ) ) ) (let ( (?B12 (bvsub  ?B11 ?B2 ) ) ) (let ( (?B13 (bvsub  ?B12 ?B2 ) ) ) (let ( (?B14 (bvsub  ?B13 ?B2 ) ) ) (let ( (?B15 (bvsub  ?B14 ?B2 ) ) ) (let ( (?B16 (bvsub  ?B15 ?B2 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (bvsle  ?B2 ?B3 ) ) (bvsle  ?B2 ?B4 ) ) (bvsle  ?B2 ?B5 ) ) (bvsle  ?B2 ?B6 ) ) (bvsle  ?B2 ?B7 ) ) (bvsle  ?B2 ?B8 ) ) (bvsle  ?B2 ?B9 ) ) (bvsle  ?B2 ?B10 ) ) (bvsle  ?B2 ?B11 ) ) (bvsle  ?B2 ?B12 ) ) (bvsle  ?B2 ?B13 ) ) (bvsle  ?B2 ?B14 ) ) (bvsle  ?B2 ?B15 ) ) (=  false (bvsle  ?B2 ?B16 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Sle N0 N3:(Sub w32 N2 N0))
         (Sle N0 N4:(Sub w32 N3 N0))
         (Sle N0 N5:(Sub w32 N4 N0))
         (Sle N0 N6:(Sub w32 N5 N0))
         (Sle N0 N7:(Sub w32 N6 N0))
         (Sle N0 N8:(Sub w32 N7 N0))
         (Sle N0 N9:(Sub w32 N8 N0))
         (Sle N0 N10:(Sub w32 N9 N0))
         (Sle N0 N11:(Sub w32 N10 N0))
         (Sle N0 N12:(Sub w32 N11 N0))
         (Sle N0 N13:(Sub w32 N12 N0))
         (Sle N0 N14:(Sub w32 N13 N0))
         (Eq false
             (Sle N0 (Sub w32 N14 N0)))]
        false)


Test case: test000018
[Parsed from .ktest]
var dividend int 960
var divisor int 64
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B2 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B2 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B2 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B2 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B2 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B2 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B2 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B2 ) ) ) (let ( (?B12 (bvsub  ?B11 ?B2 ) ) ) (let ( (?B13 (bvsub  ?B12 ?B2 ) ) ) (let ( (?B14 (bvsub  ?B13 ?B2 ) ) ) (let ( (?B15 (bvsub  ?B14 ?B2 ) ) ) (let ( (?B16 (bvsub  ?B15 ?B2 ) ) ) (let ( (?B17 (bvsub  ?B16 ?B2 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (bvsle  ?B2 ?B3 ) ) (bvsle  ?B2 ?B4 ) ) (bvsle  ?B2 ?B5 ) ) (bvsle  ?B2 ?B6 ) ) (bvsle  ?B2 ?B7 ) ) (bvsle  ?B2 ?B8 ) ) (bvsle  ?B2 ?B9 ) ) (bvsle  ?B2 ?B10 ) ) (bvsle  ?B2 ?B11 ) ) (bvsle  ?B2 ?B12 ) ) (bvsle  ?B2 ?B13 ) ) (bvsle  ?B2 ?B14 ) ) (bvsle  ?B2 ?B15 ) ) (bvsle  ?B2 ?B16 ) ) (=  false (bvsle  ?B2 ?B17 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Sle N0 N3:(Sub w32 N2 N0))
         (Sle N0 N4:(Sub w32 N3 N0))
         (Sle N0 N5:(Sub w32 N4 N0))
         (Sle N0 N6:(Sub w32 N5 N0))
         (Sle N0 N7:(Sub w32 N6 N0))
         (Sle N0 N8:(Sub w32 N7 N0))
         (Sle N0 N9:(Sub w32 N8 N0))
         (Sle N0 N10:(Sub w32 N9 N0))
         (Sle N0 N11:(Sub w32 N10 N0))
         (Sle N0 N12:(Sub w32 N11 N0))
         (Sle N0 N13:(Sub w32 N12 N0))
         (Sle N0 N14:(Sub w32 N13 N0))
         (Sle N0 N15:(Sub w32 N14 N0))
         (Eq false
             (Sle N0 (Sub w32 N15 N0)))]
        false)


Test case: test000019
[Parsed from .ktest]
var dividend int 0
var divisor int 100
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (=  false (bvsle  ?B2 ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Eq false (Sle N0 N1))]
        false)


Test case: test000020
[Parsed from .ktest]
var dividend int 1000
var divisor int 100
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun dividend () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun divisor () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  dividend (_ bv3 32) ) (concat  (select  dividend (_ bv2 32) ) (concat  (select  dividend (_ bv1 32) ) (select  dividend (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  divisor (_ bv3 32) ) (concat  (select  divisor (_ bv2 32) ) (concat  (select  divisor (_ bv1 32) ) (select  divisor (_ bv0 32) ) ) ) ) ) ) (let ( (?B3 (bvsub  ?B1 ?B2 ) ) ) (let ( (?B4 (bvsub  ?B3 ?B2 ) ) ) (let ( (?B5 (bvsub  ?B4 ?B2 ) ) ) (let ( (?B6 (bvsub  ?B5 ?B2 ) ) ) (let ( (?B7 (bvsub  ?B6 ?B2 ) ) ) (let ( (?B8 (bvsub  ?B7 ?B2 ) ) ) (let ( (?B9 (bvsub  ?B8 ?B2 ) ) ) (let ( (?B10 (bvsub  ?B9 ?B2 ) ) ) (let ( (?B11 (bvsub  ?B10 ?B2 ) ) ) (let ( (?B12 (bvsub  ?B11 ?B2 ) ) ) (let ( (?B13 (bvsub  ?B12 ?B2 ) ) ) (let ( (?B14 (bvsub  ?B13 ?B2 ) ) ) (let ( (?B15 (bvsub  ?B14 ?B2 ) ) ) (let ( (?B16 (bvsub  ?B15 ?B2 ) ) ) (let ( (?B17 (bvsub  ?B16 ?B2 ) ) ) (let ( (?B18 (bvsub  ?B17 ?B2 ) ) ) (let ( (?B19 (bvsub  ?B18 ?B2 ) ) ) (let ( (?B20 (bvsub  ?B19 ?B2 ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B2 ) (bvsle  ?B2 (_ bv100 32) ) ) (bvsle  (_ bv0 32) ?B1 ) ) (bvsle  ?B1 (_ bv1000 32) ) ) (bvsle  ?B2 ?B1 ) ) (bvsle  ?B2 ?B3 ) ) (bvsle  ?B2 ?B4 ) ) (bvsle  ?B2 ?B5 ) ) (bvsle  ?B2 ?B6 ) ) (bvsle  ?B2 ?B7 ) ) (bvsle  ?B2 ?B8 ) ) (bvsle  ?B2 ?B9 ) ) (bvsle  ?B2 ?B10 ) ) (bvsle  ?B2 ?B11 ) ) (bvsle  ?B2 ?B12 ) ) (bvsle  ?B2 ?B13 ) ) (bvsle  ?B2 ?B14 ) ) (bvsle  ?B2 ?B15 ) ) (bvsle  ?B2 ?B16 ) ) (bvsle  ?B2 ?B17 ) ) (bvsle  ?B2 ?B18 ) ) (bvsle  ?B2 ?B19 ) ) (=  false (bvsle  ?B2 ?B20 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array dividend[4] : w32 -> w8 = symbolic
array divisor[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 divisor))
         (Sle N0 100)
         (Sle 0
              N1:(ReadLSB w32 0 dividend))
         (Sle N1 1000)
         (Sle N0 N1)
         (Sle N0 N2:(Sub w32 N1 N0))
         (Sle N0 N3:(Sub w32 N2 N0))
         (Sle N0 N4:(Sub w32 N3 N0))
         (Sle N0 N5:(Sub w32 N4 N0))
         (Sle N0 N6:(Sub w32 N5 N0))
         (Sle N0 N7:(Sub w32 N6 N0))
         (Sle N0 N8:(Sub w32 N7 N0))
         (Sle N0 N9:(Sub w32 N8 N0))
         (Sle N0 N10:(Sub w32 N9 N0))
         (Sle N0 N11:(Sub w32 N10 N0))
         (Sle N0 N12:(Sub w32 N11 N0))
         (Sle N0 N13:(Sub w32 N12 N0))
         (Sle N0 N14:(Sub w32 N13 N0))
         (Sle N0 N15:(Sub w32 N14 N0))
         (Sle N0 N16:(Sub w32 N15 N0))
         (Sle N0 N17:(Sub w32 N16 N0))
         (Sle N0 N18:(Sub w32 N17 N0))
         (Sle N0 N19:(Sub w32 N18 N0))
         (Eq false
             (Sle N0 (Sub w32 N19 N0)))]
        false)


--- Program 94 ---
critical path is: test000016.smt2

[critical path content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv7 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv8 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv9 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv10 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv11 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv12 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv13 32) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000001
[Parsed from .ktest]
var n int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 n)))]
        false)


Test case: test000002
[Parsed from .ktest]
var n int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvslt  (_ bv0 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Slt 0 N0))]
        false)


Test case: test000003
[Parsed from .ktest]
var n int 1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Eq false
             (Slt 1 (Sub w32 N0 1)))]
        false)


Test case: test000004
[Parsed from .ktest]
var n int 2
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Eq false
             (Slt 1 (Sub w32 N0 2)))]
        false)


Test case: test000005
[Parsed from .ktest]
var n int 3
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Eq false
             (Slt 1 (Sub w32 N0 3)))]
        false)


Test case: test000006
[Parsed from .ktest]
var n int 4
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Eq false
             (Slt 1 (Sub w32 N0 4)))]
        false)


Test case: test000007
[Parsed from .ktest]
var n int 5
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Eq false
             (Slt 1 (Sub w32 N0 5)))]
        false)


Test case: test000008
[Parsed from .ktest]
var n int 6
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Slt 1 (Sub w32 N0 5))
         (Eq false
             (Slt 1 (Sub w32 N0 6)))]
        false)


Test case: test000009
[Parsed from .ktest]
var n int 7
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv7 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Slt 1 (Sub w32 N0 5))
         (Slt 1 (Sub w32 N0 6))
         (Eq false
             (Slt 1 (Sub w32 N0 7)))]
        false)


Test case: test000010
[Parsed from .ktest]
var n int 8
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv7 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv8 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Slt 1 (Sub w32 N0 5))
         (Slt 1 (Sub w32 N0 6))
         (Slt 1 (Sub w32 N0 7))
         (Eq false
             (Slt 1 (Sub w32 N0 8)))]
        false)


Test case: test000011
[Parsed from .ktest]
var n int 9
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv7 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv8 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv9 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Slt 1 (Sub w32 N0 5))
         (Slt 1 (Sub w32 N0 6))
         (Slt 1 (Sub w32 N0 7))
         (Slt 1 (Sub w32 N0 8))
         (Eq false
             (Slt 1 (Sub w32 N0 9)))]
        false)


Test case: test000012
[Parsed from .ktest]
var n int 10
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv7 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv8 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv9 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv10 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Slt 1 (Sub w32 N0 5))
         (Slt 1 (Sub w32 N0 6))
         (Slt 1 (Sub w32 N0 7))
         (Slt 1 (Sub w32 N0 8))
         (Slt 1 (Sub w32 N0 9))
         (Eq false
             (Slt 1 (Sub w32 N0 10)))]
        false)


Test case: test000013
[Parsed from .ktest]
var n int 11
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv7 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv8 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv9 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv10 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv11 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Slt 1 (Sub w32 N0 5))
         (Slt 1 (Sub w32 N0 6))
         (Slt 1 (Sub w32 N0 7))
         (Slt 1 (Sub w32 N0 8))
         (Slt 1 (Sub w32 N0 9))
         (Slt 1 (Sub w32 N0 10))
         (Eq false
             (Slt 1 (Sub w32 N0 11)))]
        false)


Test case: test000014
[Parsed from .ktest]
var n int 12
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv7 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv8 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv9 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv10 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv11 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv12 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Slt 1 (Sub w32 N0 5))
         (Slt 1 (Sub w32 N0 6))
         (Slt 1 (Sub w32 N0 7))
         (Slt 1 (Sub w32 N0 8))
         (Slt 1 (Sub w32 N0 9))
         (Slt 1 (Sub w32 N0 10))
         (Slt 1 (Sub w32 N0 11))
         (Eq false
             (Slt 1 (Sub w32 N0 12)))]
        false)


Test case: test000015
[Parsed from .ktest]
var n int 13
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv7 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv8 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv9 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv10 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv11 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv12 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv13 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Slt 1 (Sub w32 N0 5))
         (Slt 1 (Sub w32 N0 6))
         (Slt 1 (Sub w32 N0 7))
         (Slt 1 (Sub w32 N0 8))
         (Slt 1 (Sub w32 N0 9))
         (Slt 1 (Sub w32 N0 10))
         (Slt 1 (Sub w32 N0 11))
         (Slt 1 (Sub w32 N0 12))
         (Eq false
             (Slt 1 (Sub w32 N0 13)))]
        false)


Test case: test000016
[Parsed from .ktest]
var n int 14
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv7 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv8 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv9 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv10 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv11 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv12 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv13 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv14 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Slt 1 (Sub w32 N0 5))
         (Slt 1 (Sub w32 N0 6))
         (Slt 1 (Sub w32 N0 7))
         (Slt 1 (Sub w32 N0 8))
         (Slt 1 (Sub w32 N0 9))
         (Slt 1 (Sub w32 N0 10))
         (Slt 1 (Sub w32 N0 11))
         (Slt 1 (Sub w32 N0 12))
         (Slt 1 (Sub w32 N0 13))
         (Eq false
             (Slt 1 (Sub w32 N0 14)))]
        false)


Test case: test000017
[Parsed from .ktest]
var n int 15
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv7 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv8 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv9 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv10 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv11 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv12 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv13 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv14 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv15 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Slt 1 (Sub w32 N0 5))
         (Slt 1 (Sub w32 N0 6))
         (Slt 1 (Sub w32 N0 7))
         (Slt 1 (Sub w32 N0 8))
         (Slt 1 (Sub w32 N0 9))
         (Slt 1 (Sub w32 N0 10))
         (Slt 1 (Sub w32 N0 11))
         (Slt 1 (Sub w32 N0 12))
         (Slt 1 (Sub w32 N0 13))
         (Slt 1 (Sub w32 N0 14))
         (Eq false
             (Slt 1 (Sub w32 N0 15)))]
        false)


Test case: test000018
[Parsed from .ktest]
var n int 16
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv7 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv8 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv9 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv10 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv11 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv12 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv13 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv14 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv15 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv16 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Slt 1 (Sub w32 N0 5))
         (Slt 1 (Sub w32 N0 6))
         (Slt 1 (Sub w32 N0 7))
         (Slt 1 (Sub w32 N0 8))
         (Slt 1 (Sub w32 N0 9))
         (Slt 1 (Sub w32 N0 10))
         (Slt 1 (Sub w32 N0 11))
         (Slt 1 (Sub w32 N0 12))
         (Slt 1 (Sub w32 N0 13))
         (Slt 1 (Sub w32 N0 14))
         (Slt 1 (Sub w32 N0 15))
         (Eq false
             (Slt 1 (Sub w32 N0 16)))]
        false)


Test case: test000019
[Parsed from .ktest]
var n int 17
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv7 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv8 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv9 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv10 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv11 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv12 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv13 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv14 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv15 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv16 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv17 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Slt 1 (Sub w32 N0 5))
         (Slt 1 (Sub w32 N0 6))
         (Slt 1 (Sub w32 N0 7))
         (Slt 1 (Sub w32 N0 8))
         (Slt 1 (Sub w32 N0 9))
         (Slt 1 (Sub w32 N0 10))
         (Slt 1 (Sub w32 N0 11))
         (Slt 1 (Sub w32 N0 12))
         (Slt 1 (Sub w32 N0 13))
         (Slt 1 (Sub w32 N0 14))
         (Slt 1 (Sub w32 N0 15))
         (Slt 1 (Sub w32 N0 16))
         (Eq false
             (Slt 1 (Sub w32 N0 17)))]
        false)


Test case: test000020
[Parsed from .ktest]
var n int 18
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv7 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv8 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv9 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv10 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv11 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv12 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv13 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv14 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv15 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv16 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv17 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv18 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Slt 1 (Sub w32 N0 5))
         (Slt 1 (Sub w32 N0 6))
         (Slt 1 (Sub w32 N0 7))
         (Slt 1 (Sub w32 N0 8))
         (Slt 1 (Sub w32 N0 9))
         (Slt 1 (Sub w32 N0 10))
         (Slt 1 (Sub w32 N0 11))
         (Slt 1 (Sub w32 N0 12))
         (Slt 1 (Sub w32 N0 13))
         (Slt 1 (Sub w32 N0 14))
         (Slt 1 (Sub w32 N0 15))
         (Slt 1 (Sub w32 N0 16))
         (Slt 1 (Sub w32 N0 17))
         (Eq false
             (Slt 1 (Sub w32 N0 18)))]
        false)


Test case: test000021
[Parsed from .ktest]
var n int 19
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv7 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv8 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv9 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv10 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv11 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv12 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv13 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv14 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv15 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv16 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv17 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv18 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv19 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Slt 1 (Sub w32 N0 5))
         (Slt 1 (Sub w32 N0 6))
         (Slt 1 (Sub w32 N0 7))
         (Slt 1 (Sub w32 N0 8))
         (Slt 1 (Sub w32 N0 9))
         (Slt 1 (Sub w32 N0 10))
         (Slt 1 (Sub w32 N0 11))
         (Slt 1 (Sub w32 N0 12))
         (Slt 1 (Sub w32 N0 13))
         (Slt 1 (Sub w32 N0 14))
         (Slt 1 (Sub w32 N0 15))
         (Slt 1 (Sub w32 N0 16))
         (Slt 1 (Sub w32 N0 17))
         (Slt 1 (Sub w32 N0 18))
         (Eq false
             (Slt 1 (Sub w32 N0 19)))]
        false)


Test case: test000022
[Parsed from .ktest]
var n int 20
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvslt  (_ bv0 32) ?B1 ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv1 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv2 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv3 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv4 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv5 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv6 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv7 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv8 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv9 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv10 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv11 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv12 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv13 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv14 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv15 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv16 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv17 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv18 32) ) ) ) (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv19 32) ) ) ) (=  false (bvslt  (_ bv1 32) (bvsub  ?B1 (_ bv20 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Slt 0 N0)
         (Slt 1 (Sub w32 N0 1))
         (Slt 1 (Sub w32 N0 2))
         (Slt 1 (Sub w32 N0 3))
         (Slt 1 (Sub w32 N0 4))
         (Slt 1 (Sub w32 N0 5))
         (Slt 1 (Sub w32 N0 6))
         (Slt 1 (Sub w32 N0 7))
         (Slt 1 (Sub w32 N0 8))
         (Slt 1 (Sub w32 N0 9))
         (Slt 1 (Sub w32 N0 10))
         (Slt 1 (Sub w32 N0 11))
         (Slt 1 (Sub w32 N0 12))
         (Slt 1 (Sub w32 N0 13))
         (Slt 1 (Sub w32 N0 14))
         (Slt 1 (Sub w32 N0 15))
         (Slt 1 (Sub w32 N0 16))
         (Slt 1 (Sub w32 N0 17))
         (Slt 1 (Sub w32 N0 18))
         (Slt 1 (Sub w32 N0 19))
         (Eq false
             (Slt 1 (Sub w32 N0 20)))]
        false)


--- Program 95 ---
critical path is: test000016.smt2

[critical path content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (=  false (bvsle  ?B1 (_ bv6 32) ) ) ) (=  false (bvsle  ?B1 (_ bv7 32) ) ) ) (=  false (bvsle  ?B1 (_ bv8 32) ) ) ) (=  false (bvsle  ?B1 (_ bv9 32) ) ) ) (=  false (bvsle  ?B1 (_ bv10 32) ) ) ) (=  false (bvsle  ?B1 (_ bv11 32) ) ) ) (=  false (bvsle  ?B1 (_ bv12 32) ) ) ) (bvsle  ?B1 (_ bv13 32) ) ) ) )
(check-sat)
(exit)


Test case: test000001
[Parsed from .ktest]
var n int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 n)))]
        false)


Test case: test000002
[Parsed from .ktest]
var n int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (bvsle  ?B1 (_ bv0 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Sle N0 0)]
        false)


Test case: test000003
[Parsed from .ktest]
var n int 1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (bvsle  ?B1 (_ bv1 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Sle N0 1)]
        false)


Test case: test000004
[Parsed from .ktest]
var n int 2
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (bvsle  ?B1 (_ bv2 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Sle N0 2)]
        false)


Test case: test000005
[Parsed from .ktest]
var n int 3
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (bvsle  ?B1 (_ bv3 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Sle N0 3)]
        false)


Test case: test000006
[Parsed from .ktest]
var n int 4
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (bvsle  ?B1 (_ bv4 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Sle N0 4)]
        false)


Test case: test000007
[Parsed from .ktest]
var n int 5
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (bvsle  ?B1 (_ bv5 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Sle N0 5)]
        false)


Test case: test000008
[Parsed from .ktest]
var n int 6
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (bvsle  ?B1 (_ bv6 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Eq false (Sle N0 5))
         (Sle N0 6)]
        false)


Test case: test000009
[Parsed from .ktest]
var n int 7
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (=  false (bvsle  ?B1 (_ bv6 32) ) ) ) (bvsle  ?B1 (_ bv7 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Eq false (Sle N0 5))
         (Eq false (Sle N0 6))
         (Sle N0 7)]
        false)


Test case: test000010
[Parsed from .ktest]
var n int 8
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (=  false (bvsle  ?B1 (_ bv6 32) ) ) ) (=  false (bvsle  ?B1 (_ bv7 32) ) ) ) (bvsle  ?B1 (_ bv8 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Eq false (Sle N0 5))
         (Eq false (Sle N0 6))
         (Eq false (Sle N0 7))
         (Sle N0 8)]
        false)


Test case: test000011
[Parsed from .ktest]
var n int 9
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (=  false (bvsle  ?B1 (_ bv6 32) ) ) ) (=  false (bvsle  ?B1 (_ bv7 32) ) ) ) (=  false (bvsle  ?B1 (_ bv8 32) ) ) ) (bvsle  ?B1 (_ bv9 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Eq false (Sle N0 5))
         (Eq false (Sle N0 6))
         (Eq false (Sle N0 7))
         (Eq false (Sle N0 8))
         (Sle N0 9)]
        false)


Test case: test000012
[Parsed from .ktest]
var n int 10
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (=  false (bvsle  ?B1 (_ bv6 32) ) ) ) (=  false (bvsle  ?B1 (_ bv7 32) ) ) ) (=  false (bvsle  ?B1 (_ bv8 32) ) ) ) (=  false (bvsle  ?B1 (_ bv9 32) ) ) ) (bvsle  ?B1 (_ bv10 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Eq false (Sle N0 5))
         (Eq false (Sle N0 6))
         (Eq false (Sle N0 7))
         (Eq false (Sle N0 8))
         (Eq false (Sle N0 9))
         (Sle N0 10)]
        false)


Test case: test000013
[Parsed from .ktest]
var n int 11
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (=  false (bvsle  ?B1 (_ bv6 32) ) ) ) (=  false (bvsle  ?B1 (_ bv7 32) ) ) ) (=  false (bvsle  ?B1 (_ bv8 32) ) ) ) (=  false (bvsle  ?B1 (_ bv9 32) ) ) ) (=  false (bvsle  ?B1 (_ bv10 32) ) ) ) (bvsle  ?B1 (_ bv11 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Eq false (Sle N0 5))
         (Eq false (Sle N0 6))
         (Eq false (Sle N0 7))
         (Eq false (Sle N0 8))
         (Eq false (Sle N0 9))
         (Eq false (Sle N0 10))
         (Sle N0 11)]
        false)


Test case: test000014
[Parsed from .ktest]
var n int 12
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (=  false (bvsle  ?B1 (_ bv6 32) ) ) ) (=  false (bvsle  ?B1 (_ bv7 32) ) ) ) (=  false (bvsle  ?B1 (_ bv8 32) ) ) ) (=  false (bvsle  ?B1 (_ bv9 32) ) ) ) (=  false (bvsle  ?B1 (_ bv10 32) ) ) ) (=  false (bvsle  ?B1 (_ bv11 32) ) ) ) (bvsle  ?B1 (_ bv12 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Eq false (Sle N0 5))
         (Eq false (Sle N0 6))
         (Eq false (Sle N0 7))
         (Eq false (Sle N0 8))
         (Eq false (Sle N0 9))
         (Eq false (Sle N0 10))
         (Eq false (Sle N0 11))
         (Sle N0 12)]
        false)


Test case: test000015
[Parsed from .ktest]
var n int 13
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (=  false (bvsle  ?B1 (_ bv6 32) ) ) ) (=  false (bvsle  ?B1 (_ bv7 32) ) ) ) (=  false (bvsle  ?B1 (_ bv8 32) ) ) ) (=  false (bvsle  ?B1 (_ bv9 32) ) ) ) (=  false (bvsle  ?B1 (_ bv10 32) ) ) ) (=  false (bvsle  ?B1 (_ bv11 32) ) ) ) (=  false (bvsle  ?B1 (_ bv12 32) ) ) ) (bvsle  ?B1 (_ bv13 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Eq false (Sle N0 5))
         (Eq false (Sle N0 6))
         (Eq false (Sle N0 7))
         (Eq false (Sle N0 8))
         (Eq false (Sle N0 9))
         (Eq false (Sle N0 10))
         (Eq false (Sle N0 11))
         (Eq false (Sle N0 12))
         (Sle N0 13)]
        false)


Test case: test000016
[Parsed from .ktest]
var n int 14
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (=  false (bvsle  ?B1 (_ bv6 32) ) ) ) (=  false (bvsle  ?B1 (_ bv7 32) ) ) ) (=  false (bvsle  ?B1 (_ bv8 32) ) ) ) (=  false (bvsle  ?B1 (_ bv9 32) ) ) ) (=  false (bvsle  ?B1 (_ bv10 32) ) ) ) (=  false (bvsle  ?B1 (_ bv11 32) ) ) ) (=  false (bvsle  ?B1 (_ bv12 32) ) ) ) (=  false (bvsle  ?B1 (_ bv13 32) ) ) ) (bvsle  ?B1 (_ bv14 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Eq false (Sle N0 5))
         (Eq false (Sle N0 6))
         (Eq false (Sle N0 7))
         (Eq false (Sle N0 8))
         (Eq false (Sle N0 9))
         (Eq false (Sle N0 10))
         (Eq false (Sle N0 11))
         (Eq false (Sle N0 12))
         (Eq false (Sle N0 13))
         (Sle N0 14)]
        false)


Test case: test000017
[Parsed from .ktest]
var n int 15
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (=  false (bvsle  ?B1 (_ bv6 32) ) ) ) (=  false (bvsle  ?B1 (_ bv7 32) ) ) ) (=  false (bvsle  ?B1 (_ bv8 32) ) ) ) (=  false (bvsle  ?B1 (_ bv9 32) ) ) ) (=  false (bvsle  ?B1 (_ bv10 32) ) ) ) (=  false (bvsle  ?B1 (_ bv11 32) ) ) ) (=  false (bvsle  ?B1 (_ bv12 32) ) ) ) (=  false (bvsle  ?B1 (_ bv13 32) ) ) ) (=  false (bvsle  ?B1 (_ bv14 32) ) ) ) (bvsle  ?B1 (_ bv15 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Eq false (Sle N0 5))
         (Eq false (Sle N0 6))
         (Eq false (Sle N0 7))
         (Eq false (Sle N0 8))
         (Eq false (Sle N0 9))
         (Eq false (Sle N0 10))
         (Eq false (Sle N0 11))
         (Eq false (Sle N0 12))
         (Eq false (Sle N0 13))
         (Eq false (Sle N0 14))
         (Sle N0 15)]
        false)


Test case: test000018
[Parsed from .ktest]
var n int 16
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (=  false (bvsle  ?B1 (_ bv6 32) ) ) ) (=  false (bvsle  ?B1 (_ bv7 32) ) ) ) (=  false (bvsle  ?B1 (_ bv8 32) ) ) ) (=  false (bvsle  ?B1 (_ bv9 32) ) ) ) (=  false (bvsle  ?B1 (_ bv10 32) ) ) ) (=  false (bvsle  ?B1 (_ bv11 32) ) ) ) (=  false (bvsle  ?B1 (_ bv12 32) ) ) ) (=  false (bvsle  ?B1 (_ bv13 32) ) ) ) (=  false (bvsle  ?B1 (_ bv14 32) ) ) ) (=  false (bvsle  ?B1 (_ bv15 32) ) ) ) (bvsle  ?B1 (_ bv16 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Eq false (Sle N0 5))
         (Eq false (Sle N0 6))
         (Eq false (Sle N0 7))
         (Eq false (Sle N0 8))
         (Eq false (Sle N0 9))
         (Eq false (Sle N0 10))
         (Eq false (Sle N0 11))
         (Eq false (Sle N0 12))
         (Eq false (Sle N0 13))
         (Eq false (Sle N0 14))
         (Eq false (Sle N0 15))
         (Sle N0 16)]
        false)


Test case: test000019
[Parsed from .ktest]
var n int 17
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (=  false (bvsle  ?B1 (_ bv6 32) ) ) ) (=  false (bvsle  ?B1 (_ bv7 32) ) ) ) (=  false (bvsle  ?B1 (_ bv8 32) ) ) ) (=  false (bvsle  ?B1 (_ bv9 32) ) ) ) (=  false (bvsle  ?B1 (_ bv10 32) ) ) ) (=  false (bvsle  ?B1 (_ bv11 32) ) ) ) (=  false (bvsle  ?B1 (_ bv12 32) ) ) ) (=  false (bvsle  ?B1 (_ bv13 32) ) ) ) (=  false (bvsle  ?B1 (_ bv14 32) ) ) ) (=  false (bvsle  ?B1 (_ bv15 32) ) ) ) (=  false (bvsle  ?B1 (_ bv16 32) ) ) ) (bvsle  ?B1 (_ bv17 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Eq false (Sle N0 5))
         (Eq false (Sle N0 6))
         (Eq false (Sle N0 7))
         (Eq false (Sle N0 8))
         (Eq false (Sle N0 9))
         (Eq false (Sle N0 10))
         (Eq false (Sle N0 11))
         (Eq false (Sle N0 12))
         (Eq false (Sle N0 13))
         (Eq false (Sle N0 14))
         (Eq false (Sle N0 15))
         (Eq false (Sle N0 16))
         (Sle N0 17)]
        false)


Test case: test000020
[Parsed from .ktest]
var n int 18
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (=  false (bvsle  ?B1 (_ bv6 32) ) ) ) (=  false (bvsle  ?B1 (_ bv7 32) ) ) ) (=  false (bvsle  ?B1 (_ bv8 32) ) ) ) (=  false (bvsle  ?B1 (_ bv9 32) ) ) ) (=  false (bvsle  ?B1 (_ bv10 32) ) ) ) (=  false (bvsle  ?B1 (_ bv11 32) ) ) ) (=  false (bvsle  ?B1 (_ bv12 32) ) ) ) (=  false (bvsle  ?B1 (_ bv13 32) ) ) ) (=  false (bvsle  ?B1 (_ bv14 32) ) ) ) (=  false (bvsle  ?B1 (_ bv15 32) ) ) ) (=  false (bvsle  ?B1 (_ bv16 32) ) ) ) (=  false (bvsle  ?B1 (_ bv17 32) ) ) ) (bvsle  ?B1 (_ bv18 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Eq false (Sle N0 5))
         (Eq false (Sle N0 6))
         (Eq false (Sle N0 7))
         (Eq false (Sle N0 8))
         (Eq false (Sle N0 9))
         (Eq false (Sle N0 10))
         (Eq false (Sle N0 11))
         (Eq false (Sle N0 12))
         (Eq false (Sle N0 13))
         (Eq false (Sle N0 14))
         (Eq false (Sle N0 15))
         (Eq false (Sle N0 16))
         (Eq false (Sle N0 17))
         (Sle N0 18)]
        false)


Test case: test000021
[Parsed from .ktest]
var n int 19
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (=  false (bvsle  ?B1 (_ bv6 32) ) ) ) (=  false (bvsle  ?B1 (_ bv7 32) ) ) ) (=  false (bvsle  ?B1 (_ bv8 32) ) ) ) (=  false (bvsle  ?B1 (_ bv9 32) ) ) ) (=  false (bvsle  ?B1 (_ bv10 32) ) ) ) (=  false (bvsle  ?B1 (_ bv11 32) ) ) ) (=  false (bvsle  ?B1 (_ bv12 32) ) ) ) (=  false (bvsle  ?B1 (_ bv13 32) ) ) ) (=  false (bvsle  ?B1 (_ bv14 32) ) ) ) (=  false (bvsle  ?B1 (_ bv15 32) ) ) ) (=  false (bvsle  ?B1 (_ bv16 32) ) ) ) (=  false (bvsle  ?B1 (_ bv17 32) ) ) ) (=  false (bvsle  ?B1 (_ bv18 32) ) ) ) (bvsle  ?B1 (_ bv19 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Eq false (Sle N0 5))
         (Eq false (Sle N0 6))
         (Eq false (Sle N0 7))
         (Eq false (Sle N0 8))
         (Eq false (Sle N0 9))
         (Eq false (Sle N0 10))
         (Eq false (Sle N0 11))
         (Eq false (Sle N0 12))
         (Eq false (Sle N0 13))
         (Eq false (Sle N0 14))
         (Eq false (Sle N0 15))
         (Eq false (Sle N0 16))
         (Eq false (Sle N0 17))
         (Eq false (Sle N0 18))
         (Sle N0 19)]
        false)


Test case: test000022
[Parsed from .ktest]
var n int 20
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (bvsle  ?B1 (_ bv0 32) ) ) ) (=  false (bvsle  ?B1 (_ bv1 32) ) ) ) (=  false (bvsle  ?B1 (_ bv2 32) ) ) ) (=  false (bvsle  ?B1 (_ bv3 32) ) ) ) (=  false (bvsle  ?B1 (_ bv4 32) ) ) ) (=  false (bvsle  ?B1 (_ bv5 32) ) ) ) (=  false (bvsle  ?B1 (_ bv6 32) ) ) ) (=  false (bvsle  ?B1 (_ bv7 32) ) ) ) (=  false (bvsle  ?B1 (_ bv8 32) ) ) ) (=  false (bvsle  ?B1 (_ bv9 32) ) ) ) (=  false (bvsle  ?B1 (_ bv10 32) ) ) ) (=  false (bvsle  ?B1 (_ bv11 32) ) ) ) (=  false (bvsle  ?B1 (_ bv12 32) ) ) ) (=  false (bvsle  ?B1 (_ bv13 32) ) ) ) (=  false (bvsle  ?B1 (_ bv14 32) ) ) ) (=  false (bvsle  ?B1 (_ bv15 32) ) ) ) (=  false (bvsle  ?B1 (_ bv16 32) ) ) ) (=  false (bvsle  ?B1 (_ bv17 32) ) ) ) (=  false (bvsle  ?B1 (_ bv18 32) ) ) ) (=  false (bvsle  ?B1 (_ bv19 32) ) ) ) (bvsle  ?B1 (_ bv20 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 20)
         (Eq false (Sle N0 0))
         (Eq false (Sle N0 1))
         (Eq false (Sle N0 2))
         (Eq false (Sle N0 3))
         (Eq false (Sle N0 4))
         (Eq false (Sle N0 5))
         (Eq false (Sle N0 6))
         (Eq false (Sle N0 7))
         (Eq false (Sle N0 8))
         (Eq false (Sle N0 9))
         (Eq false (Sle N0 10))
         (Eq false (Sle N0 11))
         (Eq false (Sle N0 12))
         (Eq false (Sle N0 13))
         (Eq false (Sle N0 14))
         (Eq false (Sle N0 15))
         (Eq false (Sle N0 16))
         (Eq false (Sle N0 17))
         (Eq false (Sle N0 18))
         (Eq false (Sle N0 19))
         (Sle N0 20)]
        false)


--- Program 96 ---
critical path is: test000016.smt2

[critical path content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  (_ bv16 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000001
[Parsed from .ktest]
var n int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 n)))]
        false)


Test case: test000002
[Parsed from .ktest]
var n int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  (_ bv0 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq 0 N0)]
        false)


Test case: test000003
[Parsed from .ktest]
var n int 1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  (_ bv1 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq 1 N0)]
        false)


Test case: test000004
[Parsed from .ktest]
var n int 2
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  (_ bv2 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq 2 N0)]
        false)


Test case: test000005
[Parsed from .ktest]
var n int 3
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  (_ bv3 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq 3 N0)]
        false)


Test case: test000006
[Parsed from .ktest]
var n int 4
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  (_ bv4 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq 4 N0)]
        false)


Test case: test000007
[Parsed from .ktest]
var n int 5
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  (_ bv5 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq 5 N0)]
        false)


Test case: test000008
[Parsed from .ktest]
var n int 6
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  (_ bv6 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq 6 N0)]
        false)


Test case: test000009
[Parsed from .ktest]
var n int 7
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  (_ bv7 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq 7 N0)]
        false)


Test case: test000010
[Parsed from .ktest]
var n int 8
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  (_ bv8 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq 8 N0)]
        false)


Test case: test000011
[Parsed from .ktest]
var n int 9
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  (_ bv9 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq 9 N0)]
        false)


Test case: test000012
[Parsed from .ktest]
var n int 10
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  (_ bv10 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq 10 N0)]
        false)


Test case: test000013
[Parsed from .ktest]
var n int 11
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  (_ bv11 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq 11 N0)]
        false)


Test case: test000014
[Parsed from .ktest]
var n int 12
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  (_ bv12 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq 12 N0)]
        false)


Test case: test000015
[Parsed from .ktest]
var n int 13
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  (_ bv13 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq 13 N0)]
        false)


Test case: test000016
[Parsed from .ktest]
var n int 14
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  (_ bv14 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq 14 N0)]
        false)


Test case: test000017
[Parsed from .ktest]
var n int 15
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  (_ bv15 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq 15 N0)]
        false)


Test case: test000018
[Parsed from .ktest]
var n int 16
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  (_ bv16 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq 16 N0)]
        false)


Test case: test000019
[Parsed from .ktest]
var n int 17
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  (_ bv17 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq 17 N0)]
        false)


Test case: test000020
[Parsed from .ktest]
var n int 18
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv17 32) ?B1 ) ) ) (=  (_ bv18 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 17 N0))
         (Eq 18 N0)]
        false)


Test case: test000021
[Parsed from .ktest]
var n int 19
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv17 32) ?B1 ) ) ) (=  false (=  (_ bv18 32) ?B1 ) ) ) (=  (_ bv19 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 17 N0))
         (Eq false (Eq 18 N0))
         (Eq 19 N0)]
        false)


Test case: test000022
[Parsed from .ktest]
var n int 20
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv17 32) ?B1 ) ) ) (=  false (=  (_ bv18 32) ?B1 ) ) ) (=  false (=  (_ bv19 32) ?B1 ) ) ) (=  (_ bv20 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 17 N0))
         (Eq false (Eq 18 N0))
         (Eq false (Eq 19 N0))
         (Eq 20 N0)]
        false)


Test case: test000023
[Parsed from .ktest]
var n int 21
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv17 32) ?B1 ) ) ) (=  false (=  (_ bv18 32) ?B1 ) ) ) (=  false (=  (_ bv19 32) ?B1 ) ) ) (=  false (=  (_ bv20 32) ?B1 ) ) ) (=  (_ bv21 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 17 N0))
         (Eq false (Eq 18 N0))
         (Eq false (Eq 19 N0))
         (Eq false (Eq 20 N0))
         (Eq 21 N0)]
        false)


Test case: test000024
[Parsed from .ktest]
var n int 22
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv17 32) ?B1 ) ) ) (=  false (=  (_ bv18 32) ?B1 ) ) ) (=  false (=  (_ bv19 32) ?B1 ) ) ) (=  false (=  (_ bv20 32) ?B1 ) ) ) (=  false (=  (_ bv21 32) ?B1 ) ) ) (=  (_ bv22 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 17 N0))
         (Eq false (Eq 18 N0))
         (Eq false (Eq 19 N0))
         (Eq false (Eq 20 N0))
         (Eq false (Eq 21 N0))
         (Eq 22 N0)]
        false)


Test case: test000025
[Parsed from .ktest]
var n int 23
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv17 32) ?B1 ) ) ) (=  false (=  (_ bv18 32) ?B1 ) ) ) (=  false (=  (_ bv19 32) ?B1 ) ) ) (=  false (=  (_ bv20 32) ?B1 ) ) ) (=  false (=  (_ bv21 32) ?B1 ) ) ) (=  false (=  (_ bv22 32) ?B1 ) ) ) (=  (_ bv23 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 17 N0))
         (Eq false (Eq 18 N0))
         (Eq false (Eq 19 N0))
         (Eq false (Eq 20 N0))
         (Eq false (Eq 21 N0))
         (Eq false (Eq 22 N0))
         (Eq 23 N0)]
        false)


Test case: test000026
[Parsed from .ktest]
var n int 24
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7 32) ?B1 ) ) ) (=  false (=  (_ bv8 32) ?B1 ) ) ) (=  false (=  (_ bv9 32) ?B1 ) ) ) (=  false (=  (_ bv10 32) ?B1 ) ) ) (=  false (=  (_ bv11 32) ?B1 ) ) ) (=  false (=  (_ bv12 32) ?B1 ) ) ) (=  false (=  (_ bv13 32) ?B1 ) ) ) (=  false (=  (_ bv14 32) ?B1 ) ) ) (=  false (=  (_ bv15 32) ?B1 ) ) ) (=  false (=  (_ bv16 32) ?B1 ) ) ) (=  false (=  (_ bv17 32) ?B1 ) ) ) (=  false (=  (_ bv18 32) ?B1 ) ) ) (=  false (=  (_ bv19 32) ?B1 ) ) ) (=  false (=  (_ bv20 32) ?B1 ) ) ) (=  false (=  (_ bv21 32) ?B1 ) ) ) (=  false (=  (_ bv22 32) ?B1 ) ) ) (=  false (=  (_ bv23 32) ?B1 ) ) ) (=  (_ bv24 32) ?B1 ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 31)
         (Eq false (Eq 0 N0))
         (Eq false (Eq 1 N0))
         (Eq false (Eq 2 N0))
         (Eq false (Eq 3 N0))
         (Eq false (Eq 4 N0))
         (Eq false (Eq 5 N0))
         (Eq false (Eq 6 N0))
         (Eq false (Eq 7 N0))
         (Eq false (Eq 8 N0))
         (Eq false (Eq 9 N0))
         (Eq false (Eq 10 N0))
         (Eq false (Eq 11 N0))
         (Eq false (Eq 12 N0))
         (Eq false (Eq 13 N0))
         (Eq false (Eq 14 N0))
         (Eq false (Eq 15 N0))
         (Eq false (Eq 16 N0))
         (Eq false (Eq 17 N0))
         (Eq false (Eq 18 N0))
         (Eq false (Eq 19 N0))
         (Eq false (Eq 20 N0))
         (Eq false (Eq 21 N0))
         (Eq false (Eq 22 N0))
         (Eq false (Eq 23 N0))
         (Eq 24 N0)]
        false)


Test case: test000027
[Parsed from .ktest]
var n int 25
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv31 32) ) ) (=  false (=  (_ bv0 32) ?B1 ) ) ) (=  false (=  (_ bv1 32) ?B1 ) ) ) (=  false (=  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv6 32) ?B1 ) ) ) (=  false (=  (_ bv7

--- Program 97 ---
critical path is: test000016.smt2

[critical path content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) (bvslt  (_ bv17 32) ?B1 ) ) ) )
(check-sat)
(exit)


Test case: test000001
[Parsed from .ktest]
var input int -2147483648
var transitions int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv1 32) (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array transitions[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 1
                  (Concat (ReadLSB w8 3 transitions)
                          (Concat (ReadLSB w8 2 transitions)
                                  (Concat (ReadLSB w8 1 transitions)
                                          (ReadLSB w8 0 transitions))))))]
        false)


Test case: test000002
[Parsed from .ktest]
var input int 0
var transitions int 1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) (=  false (bvslt  (_ bv1 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)
         (Eq 0
             (SRem w32 (ReadLSB w32 0 input) 3))
         (Eq false (Slt 1 N0))]
        false)


Test case: test000003
[Parsed from .ktest]
var input int 1
var transitions int 1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) (=  false (bvslt  (_ bv1 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq 1
             (SRem w32 (ReadLSB w32 0 input) 3))
         (Eq false (Slt 1 N0))]
        false)


Test case: test000004
[Parsed from .ktest]
var input int 2
var transitions int 1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (bvslt  (_ bv1 32) ?B1 ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false
             (Eq 1
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false (Slt 1 N0))]
        false)


Test case: test000005
[Parsed from .ktest]
var input int 0
var transitions int 2
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) (=  false (bvslt  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)
         (Eq 0
             (SRem w32 (ReadLSB w32 0 input) 3))
         (Eq false (Slt 2 N0))
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))]
        false)


Test case: test000006
[Parsed from .ktest]
var input int 1
var transitions int 2
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) (=  false (bvslt  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq 1
             (SRem w32 (ReadLSB w32 0 input) 3))
         (Eq false (Slt 2 N0))
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))]
        false)


Test case: test000007
[Parsed from .ktest]
var input int 2
var transitions int 2
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (bvslt  (_ bv2 32) ?B1 ) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false
             (Eq 1
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false (Slt 2 N0))
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))]
        false)


Test case: test000008
[Parsed from .ktest]
var input int 0
var transitions int 3
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) (=  false (bvslt  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)
         (Eq 0
             (SRem w32 (ReadLSB w32 0 input) 3))
         (Eq false (Slt 3 N0))
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false
             (Eq 1
                 (SRem w32 (ReadLSB w32 0 input) 3)))]
        false)


Test case: test000009
[Parsed from .ktest]
var input int 1
var transitions int 3
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) (=  false (bvslt  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq 1
             (SRem w32 (ReadLSB w32 0 input) 3))
         (Eq false (Slt 3 N0))
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false
             (Eq 1
                 (SRem w32 (ReadLSB w32 0 input) 3)))]
        false)


Test case: test000010
[Parsed from .ktest]
var input int 2
var transitions int 3
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (bvslt  (_ bv3 32) ?B1 ) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false
             (Eq 1
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false (Slt 3 N0))
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false
             (Eq 1
                 (SRem w32 (ReadLSB w32 0 input) 3)))]
        false)


Test case: test000011
[Parsed from .ktest]
var input int 0
var transitions int 4
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) (=  false (bvslt  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)
         (Eq 0
             (SRem w32 (ReadLSB w32 0 input) 3))
         (Eq false (Slt 4 N0))
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false
             (Eq 1
                 (SRem w32 (ReadLSB w32 0 input) 3)))]
        false)


Test case: test000012
[Parsed from .ktest]
var input int 1
var transitions int 4
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) (=  false (bvslt  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq 1
             (SRem w32 (ReadLSB w32 0 input) 3))
         (Eq false (Slt 4 N0))
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false
             (Eq 1
                 (SRem w32 (ReadLSB w32 0 input) 3)))]
        false)


Test case: test000013
[Parsed from .ktest]
var input int 2
var transitions int 4
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (bvslt  (_ bv4 32) ?B1 ) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false
             (Eq 1
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false (Slt 4 N0))
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false
             (Eq 1
                 (SRem w32 (ReadLSB w32 0 input) 3)))]
        false)


Test case: test000014
[Parsed from .ktest]
var input int 0
var transitions int 5
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) (=  false (bvslt  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)
         (Eq 0
             (SRem w32 (ReadLSB w32 0 input) 3))
         (Eq false (Slt 5 N0))
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false
             (Eq 1
                 (SRem w32 (ReadLSB w32 0 input) 3)))]
        false)


Test case: test000015
[Parsed from .ktest]
var input int 1
var transitions int 5
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) (=  false (bvslt  (_ bv5 32) ?B1 ) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq 1
             (SRem w32 (ReadLSB w32 0 input) 3))
         (Eq false (Slt 5 N0))
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false
             (Eq 1
                 (SRem w32 (ReadLSB w32 0 input) 3)))]
        false)


Test case: test000016
[Parsed from .ktest]
var input int 2
var transitions int 5
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun input () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun transitions () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  transitions (_ bv3 32) ) (concat  (select  transitions (_ bv2 32) ) (concat  (select  transitions (_ bv1 32) ) (select  transitions (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv20 32) ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (bvslt  (_ bv5 32) ?B1 ) ) (=  false (=  (_ bv0 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) (=  false (=  (_ bv1 32) (bvsrem  (concat  (select  input (_ bv3 32) ) (concat  (select  input (_ bv2 32) ) (concat  (select  input (_ bv1 32) ) (select  input (_ bv0 32) ) ) ) ) (_ bv3 32) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array input[4] : w32 -> w8 = symbolic
array transitions[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 transitions))
         (Sle N0 20)
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false
             (Eq 1
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Slt 5 N0)
         (Eq false
             (Eq 0
                 (SRem w32 (ReadLSB w32 0 input) 3)))
         (Eq false
             (Eq 1
                 (SRem w32 (ReadLSB w32 0 input) 3)))]
        false)


--- Program 98 ---
critical path is: test000007.kquery

[critical path content]
array steps[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)]
        false)


Test case: test000001
[Parsed from .ktest]
var steps int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv1 32) (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array steps[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 1
                  (ReadLSB w32 0 steps)))]
        false)


Test case: test000002
[Parsed from .ktest]
var steps int 1
var step int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv10 32) ) ) (=  false (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Eq false
             (Sle 1
                  (ReadLSB w32 0 step)))]
        false)


Test case: test000003
[Parsed from .ktest]
var steps int 2
var step int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv10 32) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (=  false (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle 1
              N1:(ReadLSB w32 0 step))
         (Eq false
             (Sle 1
                  (ReadLSB w32 0 step)))]
        false)


Test case: test000004
[Parsed from .ktest]
var steps int 3
var step int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv10 32) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (=  false (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle 1
              N1:(ReadLSB w32 0 step))
         (Sle 1
              N2:(ReadLSB w32 0 step))
         (Eq false
             (Sle 1
                  (ReadLSB w32 0 step)))]
        false)


Test case: test000005
[Parsed from .ktest]
var steps int 4
var step int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv10 32) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (=  false (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle 1
              N1:(ReadLSB w32 0 step))
         (Sle 1
              N2:(ReadLSB w32 0 step))
         (Sle 1
              N3:(ReadLSB w32 0 step))
         (Eq false
             (Sle 1
                  (ReadLSB w32 0 step)))]
        false)


Test case: test000006
[Parsed from .ktest]
var steps int 5
var step int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv10 32) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (=  false (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle 1
              N1:(ReadLSB w32 0 step))
         (Sle 1
              N2:(ReadLSB w32 0 step))
         (Sle 1
              N3:(ReadLSB w32 0 step))
         (Sle 1
              N4:(ReadLSB w32 0 step))
         (Eq false
             (Sle 1
                  (ReadLSB w32 0 step)))]
        false)


Test case: test000007
[Parsed from .ktest]
var steps int 6
var step int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv10 32) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (=  false (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle 1
              N1:(ReadLSB w32 0 step))
         (Sle 1
              N2:(ReadLSB w32 0 step))
         (Sle 1
              N3:(ReadLSB w32 0 step))
         (Sle 1
              N4:(ReadLSB w32 0 step))
         (Sle 1
              N5:(ReadLSB w32 0 step))
         (Eq false
             (Sle 1
                  (ReadLSB w32 0 step)))]
        false)


Test case: test000008
[Parsed from .ktest]
var steps int 7
var step int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv10 32) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (=  false (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle 1
              N1:(ReadLSB w32 0 step))
         (Sle 1
              N2:(ReadLSB w32 0 step))
         (Sle 1
              N3:(ReadLSB w32 0 step))
         (Sle 1
              N4:(ReadLSB w32 0 step))
         (Sle 1
              N5:(ReadLSB w32 0 step))
         (Sle 1
              N6:(ReadLSB w32 0 step))
         (Eq false
             (Sle 1
                  (ReadLSB w32 0 step)))]
        false)


Test case: test000009
[Parsed from .ktest]
var steps int 8
var step int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv10 32) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (=  false (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle 1
              N1:(ReadLSB w32 0 step))
         (Sle 1
              N2:(ReadLSB w32 0 step))
         (Sle 1
              N3:(ReadLSB w32 0 step))
         (Sle 1
              N4:(ReadLSB w32 0 step))
         (Sle 1
              N5:(ReadLSB w32 0 step))
         (Sle 1
              N6:(ReadLSB w32 0 step))
         (Sle 1
              N7:(ReadLSB w32 0 step))
         (Eq false
             (Sle 1
                  (ReadLSB w32 0 step)))]
        false)


Test case: test000010
[Parsed from .ktest]
var steps int 9
var step int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv10 32) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (=  false (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle 1
              N1:(ReadLSB w32 0 step))
         (Sle 1
              N2:(ReadLSB w32 0 step))
         (Sle 1
              N3:(ReadLSB w32 0 step))
         (Sle 1
              N4:(ReadLSB w32 0 step))
         (Sle 1
              N5:(ReadLSB w32 0 step))
         (Sle 1
              N6:(ReadLSB w32 0 step))
         (Sle 1
              N7:(ReadLSB w32 0 step))
         (Sle 1
              N8:(ReadLSB w32 0 step))
         (Eq false
             (Sle 1
                  (ReadLSB w32 0 step)))]
        false)


Test case: test000011
[Parsed from .ktest]
var steps int 10
var step int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun steps () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun step () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  steps (_ bv3 32) ) (concat  (select  steps (_ bv2 32) ) (concat  (select  steps (_ bv1 32) ) (select  steps (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (bvsle  (_ bv1 32) ?B1 ) (bvsle  ?B1 (_ bv10 32) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (bvsle  (_ bv1 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) (=  (_ bv0 32) (concat  (select  step (_ bv3 32) ) (concat  (select  step (_ bv2 32) ) (concat  (select  step (_ bv1 32) ) (select  step (_ bv0 32) ) ) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array steps[4] : w32 -> w8 = symbolic
array step[4] : w32 -> w8 = symbolic
(query [(Sle 1
              N0:(ReadLSB w32 0 steps))
         (Sle N0 10)
         (Sle 1
              N1:(ReadLSB w32 0 step))
         (Sle 1
              N2:(ReadLSB w32 0 step))
         (Sle 1
              N3:(ReadLSB w32 0 step))
         (Sle 1
              N4:(ReadLSB w32 0 step))
         (Sle 1
              N5:(ReadLSB w32 0 step))
         (Sle 1
              N6:(ReadLSB w32 0 step))
         (Sle 1
              N7:(ReadLSB w32 0 step))
         (Sle 1
              N8:(ReadLSB w32 0 step))
         (Sle 1
              N9:(ReadLSB w32 0 step))
         (Eq 0
             (ReadLSB w32 0 step))]
        false)


--- Program 99 ---
Test case: test000001.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (or (=  (_ bv0 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (=  (_ bv1 32) (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000001.kquery
array flag[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Or (Eq 0
                    (ReadLSB w32 0 flag))
                 (Eq 1
                    (ReadLSB w32 0 flag))))]
        false)


Test case: test000002.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000002.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)]
        false)


Test case: test000003.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  ?B2 (_ bv1 32) ) ) ) )
(check-sat)
(exit)


Test case: test000003.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq N1 1)]
        false)


Test case: test000004.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  ?B2 (_ bv2 32) ) ) ) )
(check-sat)
(exit)


Test case: test000004.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq N1 2)]
        false)


Test case: test000005.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  ?B2 (_ bv3 32) ) ) ) )
(check-sat)
(exit)


Test case: test000005.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq N1 3)]
        false)


Test case: test000006.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  ?B2 (_ bv4 32) ) ) ) )
(check-sat)
(exit)


Test case: test000006.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq N1 4)]
        false)


Test case: test000007.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  ?B2 (_ bv5 32) ) ) ) )
(check-sat)
(exit)


Test case: test000007.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq N1 5)]
        false)


Test case: test000008.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  false (=  ?B2 (_ bv5 32) ) ) ) (=  ?B2 (_ bv6 32) ) ) ) )
(check-sat)
(exit)


Test case: test000008.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq false (Eq N1 5))
         (Eq N1 6)]
        false)


Test case: test000009.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  false (=  ?B2 (_ bv5 32) ) ) ) (=  false (=  ?B2 (_ bv6 32) ) ) ) (=  ?B2 (_ bv7 32) ) ) ) )
(check-sat)
(exit)


Test case: test000009.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq false (Eq N1 5))
         (Eq false (Eq N1 6))
         (Eq N1 7)]
        false)


Test case: test000010.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  false (=  ?B2 (_ bv5 32) ) ) ) (=  false (=  ?B2 (_ bv6 32) ) ) ) (=  false (=  ?B2 (_ bv7 32) ) ) ) (=  ?B2 (_ bv8 32) ) ) ) )
(check-sat)
(exit)


Test case: test000010.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq false (Eq N1 5))
         (Eq false (Eq N1 6))
         (Eq false (Eq N1 7))
         (Eq N1 8)]
        false)


Test case: test000011.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  false (=  ?B2 (_ bv5 32) ) ) ) (=  false (=  ?B2 (_ bv6 32) ) ) ) (=  false (=  ?B2 (_ bv7 32) ) ) ) (=  false (=  ?B2 (_ bv8 32) ) ) ) (=  ?B2 (_ bv9 32) ) ) ) )
(check-sat)
(exit)


Test case: test000011.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq false (Eq N1 5))
         (Eq false (Eq N1 6))
         (Eq false (Eq N1 7))
         (Eq false (Eq N1 8))
         (Eq N1 9)]
        false)


Test case: test000012.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  false (=  ?B2 (_ bv5 32) ) ) ) (=  false (=  ?B2 (_ bv6 32) ) ) ) (=  false (=  ?B2 (_ bv7 32) ) ) ) (=  false (=  ?B2 (_ bv8 32) ) ) ) (=  false (=  ?B2 (_ bv9 32) ) ) ) (=  ?B2 (_ bv10 32) ) ) ) )
(check-sat)
(exit)


Test case: test000012.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq false (Eq N1 5))
         (Eq false (Eq N1 6))
         (Eq false (Eq N1 7))
         (Eq false (Eq N1 8))
         (Eq false (Eq N1 9))
         (Eq N1 10)]
        false)


Test case: test000013.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  false (=  ?B2 (_ bv5 32) ) ) ) (=  false (=  ?B2 (_ bv6 32) ) ) ) (=  false (=  ?B2 (_ bv7 32) ) ) ) (=  false (=  ?B2 (_ bv8 32) ) ) ) (=  false (=  ?B2 (_ bv9 32) ) ) ) (=  false (=  ?B2 (_ bv10 32) ) ) ) (=  ?B2 (_ bv11 32) ) ) ) )
(check-sat)
(exit)


Test case: test000013.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq false (Eq N1 5))
         (Eq false (Eq N1 6))
         (Eq false (Eq N1 7))
         (Eq false (Eq N1 8))
         (Eq false (Eq N1 9))
         (Eq false (Eq N1 10))
         (Eq N1 11)]
        false)


Test case: test000014.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  false (=  ?B2 (_ bv5 32) ) ) ) (=  false (=  ?B2 (_ bv6 32) ) ) ) (=  false (=  ?B2 (_ bv7 32) ) ) ) (=  false (=  ?B2 (_ bv8 32) ) ) ) (=  false (=  ?B2 (_ bv9 32) ) ) ) (=  false (=  ?B2 (_ bv10 32) ) ) ) (=  false (=  ?B2 (_ bv11 32) ) ) ) (=  ?B2 (_ bv12 32) ) ) ) )
(check-sat)
(exit)


Test case: test000014.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq false (Eq N1 5))
         (Eq false (Eq N1 6))
         (Eq false (Eq N1 7))
         (Eq false (Eq N1 8))
         (Eq false (Eq N1 9))
         (Eq false (Eq N1 10))
         (Eq false (Eq N1 11))
         (Eq N1 12)]
        false)


Test case: test000015.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  false (=  ?B2 (_ bv5 32) ) ) ) (=  false (=  ?B2 (_ bv6 32) ) ) ) (=  false (=  ?B2 (_ bv7 32) ) ) ) (=  false (=  ?B2 (_ bv8 32) ) ) ) (=  false (=  ?B2 (_ bv9 32) ) ) ) (=  false (=  ?B2 (_ bv10 32) ) ) ) (=  false (=  ?B2 (_ bv11 32) ) ) ) (=  false (=  ?B2 (_ bv12 32) ) ) ) (=  ?B2 (_ bv13 32) ) ) ) )
(check-sat)
(exit)


Test case: test000015.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq false (Eq N1 5))
         (Eq false (Eq N1 6))
         (Eq false (Eq N1 7))
         (Eq false (Eq N1 8))
         (Eq false (Eq N1 9))
         (Eq false (Eq N1 10))
         (Eq false (Eq N1 11))
         (Eq false (Eq N1 12))
         (Eq N1 13)]
        false)


Test case: test000016.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  false (=  ?B2 (_ bv5 32) ) ) ) (=  false (=  ?B2 (_ bv6 32) ) ) ) (=  false (=  ?B2 (_ bv7 32) ) ) ) (=  false (=  ?B2 (_ bv8 32) ) ) ) (=  false (=  ?B2 (_ bv9 32) ) ) ) (=  false (=  ?B2 (_ bv10 32) ) ) ) (=  false (=  ?B2 (_ bv11 32) ) ) ) (=  false (=  ?B2 (_ bv12 32) ) ) ) (=  false (=  ?B2 (_ bv13 32) ) ) ) (=  ?B2 (_ bv14 32) ) ) ) )
(check-sat)
(exit)


Test case: test000016.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq false (Eq N1 5))
         (Eq false (Eq N1 6))
         (Eq false (Eq N1 7))
         (Eq false (Eq N1 8))
         (Eq false (Eq N1 9))
         (Eq false (Eq N1 10))
         (Eq false (Eq N1 11))
         (Eq false (Eq N1 12))
         (Eq false (Eq N1 13))
         (Eq N1 14)]
        false)


Test case: test000017.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  false (=  ?B2 (_ bv5 32) ) ) ) (=  false (=  ?B2 (_ bv6 32) ) ) ) (=  false (=  ?B2 (_ bv7 32) ) ) ) (=  false (=  ?B2 (_ bv8 32) ) ) ) (=  false (=  ?B2 (_ bv9 32) ) ) ) (=  false (=  ?B2 (_ bv10 32) ) ) ) (=  false (=  ?B2 (_ bv11 32) ) ) ) (=  false (=  ?B2 (_ bv12 32) ) ) ) (=  false (=  ?B2 (_ bv13 32) ) ) ) (=  false (=  ?B2 (_ bv14 32) ) ) ) (=  ?B2 (_ bv15 32) ) ) ) )
(check-sat)
(exit)


Test case: test000017.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq false (Eq N1 5))
         (Eq false (Eq N1 6))
         (Eq false (Eq N1 7))
         (Eq false (Eq N1 8))
         (Eq false (Eq N1 9))
         (Eq false (Eq N1 10))
         (Eq false (Eq N1 11))
         (Eq false (Eq N1 12))
         (Eq false (Eq N1 13))
         (Eq false (Eq N1 14))
         (Eq N1 15)]
        false)


Test case: test000018.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  false (=  ?B2 (_ bv5 32) ) ) ) (=  false (=  ?B2 (_ bv6 32) ) ) ) (=  false (=  ?B2 (_ bv7 32) ) ) ) (=  false (=  ?B2 (_ bv8 32) ) ) ) (=  false (=  ?B2 (_ bv9 32) ) ) ) (=  false (=  ?B2 (_ bv10 32) ) ) ) (=  false (=  ?B2 (_ bv11 32) ) ) ) (=  false (=  ?B2 (_ bv12 32) ) ) ) (=  false (=  ?B2 (_ bv13 32) ) ) ) (=  false (=  ?B2 (_ bv14 32) ) ) ) (=  false (=  ?B2 (_ bv15 32) ) ) ) (=  ?B2 (_ bv16 32) ) ) ) )
(check-sat)
(exit)


Test case: test000018.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq false (Eq N1 5))
         (Eq false (Eq N1 6))
         (Eq false (Eq N1 7))
         (Eq false (Eq N1 8))
         (Eq false (Eq N1 9))
         (Eq false (Eq N1 10))
         (Eq false (Eq N1 11))
         (Eq false (Eq N1 12))
         (Eq false (Eq N1 13))
         (Eq false (Eq N1 14))
         (Eq false (Eq N1 15))
         (Eq N1 16)]
        false)


Test case: test000019.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  false (=  ?B2 (_ bv5 32) ) ) ) (=  false (=  ?B2 (_ bv6 32) ) ) ) (=  false (=  ?B2 (_ bv7 32) ) ) ) (=  false (=  ?B2 (_ bv8 32) ) ) ) (=  false (=  ?B2 (_ bv9 32) ) ) ) (=  false (=  ?B2 (_ bv10 32) ) ) ) (=  false (=  ?B2 (_ bv11 32) ) ) ) (=  false (=  ?B2 (_ bv12 32) ) ) ) (=  false (=  ?B2 (_ bv13 32) ) ) ) (=  false (=  ?B2 (_ bv14 32) ) ) ) (=  false (=  ?B2 (_ bv15 32) ) ) ) (=  false (=  ?B2 (_ bv16 32) ) ) ) (=  ?B2 (_ bv17 32) ) ) ) )
(check-sat)
(exit)


Test case: test000019.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq false (Eq N1 5))
         (Eq false (Eq N1 6))
         (Eq false (Eq N1 7))
         (Eq false (Eq N1 8))
         (Eq false (Eq N1 9))
         (Eq false (Eq N1 10))
         (Eq false (Eq N1 11))
         (Eq false (Eq N1 12))
         (Eq false (Eq N1 13))
         (Eq false (Eq N1 14))
         (Eq false (Eq N1 15))
         (Eq false (Eq N1 16))
         (Eq N1 17)]
        false)


Test case: test000020.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  false (=  ?B2 (_ bv5 32) ) ) ) (=  false (=  ?B2 (_ bv6 32) ) ) ) (=  false (=  ?B2 (_ bv7 32) ) ) ) (=  false (=  ?B2 (_ bv8 32) ) ) ) (=  false (=  ?B2 (_ bv9 32) ) ) ) (=  false (=  ?B2 (_ bv10 32) ) ) ) (=  false (=  ?B2 (_ bv11 32) ) ) ) (=  false (=  ?B2 (_ bv12 32) ) ) ) (=  false (=  ?B2 (_ bv13 32) ) ) ) (=  false (=  ?B2 (_ bv14 32) ) ) ) (=  false (=  ?B2 (_ bv15 32) ) ) ) (=  false (=  ?B2 (_ bv16 32) ) ) ) (=  false (=  ?B2 (_ bv17 32) ) ) ) (=  ?B2 (_ bv18 32) ) ) ) )
(check-sat)
(exit)


Test case: test000020.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq false (Eq N1 5))
         (Eq false (Eq N1 6))
         (Eq false (Eq N1 7))
         (Eq false (Eq N1 8))
         (Eq false (Eq N1 9))
         (Eq false (Eq N1 10))
         (Eq false (Eq N1 11))
         (Eq false (Eq N1 12))
         (Eq false (Eq N1 13))
         (Eq false (Eq N1 14))
         (Eq false (Eq N1 15))
         (Eq false (Eq N1 16))
         (Eq false (Eq N1 17))
         (Eq N1 18)]
        false)


Test case: test000021.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  false (=  ?B2 (_ bv5 32) ) ) ) (=  false (=  ?B2 (_ bv6 32) ) ) ) (=  false (=  ?B2 (_ bv7 32) ) ) ) (=  false (=  ?B2 (_ bv8 32) ) ) ) (=  false (=  ?B2 (_ bv9 32) ) ) ) (=  false (=  ?B2 (_ bv10 32) ) ) ) (=  false (=  ?B2 (_ bv11 32) ) ) ) (=  false (=  ?B2 (_ bv12 32) ) ) ) (=  false (=  ?B2 (_ bv13 32) ) ) ) (=  false (=  ?B2 (_ bv14 32) ) ) ) (=  false (=  ?B2 (_ bv15 32) ) ) ) (=  false (=  ?B2 (_ bv16 32) ) ) ) (=  false (=  ?B2 (_ bv17 32) ) ) ) (=  false (=  ?B2 (_ bv18 32) ) ) ) (=  ?B2 (_ bv19 32) ) ) ) )
(check-sat)
(exit)


Test case: test000021.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq false (Eq N1 5))
         (Eq false (Eq N1 6))
         (Eq false (Eq N1 7))
         (Eq false (Eq N1 8))
         (Eq false (Eq N1 9))
         (Eq false (Eq N1 10))
         (Eq false (Eq N1 11))
         (Eq false (Eq N1 12))
         (Eq false (Eq N1 13))
         (Eq false (Eq N1 14))
         (Eq false (Eq N1 15))
         (Eq false (Eq N1 16))
         (Eq false (Eq N1 17))
         (Eq false (Eq N1 18))
         (Eq N1 19)]
        false)


Test case: test000022.smt2
[critical path content]
(set-logic QF_AUFBV )
(declare-fun flag () (Array (_ BitVec 32) (_ BitVec 8) ) )
(declare-fun iterations () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  flag (_ bv3 32) ) (concat  (select  flag (_ bv2 32) ) (concat  (select  flag (_ bv1 32) ) (select  flag (_ bv0 32) ) ) ) ) ) (?B2 (concat  (select  iterations (_ bv3 32) ) (concat  (select  iterations (_ bv2 32) ) (concat  (select  iterations (_ bv1 32) ) (select  iterations (_ bv0 32) ) ) ) ) ) ) (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (and  (or (=  (_ bv0 32) ?B1 ) (=  (_ bv1 32) ?B1 ) ) (bvsle  (_ bv1 32) ?B2 ) ) (bvsle  ?B2 (_ bv20 32) ) ) (=  false (=  ?B2 (_ bv1 32) ) ) ) (=  false (=  ?B2 (_ bv2 32) ) ) ) (=  false (=  ?B2 (_ bv3 32) ) ) ) (=  false (=  ?B2 (_ bv4 32) ) ) ) (=  false (=  ?B2 (_ bv5 32) ) ) ) (=  false (=  ?B2 (_ bv6 32) ) ) ) (=  false (=  ?B2 (_ bv7 32) ) ) ) (=  false (=  ?B2 (_ bv8 32) ) ) ) (=  false (=  ?B2 (_ bv9 32) ) ) ) (=  false (=  ?B2 (_ bv10 32) ) ) ) (=  false (=  ?B2 (_ bv11 32) ) ) ) (=  false (=  ?B2 (_ bv12 32) ) ) ) (=  false (=  ?B2 (_ bv13 32) ) ) ) (=  false (=  ?B2 (_ bv14 32) ) ) ) (=  false (=  ?B2 (_ bv15 32) ) ) ) (=  false (=  ?B2 (_ bv16 32) ) ) ) (=  false (=  ?B2 (_ bv17 32) ) ) ) (=  false (=  ?B2 (_ bv18 32) ) ) ) (=  false (=  ?B2 (_ bv19 32) ) ) ) (=  ?B2 (_ bv20 32) ) ) ) )
(check-sat)
(exit)


Test case: test000022.kquery
array flag[4] : w32 -> w8 = symbolic
array iterations[4] : w32 -> w8 = symbolic
(query [(Eq true
             (Or (Eq 0
                    N0:(ReadLSB w32 0 flag))
                 (Eq 1 N0)))
         (Sle 1 N1:(ReadLSB w32 0 iterations))
         (Sle N1 20)
         (Eq false (Eq N1 1))
         (Eq false (Eq N1 2))
         (Eq false (Eq N1 3))
         (Eq false (Eq N1 4))
         (Eq false (Eq N1 5))
         (Eq false (Eq N1 6))
         (Eq false (Eq N1 7))
         (Eq false (Eq N1 8))
         (Eq false (Eq N1 9))
         (Eq false (Eq N1 10))
         (Eq false (Eq N1 11))
         (Eq false (Eq N1 12))
         (Eq false (Eq N1 13))
         (Eq false (Eq N1 14))
         (Eq false (Eq N1 15))
         (Eq false (Eq N1 16))
         (Eq false (Eq N1 17))
         (Eq false (Eq N1 18))
         (Eq false (Eq N1 19))
         (Eq N1 20)]
        false)


--- Program 100 ---
critical path is: test000001.smt2

[critical path content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)


Test case: test000001
[Parsed from .ktest]
var n int -1
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (=  false (bvsle  (_ bv0 32) (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Eq false
             (Sle 0
                  (ReadLSB w32 0 n)))]
        false)


Test case: test000002
[Parsed from .ktest]
var n int 0
[.smt2 content]
(set-logic QF_AUFBV )
(declare-fun n () (Array (_ BitVec 32) (_ BitVec 8) ) )
(assert (let ( (?B1 (concat  (select  n (_ bv3 32) ) (concat  (select  n (_ bv2 32) ) (concat  (select  n (_ bv1 32) ) (select  n (_ bv0 32) ) ) ) ) ) ) (and  (bvsle  (_ bv0 32) ?B1 ) (bvsle  ?B1 (_ bv1000 32) ) ) ) )
(check-sat)
(exit)

[.kquery content]
array n[4] : w32 -> w8 = symbolic
(query [(Sle 0
              N0:(ReadLSB w32 0 n))
         (Sle N0 1000)]
        false)


